Grammar:

Rule 0     S' -> programa
Rule 1     programa -> clase ;
Rule 2     programa -> programa clase ;
Rule 3     clase -> CLASS TYPEID { error }
Rule 4     clase -> CLASS TYPEID { }
Rule 5     clase -> CLASS TYPEID { optional_feature }
Rule 6     clase -> CLASS TYPEID INHERITS TYPEID { }
Rule 7     clase -> CLASS TYPEID INHERITS TYPEID { optional_feature }
Rule 8     optional_feature -> error ;
Rule 9     optional_feature -> optional_feature feature ;
Rule 10    optional_feature -> feature ;
Rule 11    feature -> OBJECTID ( optional_formal ) : TYPEID { error }
Rule 12    feature -> OBJECTID ( ) : TYPEID { error }
Rule 13    feature -> OBJECTID ( ) : TYPEID { expr }
Rule 14    feature -> OBJECTID ( formal ) : TYPEID { expr }
Rule 15    feature -> OBJECTID ( formal optional_formal ) : TYPEID { expr }
Rule 16    feature -> OBJECTID : TYPEID
Rule 17    feature -> OBJECTID : TYPEID ASSIGN expr  [precedence=right, level=1]
Rule 18    optional_formal -> error formal
Rule 19    optional_formal -> , formal optional_formal
Rule 20    optional_formal -> , formal
Rule 21    formal -> OBJECTID : TYPEID
Rule 22    expr -> IF expr THEN expr ELSE expr error
Rule 23    expr -> IF expr THEN error FI
Rule 24    expr -> OBJECTID ASSIGN expr  [precedence=right, level=1]
Rule 25    expr -> expr . OBJECTID ( expr optional_expressions )
Rule 26    expr -> expr . OBJECTID ( expr )
Rule 27    expr -> expr . OBJECTID ( )
Rule 28    expr -> expr @ TYPEID . OBJECTID ( expr optional_expressions )
Rule 29    expr -> expr @ TYPEID . OBJECTID ( expr )
Rule 30    expr -> expr @ TYPEID . OBJECTID ( )
Rule 31    expr -> OBJECTID ( )
Rule 32    expr -> OBJECTID ( expr optional_expressions )
Rule 33    expr -> OBJECTID ( expr )
Rule 34    expr -> IF expr THEN expr ELSE expr FI
Rule 35    expr -> WHILE expr LOOP expr POOL
Rule 36    expr -> { lista_expr }
Rule 37    expr -> LET OBJECTID : TYPEID optional_assigns IN expr
Rule 38    expr -> LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
Rule 39    expr -> LET OBJECTID : TYPEID IN expr
Rule 40    expr -> LET OBJECTID : TYPEID ASSIGN expr IN expr
Rule 41    expr -> CASE expr OF lista_asig ESAC
Rule 42    expr -> NEW TYPEID
Rule 43    expr -> ISVOID expr  [precedence=left, level=7]
Rule 44    expr -> expr + expr  [precedence=left, level=4]
Rule 45    expr -> expr - expr  [precedence=left, level=4]
Rule 46    expr -> expr * expr  [precedence=left, level=6]
Rule 47    expr -> expr / expr  [precedence=left, level=6]
Rule 48    expr -> ~ expr  [precedence=right, level=5]
Rule 49    expr -> expr < expr  [precedence=nonassoc, level=3]
Rule 50    expr -> expr LE expr  [precedence=nonassoc, level=3]
Rule 51    expr -> expr = expr  [precedence=nonassoc, level=3]
Rule 52    expr -> NOT expr  [precedence=right, level=2]
Rule 53    expr -> ( expr )
Rule 54    expr -> OBJECTID
Rule 55    expr -> INT_CONST
Rule 56    expr -> STR_CONST
Rule 57    expr -> BOOL_CONST
Rule 58    expr -> - expr  [precedence=right, level=8]
Rule 59    lista_asig -> OBJECTID : TYPEID DARROW expr ; lista_asig
Rule 60    lista_asig -> OBJECTID : TYPEID DARROW expr ;
Rule 61    optional_assigns -> , OBJECTID : TYPEID
Rule 62    optional_assigns -> , OBJECTID : TYPEID ASSIGN expr  [precedence=right, level=1]
Rule 63    optional_assigns -> , OBJECTID : TYPEID optional_assigns
Rule 64    optional_assigns -> , OBJECTID : TYPEID ASSIGN expr optional_assigns  [precedence=right, level=1]
Rule 65    lista_expr -> error ;
Rule 66    lista_expr -> lista_expr expr ;
Rule 67    lista_expr -> expr ;
Rule 68    optional_expressions -> , expr optional_expressions
Rule 69    optional_expressions -> , expr

Unused terminals:

    NUMBER

Terminals, with rules where they appear:

(                    : 11 12 13 14 15 25 26 27 28 29 30 31 32 33 53
)                    : 11 12 13 14 15 25 26 27 28 29 30 31 32 33 53
*                    : 46
+                    : 44
,                    : 19 20 61 62 63 64 68 69
-                    : 45 58
.                    : 25 26 27 28 29 30
/                    : 47
:                    : 11 12 13 14 15 16 17 21 37 38 39 40 59 60 61 62 63 64
;                    : 1 2 8 9 10 59 60 65 66 67
<                    : 49
=                    : 51
@                    : 28 29 30
ASSIGN               : 17 24 38 40 62 64
BOOL_CONST           : 57
CASE                 : 41
CLASS                : 3 4 5 6 7
DARROW               : 59 60
ELSE                 : 22 34
ESAC                 : 41
FI                   : 23 34
IF                   : 22 23 34
IN                   : 37 38 39 40
INHERITS             : 6 7
INT_CONST            : 55
ISVOID               : 43
LE                   : 50
LET                  : 37 38 39 40
LOOP                 : 35
NEW                  : 42
NOT                  : 52
NUMBER               : 
OBJECTID             : 11 12 13 14 15 16 17 21 24 25 26 27 28 29 30 31 32 33 37 38 39 40 54 59 60 61 62 63 64
OF                   : 41
POOL                 : 35
STR_CONST            : 56
THEN                 : 22 23 34
TYPEID               : 3 4 5 6 6 7 7 11 12 13 14 15 16 17 21 28 29 30 37 38 39 40 42 59 60 61 62 63 64
WHILE                : 35
error                : 3 8 11 12 18 22 23 65
{                    : 3 4 5 6 7 11 12 13 14 15 36
}                    : 3 4 5 6 7 11 12 13 14 15 36
~                    : 48

Nonterminals, with rules where they appear:

clase                : 1 2
expr                 : 13 14 15 17 22 22 22 23 24 25 25 26 26 27 28 28 29 29 30 32 33 34 34 34 35 35 37 38 38 39 40 40 41 43 44 44 45 45 46 46 47 47 48 49 49 50 50 51 51 52 53 58 59 60 62 64 66 67 68 69
feature              : 9 10
formal               : 14 15 18 19 20
lista_asig           : 41 59
lista_expr           : 36 66
optional_assigns     : 37 38 63 64
optional_expressions : 25 28 32 68
optional_feature     : 5 7 9
optional_formal      : 11 15 19
programa             : 2 0


state 0

    (0) S' -> . programa
    (1) programa -> . clase ;
    (2) programa -> . programa clase ;
    (3) clase -> . CLASS TYPEID { error }
    (4) clase -> . CLASS TYPEID { }
    (5) clase -> . CLASS TYPEID { optional_feature }
    (6) clase -> . CLASS TYPEID INHERITS TYPEID { }
    (7) clase -> . CLASS TYPEID INHERITS TYPEID { optional_feature }
    CLASS           shift and go to state 3

    programa                       shift and go to state 1
    clase                          shift and go to state 2

state 1

    (0) S' -> programa .
    (2) programa -> programa . clase ;
    (3) clase -> . CLASS TYPEID { error }
    (4) clase -> . CLASS TYPEID { }
    (5) clase -> . CLASS TYPEID { optional_feature }
    (6) clase -> . CLASS TYPEID INHERITS TYPEID { }
    (7) clase -> . CLASS TYPEID INHERITS TYPEID { optional_feature }
    CLASS           shift and go to state 3

    clase                          shift and go to state 4

state 2

    (1) programa -> clase . ;
    ;               shift and go to state 5


state 3

    (3) clase -> CLASS . TYPEID { error }
    (4) clase -> CLASS . TYPEID { }
    (5) clase -> CLASS . TYPEID { optional_feature }
    (6) clase -> CLASS . TYPEID INHERITS TYPEID { }
    (7) clase -> CLASS . TYPEID INHERITS TYPEID { optional_feature }
    TYPEID          shift and go to state 6


state 4

    (2) programa -> programa clase . ;
    ;               shift and go to state 7


state 5

    (1) programa -> clase ; .
    CLASS           reduce using rule 1 (programa -> clase ; .)
    $end            reduce using rule 1 (programa -> clase ; .)


state 6

    (3) clase -> CLASS TYPEID . { error }
    (4) clase -> CLASS TYPEID . { }
    (5) clase -> CLASS TYPEID . { optional_feature }
    (6) clase -> CLASS TYPEID . INHERITS TYPEID { }
    (7) clase -> CLASS TYPEID . INHERITS TYPEID { optional_feature }
    {               shift and go to state 8
    INHERITS        shift and go to state 9


state 7

    (2) programa -> programa clase ; .
    CLASS           reduce using rule 2 (programa -> programa clase ; .)
    $end            reduce using rule 2 (programa -> programa clase ; .)


state 8

    (3) clase -> CLASS TYPEID { . error }
    (4) clase -> CLASS TYPEID { . }
    (5) clase -> CLASS TYPEID { . optional_feature }
    (8) optional_feature -> . error ;
    (9) optional_feature -> . optional_feature feature ;
    (10) optional_feature -> . feature ;
    (11) feature -> . OBJECTID ( optional_formal ) : TYPEID { error }
    (12) feature -> . OBJECTID ( ) : TYPEID { error }
    (13) feature -> . OBJECTID ( ) : TYPEID { expr }
    (14) feature -> . OBJECTID ( formal ) : TYPEID { expr }
    (15) feature -> . OBJECTID ( formal optional_formal ) : TYPEID { expr }
    (16) feature -> . OBJECTID : TYPEID
    (17) feature -> . OBJECTID : TYPEID ASSIGN expr
    error           shift and go to state 10
    }               shift and go to state 11
    OBJECTID        shift and go to state 14

    optional_feature               shift and go to state 12
    feature                        shift and go to state 13

state 9

    (6) clase -> CLASS TYPEID INHERITS . TYPEID { }
    (7) clase -> CLASS TYPEID INHERITS . TYPEID { optional_feature }
    TYPEID          shift and go to state 15


state 10

    (3) clase -> CLASS TYPEID { error . }
    (8) optional_feature -> error . ;
    }               shift and go to state 16
    ;               shift and go to state 17


state 11

    (4) clase -> CLASS TYPEID { } .
    ;               reduce using rule 4 (clase -> CLASS TYPEID { } .)


state 12

    (5) clase -> CLASS TYPEID { optional_feature . }
    (9) optional_feature -> optional_feature . feature ;
    (11) feature -> . OBJECTID ( optional_formal ) : TYPEID { error }
    (12) feature -> . OBJECTID ( ) : TYPEID { error }
    (13) feature -> . OBJECTID ( ) : TYPEID { expr }
    (14) feature -> . OBJECTID ( formal ) : TYPEID { expr }
    (15) feature -> . OBJECTID ( formal optional_formal ) : TYPEID { expr }
    (16) feature -> . OBJECTID : TYPEID
    (17) feature -> . OBJECTID : TYPEID ASSIGN expr
    }               shift and go to state 18
    OBJECTID        shift and go to state 14

    feature                        shift and go to state 19

state 13

    (10) optional_feature -> feature . ;
    ;               shift and go to state 20


state 14

    (11) feature -> OBJECTID . ( optional_formal ) : TYPEID { error }
    (12) feature -> OBJECTID . ( ) : TYPEID { error }
    (13) feature -> OBJECTID . ( ) : TYPEID { expr }
    (14) feature -> OBJECTID . ( formal ) : TYPEID { expr }
    (15) feature -> OBJECTID . ( formal optional_formal ) : TYPEID { expr }
    (16) feature -> OBJECTID . : TYPEID
    (17) feature -> OBJECTID . : TYPEID ASSIGN expr
    (               shift and go to state 21
    :               shift and go to state 22


state 15

    (6) clase -> CLASS TYPEID INHERITS TYPEID . { }
    (7) clase -> CLASS TYPEID INHERITS TYPEID . { optional_feature }
    {               shift and go to state 23


state 16

    (3) clase -> CLASS TYPEID { error } .
    ;               reduce using rule 3 (clase -> CLASS TYPEID { error } .)


state 17

    (8) optional_feature -> error ; .
    }               reduce using rule 8 (optional_feature -> error ; .)
    OBJECTID        reduce using rule 8 (optional_feature -> error ; .)


state 18

    (5) clase -> CLASS TYPEID { optional_feature } .
    ;               reduce using rule 5 (clase -> CLASS TYPEID { optional_feature } .)


state 19

    (9) optional_feature -> optional_feature feature . ;
    ;               shift and go to state 24


state 20

    (10) optional_feature -> feature ; .
    }               reduce using rule 10 (optional_feature -> feature ; .)
    OBJECTID        reduce using rule 10 (optional_feature -> feature ; .)


state 21

    (11) feature -> OBJECTID ( . optional_formal ) : TYPEID { error }
    (12) feature -> OBJECTID ( . ) : TYPEID { error }
    (13) feature -> OBJECTID ( . ) : TYPEID { expr }
    (14) feature -> OBJECTID ( . formal ) : TYPEID { expr }
    (15) feature -> OBJECTID ( . formal optional_formal ) : TYPEID { expr }
    (18) optional_formal -> . error formal
    (19) optional_formal -> . , formal optional_formal
    (20) optional_formal -> . , formal
    (21) formal -> . OBJECTID : TYPEID
    )               shift and go to state 27
    error           shift and go to state 28
    ,               shift and go to state 30
    OBJECTID        shift and go to state 25

    optional_formal                shift and go to state 26
    formal                         shift and go to state 29

state 22

    (16) feature -> OBJECTID : . TYPEID
    (17) feature -> OBJECTID : . TYPEID ASSIGN expr
    TYPEID          shift and go to state 31


state 23

    (6) clase -> CLASS TYPEID INHERITS TYPEID { . }
    (7) clase -> CLASS TYPEID INHERITS TYPEID { . optional_feature }
    (8) optional_feature -> . error ;
    (9) optional_feature -> . optional_feature feature ;
    (10) optional_feature -> . feature ;
    (11) feature -> . OBJECTID ( optional_formal ) : TYPEID { error }
    (12) feature -> . OBJECTID ( ) : TYPEID { error }
    (13) feature -> . OBJECTID ( ) : TYPEID { expr }
    (14) feature -> . OBJECTID ( formal ) : TYPEID { expr }
    (15) feature -> . OBJECTID ( formal optional_formal ) : TYPEID { expr }
    (16) feature -> . OBJECTID : TYPEID
    (17) feature -> . OBJECTID : TYPEID ASSIGN expr
    }               shift and go to state 32
    error           shift and go to state 34
    OBJECTID        shift and go to state 14

    optional_feature               shift and go to state 33
    feature                        shift and go to state 13

state 24

    (9) optional_feature -> optional_feature feature ; .
    }               reduce using rule 9 (optional_feature -> optional_feature feature ; .)
    OBJECTID        reduce using rule 9 (optional_feature -> optional_feature feature ; .)


state 25

    (21) formal -> OBJECTID . : TYPEID
    :               shift and go to state 35


state 26

    (11) feature -> OBJECTID ( optional_formal . ) : TYPEID { error }
    )               shift and go to state 36


state 27

    (12) feature -> OBJECTID ( ) . : TYPEID { error }
    (13) feature -> OBJECTID ( ) . : TYPEID { expr }
    :               shift and go to state 37


state 28

    (18) optional_formal -> error . formal
    (21) formal -> . OBJECTID : TYPEID
    OBJECTID        shift and go to state 25

    formal                         shift and go to state 38

state 29

    (14) feature -> OBJECTID ( formal . ) : TYPEID { expr }
    (15) feature -> OBJECTID ( formal . optional_formal ) : TYPEID { expr }
    (18) optional_formal -> . error formal
    (19) optional_formal -> . , formal optional_formal
    (20) optional_formal -> . , formal
    )               shift and go to state 39
    error           shift and go to state 28
    ,               shift and go to state 30

    optional_formal                shift and go to state 40

state 30

    (19) optional_formal -> , . formal optional_formal
    (20) optional_formal -> , . formal
    (21) formal -> . OBJECTID : TYPEID
    OBJECTID        shift and go to state 25

    formal                         shift and go to state 41

state 31

    (16) feature -> OBJECTID : TYPEID .
    (17) feature -> OBJECTID : TYPEID . ASSIGN expr
    ;               reduce using rule 16 (feature -> OBJECTID : TYPEID .)
    ASSIGN          shift and go to state 42


state 32

    (6) clase -> CLASS TYPEID INHERITS TYPEID { } .
    ;               reduce using rule 6 (clase -> CLASS TYPEID INHERITS TYPEID { } .)


state 33

    (7) clase -> CLASS TYPEID INHERITS TYPEID { optional_feature . }
    (9) optional_feature -> optional_feature . feature ;
    (11) feature -> . OBJECTID ( optional_formal ) : TYPEID { error }
    (12) feature -> . OBJECTID ( ) : TYPEID { error }
    (13) feature -> . OBJECTID ( ) : TYPEID { expr }
    (14) feature -> . OBJECTID ( formal ) : TYPEID { expr }
    (15) feature -> . OBJECTID ( formal optional_formal ) : TYPEID { expr }
    (16) feature -> . OBJECTID : TYPEID
    (17) feature -> . OBJECTID : TYPEID ASSIGN expr
    }               shift and go to state 43
    OBJECTID        shift and go to state 14

    feature                        shift and go to state 19

state 34

    (8) optional_feature -> error . ;
    ;               shift and go to state 17


state 35

    (21) formal -> OBJECTID : . TYPEID
    TYPEID          shift and go to state 44


state 36

    (11) feature -> OBJECTID ( optional_formal ) . : TYPEID { error }
    :               shift and go to state 45


state 37

    (12) feature -> OBJECTID ( ) : . TYPEID { error }
    (13) feature -> OBJECTID ( ) : . TYPEID { expr }
    TYPEID          shift and go to state 46


state 38

    (18) optional_formal -> error formal .
    )               reduce using rule 18 (optional_formal -> error formal .)


state 39

    (14) feature -> OBJECTID ( formal ) . : TYPEID { expr }
    :               shift and go to state 47


state 40

    (15) feature -> OBJECTID ( formal optional_formal . ) : TYPEID { expr }
    )               shift and go to state 48


state 41

    (19) optional_formal -> , formal . optional_formal
    (20) optional_formal -> , formal .
    (18) optional_formal -> . error formal
    (19) optional_formal -> . , formal optional_formal
    (20) optional_formal -> . , formal
    )               reduce using rule 20 (optional_formal -> , formal .)
    error           shift and go to state 28
    ,               shift and go to state 30

    optional_formal                shift and go to state 49

state 42

    (17) feature -> OBJECTID : TYPEID ASSIGN . expr
    (22) expr -> . IF expr THEN expr ELSE expr error
    (23) expr -> . IF expr THEN error FI
    (24) expr -> . OBJECTID ASSIGN expr
    (25) expr -> . expr . OBJECTID ( expr optional_expressions )
    (26) expr -> . expr . OBJECTID ( expr )
    (27) expr -> . expr . OBJECTID ( )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (30) expr -> . expr @ TYPEID . OBJECTID ( )
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr optional_expressions )
    (33) expr -> . OBJECTID ( expr )
    (34) expr -> . IF expr THEN expr ELSE expr FI
    (35) expr -> . WHILE expr LOOP expr POOL
    (36) expr -> . { lista_expr }
    (37) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (39) expr -> . LET OBJECTID : TYPEID IN expr
    (40) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (41) expr -> . CASE expr OF lista_asig ESAC
    (42) expr -> . NEW TYPEID
    (43) expr -> . ISVOID expr
    (44) expr -> . expr + expr
    (45) expr -> . expr - expr
    (46) expr -> . expr * expr
    (47) expr -> . expr / expr
    (48) expr -> . ~ expr
    (49) expr -> . expr < expr
    (50) expr -> . expr LE expr
    (51) expr -> . expr = expr
    (52) expr -> . NOT expr
    (53) expr -> . ( expr )
    (54) expr -> . OBJECTID
    (55) expr -> . INT_CONST
    (56) expr -> . STR_CONST
    (57) expr -> . BOOL_CONST
    (58) expr -> . - expr
    IF              shift and go to state 52
    OBJECTID        shift and go to state 50
    WHILE           shift and go to state 54
    {               shift and go to state 55
    LET             shift and go to state 56
    CASE            shift and go to state 57
    NEW             shift and go to state 58
    ISVOID          shift and go to state 59
    ~               shift and go to state 61
    NOT             shift and go to state 62
    (               shift and go to state 53
    INT_CONST       shift and go to state 63
    STR_CONST       shift and go to state 64
    BOOL_CONST      shift and go to state 65
    -               shift and go to state 60

    expr                           shift and go to state 51

state 43

    (7) clase -> CLASS TYPEID INHERITS TYPEID { optional_feature } .
    ;               reduce using rule 7 (clase -> CLASS TYPEID INHERITS TYPEID { optional_feature } .)


state 44

    (21) formal -> OBJECTID : TYPEID .
    )               reduce using rule 21 (formal -> OBJECTID : TYPEID .)
    error           reduce using rule 21 (formal -> OBJECTID : TYPEID .)
    ,               reduce using rule 21 (formal -> OBJECTID : TYPEID .)


state 45

    (11) feature -> OBJECTID ( optional_formal ) : . TYPEID { error }
    TYPEID          shift and go to state 66


state 46

    (12) feature -> OBJECTID ( ) : TYPEID . { error }
    (13) feature -> OBJECTID ( ) : TYPEID . { expr }
    {               shift and go to state 67


state 47

    (14) feature -> OBJECTID ( formal ) : . TYPEID { expr }
    TYPEID          shift and go to state 68


state 48

    (15) feature -> OBJECTID ( formal optional_formal ) . : TYPEID { expr }
    :               shift and go to state 69


state 49

    (19) optional_formal -> , formal optional_formal .
    )               reduce using rule 19 (optional_formal -> , formal optional_formal .)


state 50

    (24) expr -> OBJECTID . ASSIGN expr
    (31) expr -> OBJECTID . ( )
    (32) expr -> OBJECTID . ( expr optional_expressions )
    (33) expr -> OBJECTID . ( expr )
    (54) expr -> OBJECTID .
    ASSIGN          shift and go to state 70
    (               shift and go to state 71
    .               reduce using rule 54 (expr -> OBJECTID .)
    @               reduce using rule 54 (expr -> OBJECTID .)
    +               reduce using rule 54 (expr -> OBJECTID .)
    -               reduce using rule 54 (expr -> OBJECTID .)
    *               reduce using rule 54 (expr -> OBJECTID .)
    /               reduce using rule 54 (expr -> OBJECTID .)
    <               reduce using rule 54 (expr -> OBJECTID .)
    LE              reduce using rule 54 (expr -> OBJECTID .)
    =               reduce using rule 54 (expr -> OBJECTID .)
    ;               reduce using rule 54 (expr -> OBJECTID .)
    THEN            reduce using rule 54 (expr -> OBJECTID .)
    )               reduce using rule 54 (expr -> OBJECTID .)
    LOOP            reduce using rule 54 (expr -> OBJECTID .)
    OF              reduce using rule 54 (expr -> OBJECTID .)
    }               reduce using rule 54 (expr -> OBJECTID .)
    ,               reduce using rule 54 (expr -> OBJECTID .)
    ELSE            reduce using rule 54 (expr -> OBJECTID .)
    POOL            reduce using rule 54 (expr -> OBJECTID .)
    error           reduce using rule 54 (expr -> OBJECTID .)
    FI              reduce using rule 54 (expr -> OBJECTID .)
    IN              reduce using rule 54 (expr -> OBJECTID .)


state 51

    (17) feature -> OBJECTID : TYPEID ASSIGN expr .
    (25) expr -> expr . . OBJECTID ( expr optional_expressions )
    (26) expr -> expr . . OBJECTID ( expr )
    (27) expr -> expr . . OBJECTID ( )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (30) expr -> expr . @ TYPEID . OBJECTID ( )
    (44) expr -> expr . + expr
    (45) expr -> expr . - expr
    (46) expr -> expr . * expr
    (47) expr -> expr . / expr
    (49) expr -> expr . < expr
    (50) expr -> expr . LE expr
    (51) expr -> expr . = expr
    ;               reduce using rule 17 (feature -> OBJECTID : TYPEID ASSIGN expr .)
    .               shift and go to state 72
    @               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    *               shift and go to state 76
    /               shift and go to state 77
    <               shift and go to state 78
    LE              shift and go to state 79
    =               shift and go to state 80


state 52

    (22) expr -> IF . expr THEN expr ELSE expr error
    (23) expr -> IF . expr THEN error FI
    (34) expr -> IF . expr THEN expr ELSE expr FI
    (22) expr -> . IF expr THEN expr ELSE expr error
    (23) expr -> . IF expr THEN error FI
    (24) expr -> . OBJECTID ASSIGN expr
    (25) expr -> . expr . OBJECTID ( expr optional_expressions )
    (26) expr -> . expr . OBJECTID ( expr )
    (27) expr -> . expr . OBJECTID ( )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (30) expr -> . expr @ TYPEID . OBJECTID ( )
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr optional_expressions )
    (33) expr -> . OBJECTID ( expr )
    (34) expr -> . IF expr THEN expr ELSE expr FI
    (35) expr -> . WHILE expr LOOP expr POOL
    (36) expr -> . { lista_expr }
    (37) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (39) expr -> . LET OBJECTID : TYPEID IN expr
    (40) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (41) expr -> . CASE expr OF lista_asig ESAC
    (42) expr -> . NEW TYPEID
    (43) expr -> . ISVOID expr
    (44) expr -> . expr + expr
    (45) expr -> . expr - expr
    (46) expr -> . expr * expr
    (47) expr -> . expr / expr
    (48) expr -> . ~ expr
    (49) expr -> . expr < expr
    (50) expr -> . expr LE expr
    (51) expr -> . expr = expr
    (52) expr -> . NOT expr
    (53) expr -> . ( expr )
    (54) expr -> . OBJECTID
    (55) expr -> . INT_CONST
    (56) expr -> . STR_CONST
    (57) expr -> . BOOL_CONST
    (58) expr -> . - expr
    IF              shift and go to state 52
    OBJECTID        shift and go to state 50
    WHILE           shift and go to state 54
    {               shift and go to state 55
    LET             shift and go to state 56
    CASE            shift and go to state 57
    NEW             shift and go to state 58
    ISVOID          shift and go to state 59
    ~               shift and go to state 61
    NOT             shift and go to state 62
    (               shift and go to state 53
    INT_CONST       shift and go to state 63
    STR_CONST       shift and go to state 64
    BOOL_CONST      shift and go to state 65
    -               shift and go to state 60

    expr                           shift and go to state 81

state 53

    (53) expr -> ( . expr )
    (22) expr -> . IF expr THEN expr ELSE expr error
    (23) expr -> . IF expr THEN error FI
    (24) expr -> . OBJECTID ASSIGN expr
    (25) expr -> . expr . OBJECTID ( expr optional_expressions )
    (26) expr -> . expr . OBJECTID ( expr )
    (27) expr -> . expr . OBJECTID ( )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (30) expr -> . expr @ TYPEID . OBJECTID ( )
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr optional_expressions )
    (33) expr -> . OBJECTID ( expr )
    (34) expr -> . IF expr THEN expr ELSE expr FI
    (35) expr -> . WHILE expr LOOP expr POOL
    (36) expr -> . { lista_expr }
    (37) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (39) expr -> . LET OBJECTID : TYPEID IN expr
    (40) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (41) expr -> . CASE expr OF lista_asig ESAC
    (42) expr -> . NEW TYPEID
    (43) expr -> . ISVOID expr
    (44) expr -> . expr + expr
    (45) expr -> . expr - expr
    (46) expr -> . expr * expr
    (47) expr -> . expr / expr
    (48) expr -> . ~ expr
    (49) expr -> . expr < expr
    (50) expr -> . expr LE expr
    (51) expr -> . expr = expr
    (52) expr -> . NOT expr
    (53) expr -> . ( expr )
    (54) expr -> . OBJECTID
    (55) expr -> . INT_CONST
    (56) expr -> . STR_CONST
    (57) expr -> . BOOL_CONST
    (58) expr -> . - expr
    IF              shift and go to state 52
    OBJECTID        shift and go to state 50
    WHILE           shift and go to state 54
    {               shift and go to state 55
    LET             shift and go to state 56
    CASE            shift and go to state 57
    NEW             shift and go to state 58
    ISVOID          shift and go to state 59
    ~               shift and go to state 61
    NOT             shift and go to state 62
    (               shift and go to state 53
    INT_CONST       shift and go to state 63
    STR_CONST       shift and go to state 64
    BOOL_CONST      shift and go to state 65
    -               shift and go to state 60

    expr                           shift and go to state 82

state 54

    (35) expr -> WHILE . expr LOOP expr POOL
    (22) expr -> . IF expr THEN expr ELSE expr error
    (23) expr -> . IF expr THEN error FI
    (24) expr -> . OBJECTID ASSIGN expr
    (25) expr -> . expr . OBJECTID ( expr optional_expressions )
    (26) expr -> . expr . OBJECTID ( expr )
    (27) expr -> . expr . OBJECTID ( )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (30) expr -> . expr @ TYPEID . OBJECTID ( )
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr optional_expressions )
    (33) expr -> . OBJECTID ( expr )
    (34) expr -> . IF expr THEN expr ELSE expr FI
    (35) expr -> . WHILE expr LOOP expr POOL
    (36) expr -> . { lista_expr }
    (37) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (39) expr -> . LET OBJECTID : TYPEID IN expr
    (40) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (41) expr -> . CASE expr OF lista_asig ESAC
    (42) expr -> . NEW TYPEID
    (43) expr -> . ISVOID expr
    (44) expr -> . expr + expr
    (45) expr -> . expr - expr
    (46) expr -> . expr * expr
    (47) expr -> . expr / expr
    (48) expr -> . ~ expr
    (49) expr -> . expr < expr
    (50) expr -> . expr LE expr
    (51) expr -> . expr = expr
    (52) expr -> . NOT expr
    (53) expr -> . ( expr )
    (54) expr -> . OBJECTID
    (55) expr -> . INT_CONST
    (56) expr -> . STR_CONST
    (57) expr -> . BOOL_CONST
    (58) expr -> . - expr
    IF              shift and go to state 52
    OBJECTID        shift and go to state 50
    WHILE           shift and go to state 54
    {               shift and go to state 55
    LET             shift and go to state 56
    CASE            shift and go to state 57
    NEW             shift and go to state 58
    ISVOID          shift and go to state 59
    ~               shift and go to state 61
    NOT             shift and go to state 62
    (               shift and go to state 53
    INT_CONST       shift and go to state 63
    STR_CONST       shift and go to state 64
    BOOL_CONST      shift and go to state 65
    -               shift and go to state 60

    expr                           shift and go to state 83

state 55

    (36) expr -> { . lista_expr }
    (65) lista_expr -> . error ;
    (66) lista_expr -> . lista_expr expr ;
    (67) lista_expr -> . expr ;
    (22) expr -> . IF expr THEN expr ELSE expr error
    (23) expr -> . IF expr THEN error FI
    (24) expr -> . OBJECTID ASSIGN expr
    (25) expr -> . expr . OBJECTID ( expr optional_expressions )
    (26) expr -> . expr . OBJECTID ( expr )
    (27) expr -> . expr . OBJECTID ( )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (30) expr -> . expr @ TYPEID . OBJECTID ( )
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr optional_expressions )
    (33) expr -> . OBJECTID ( expr )
    (34) expr -> . IF expr THEN expr ELSE expr FI
    (35) expr -> . WHILE expr LOOP expr POOL
    (36) expr -> . { lista_expr }
    (37) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (39) expr -> . LET OBJECTID : TYPEID IN expr
    (40) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (41) expr -> . CASE expr OF lista_asig ESAC
    (42) expr -> . NEW TYPEID
    (43) expr -> . ISVOID expr
    (44) expr -> . expr + expr
    (45) expr -> . expr - expr
    (46) expr -> . expr * expr
    (47) expr -> . expr / expr
    (48) expr -> . ~ expr
    (49) expr -> . expr < expr
    (50) expr -> . expr LE expr
    (51) expr -> . expr = expr
    (52) expr -> . NOT expr
    (53) expr -> . ( expr )
    (54) expr -> . OBJECTID
    (55) expr -> . INT_CONST
    (56) expr -> . STR_CONST
    (57) expr -> . BOOL_CONST
    (58) expr -> . - expr
    error           shift and go to state 85
    IF              shift and go to state 52
    OBJECTID        shift and go to state 50
    WHILE           shift and go to state 54
    {               shift and go to state 55
    LET             shift and go to state 56
    CASE            shift and go to state 57
    NEW             shift and go to state 58
    ISVOID          shift and go to state 59
    ~               shift and go to state 61
    NOT             shift and go to state 62
    (               shift and go to state 53
    INT_CONST       shift and go to state 63
    STR_CONST       shift and go to state 64
    BOOL_CONST      shift and go to state 65
    -               shift and go to state 60

    lista_expr                     shift and go to state 84
    expr                           shift and go to state 86

state 56

    (37) expr -> LET . OBJECTID : TYPEID optional_assigns IN expr
    (38) expr -> LET . OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (39) expr -> LET . OBJECTID : TYPEID IN expr
    (40) expr -> LET . OBJECTID : TYPEID ASSIGN expr IN expr
    OBJECTID        shift and go to state 87


state 57

    (41) expr -> CASE . expr OF lista_asig ESAC
    (22) expr -> . IF expr THEN expr ELSE expr error
    (23) expr -> . IF expr THEN error FI
    (24) expr -> . OBJECTID ASSIGN expr
    (25) expr -> . expr . OBJECTID ( expr optional_expressions )
    (26) expr -> . expr . OBJECTID ( expr )
    (27) expr -> . expr . OBJECTID ( )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (30) expr -> . expr @ TYPEID . OBJECTID ( )
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr optional_expressions )
    (33) expr -> . OBJECTID ( expr )
    (34) expr -> . IF expr THEN expr ELSE expr FI
    (35) expr -> . WHILE expr LOOP expr POOL
    (36) expr -> . { lista_expr }
    (37) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (39) expr -> . LET OBJECTID : TYPEID IN expr
    (40) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (41) expr -> . CASE expr OF lista_asig ESAC
    (42) expr -> . NEW TYPEID
    (43) expr -> . ISVOID expr
    (44) expr -> . expr + expr
    (45) expr -> . expr - expr
    (46) expr -> . expr * expr
    (47) expr -> . expr / expr
    (48) expr -> . ~ expr
    (49) expr -> . expr < expr
    (50) expr -> . expr LE expr
    (51) expr -> . expr = expr
    (52) expr -> . NOT expr
    (53) expr -> . ( expr )
    (54) expr -> . OBJECTID
    (55) expr -> . INT_CONST
    (56) expr -> . STR_CONST
    (57) expr -> . BOOL_CONST
    (58) expr -> . - expr
    IF              shift and go to state 52
    OBJECTID        shift and go to state 50
    WHILE           shift and go to state 54
    {               shift and go to state 55
    LET             shift and go to state 56
    CASE            shift and go to state 57
    NEW             shift and go to state 58
    ISVOID          shift and go to state 59
    ~               shift and go to state 61
    NOT             shift and go to state 62
    (               shift and go to state 53
    INT_CONST       shift and go to state 63
    STR_CONST       shift and go to state 64
    BOOL_CONST      shift and go to state 65
    -               shift and go to state 60

    expr                           shift and go to state 88

state 58

    (42) expr -> NEW . TYPEID
    TYPEID          shift and go to state 89


state 59

    (43) expr -> ISVOID . expr
    (22) expr -> . IF expr THEN expr ELSE expr error
    (23) expr -> . IF expr THEN error FI
    (24) expr -> . OBJECTID ASSIGN expr
    (25) expr -> . expr . OBJECTID ( expr optional_expressions )
    (26) expr -> . expr . OBJECTID ( expr )
    (27) expr -> . expr . OBJECTID ( )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (30) expr -> . expr @ TYPEID . OBJECTID ( )
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr optional_expressions )
    (33) expr -> . OBJECTID ( expr )
    (34) expr -> . IF expr THEN expr ELSE expr FI
    (35) expr -> . WHILE expr LOOP expr POOL
    (36) expr -> . { lista_expr }
    (37) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (39) expr -> . LET OBJECTID : TYPEID IN expr
    (40) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (41) expr -> . CASE expr OF lista_asig ESAC
    (42) expr -> . NEW TYPEID
    (43) expr -> . ISVOID expr
    (44) expr -> . expr + expr
    (45) expr -> . expr - expr
    (46) expr -> . expr * expr
    (47) expr -> . expr / expr
    (48) expr -> . ~ expr
    (49) expr -> . expr < expr
    (50) expr -> . expr LE expr
    (51) expr -> . expr = expr
    (52) expr -> . NOT expr
    (53) expr -> . ( expr )
    (54) expr -> . OBJECTID
    (55) expr -> . INT_CONST
    (56) expr -> . STR_CONST
    (57) expr -> . BOOL_CONST
    (58) expr -> . - expr
    IF              shift and go to state 52
    OBJECTID        shift and go to state 50
    WHILE           shift and go to state 54
    {               shift and go to state 55
    LET             shift and go to state 56
    CASE            shift and go to state 57
    NEW             shift and go to state 58
    ISVOID          shift and go to state 59
    ~               shift and go to state 61
    NOT             shift and go to state 62
    (               shift and go to state 53
    INT_CONST       shift and go to state 63
    STR_CONST       shift and go to state 64
    BOOL_CONST      shift and go to state 65
    -               shift and go to state 60

    expr                           shift and go to state 90

state 60

    (58) expr -> - . expr
    (22) expr -> . IF expr THEN expr ELSE expr error
    (23) expr -> . IF expr THEN error FI
    (24) expr -> . OBJECTID ASSIGN expr
    (25) expr -> . expr . OBJECTID ( expr optional_expressions )
    (26) expr -> . expr . OBJECTID ( expr )
    (27) expr -> . expr . OBJECTID ( )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (30) expr -> . expr @ TYPEID . OBJECTID ( )
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr optional_expressions )
    (33) expr -> . OBJECTID ( expr )
    (34) expr -> . IF expr THEN expr ELSE expr FI
    (35) expr -> . WHILE expr LOOP expr POOL
    (36) expr -> . { lista_expr }
    (37) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (39) expr -> . LET OBJECTID : TYPEID IN expr
    (40) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (41) expr -> . CASE expr OF lista_asig ESAC
    (42) expr -> . NEW TYPEID
    (43) expr -> . ISVOID expr
    (44) expr -> . expr + expr
    (45) expr -> . expr - expr
    (46) expr -> . expr * expr
    (47) expr -> . expr / expr
    (48) expr -> . ~ expr
    (49) expr -> . expr < expr
    (50) expr -> . expr LE expr
    (51) expr -> . expr = expr
    (52) expr -> . NOT expr
    (53) expr -> . ( expr )
    (54) expr -> . OBJECTID
    (55) expr -> . INT_CONST
    (56) expr -> . STR_CONST
    (57) expr -> . BOOL_CONST
    (58) expr -> . - expr
    IF              shift and go to state 52
    OBJECTID        shift and go to state 50
    WHILE           shift and go to state 54
    {               shift and go to state 55
    LET             shift and go to state 56
    CASE            shift and go to state 57
    NEW             shift and go to state 58
    ISVOID          shift and go to state 59
    ~               shift and go to state 61
    NOT             shift and go to state 62
    (               shift and go to state 53
    INT_CONST       shift and go to state 63
    STR_CONST       shift and go to state 64
    BOOL_CONST      shift and go to state 65
    -               shift and go to state 60

    expr                           shift and go to state 91

state 61

    (48) expr -> ~ . expr
    (22) expr -> . IF expr THEN expr ELSE expr error
    (23) expr -> . IF expr THEN error FI
    (24) expr -> . OBJECTID ASSIGN expr
    (25) expr -> . expr . OBJECTID ( expr optional_expressions )
    (26) expr -> . expr . OBJECTID ( expr )
    (27) expr -> . expr . OBJECTID ( )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (30) expr -> . expr @ TYPEID . OBJECTID ( )
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr optional_expressions )
    (33) expr -> . OBJECTID ( expr )
    (34) expr -> . IF expr THEN expr ELSE expr FI
    (35) expr -> . WHILE expr LOOP expr POOL
    (36) expr -> . { lista_expr }
    (37) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (39) expr -> . LET OBJECTID : TYPEID IN expr
    (40) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (41) expr -> . CASE expr OF lista_asig ESAC
    (42) expr -> . NEW TYPEID
    (43) expr -> . ISVOID expr
    (44) expr -> . expr + expr
    (45) expr -> . expr - expr
    (46) expr -> . expr * expr
    (47) expr -> . expr / expr
    (48) expr -> . ~ expr
    (49) expr -> . expr < expr
    (50) expr -> . expr LE expr
    (51) expr -> . expr = expr
    (52) expr -> . NOT expr
    (53) expr -> . ( expr )
    (54) expr -> . OBJECTID
    (55) expr -> . INT_CONST
    (56) expr -> . STR_CONST
    (57) expr -> . BOOL_CONST
    (58) expr -> . - expr
    IF              shift and go to state 52
    OBJECTID        shift and go to state 50
    WHILE           shift and go to state 54
    {               shift and go to state 55
    LET             shift and go to state 56
    CASE            shift and go to state 57
    NEW             shift and go to state 58
    ISVOID          shift and go to state 59
    ~               shift and go to state 61
    NOT             shift and go to state 62
    (               shift and go to state 53
    INT_CONST       shift and go to state 63
    STR_CONST       shift and go to state 64
    BOOL_CONST      shift and go to state 65
    -               shift and go to state 60

    expr                           shift and go to state 92

state 62

    (52) expr -> NOT . expr
    (22) expr -> . IF expr THEN expr ELSE expr error
    (23) expr -> . IF expr THEN error FI
    (24) expr -> . OBJECTID ASSIGN expr
    (25) expr -> . expr . OBJECTID ( expr optional_expressions )
    (26) expr -> . expr . OBJECTID ( expr )
    (27) expr -> . expr . OBJECTID ( )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (30) expr -> . expr @ TYPEID . OBJECTID ( )
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr optional_expressions )
    (33) expr -> . OBJECTID ( expr )
    (34) expr -> . IF expr THEN expr ELSE expr FI
    (35) expr -> . WHILE expr LOOP expr POOL
    (36) expr -> . { lista_expr }
    (37) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (39) expr -> . LET OBJECTID : TYPEID IN expr
    (40) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (41) expr -> . CASE expr OF lista_asig ESAC
    (42) expr -> . NEW TYPEID
    (43) expr -> . ISVOID expr
    (44) expr -> . expr + expr
    (45) expr -> . expr - expr
    (46) expr -> . expr * expr
    (47) expr -> . expr / expr
    (48) expr -> . ~ expr
    (49) expr -> . expr < expr
    (50) expr -> . expr LE expr
    (51) expr -> . expr = expr
    (52) expr -> . NOT expr
    (53) expr -> . ( expr )
    (54) expr -> . OBJECTID
    (55) expr -> . INT_CONST
    (56) expr -> . STR_CONST
    (57) expr -> . BOOL_CONST
    (58) expr -> . - expr
    IF              shift and go to state 52
    OBJECTID        shift and go to state 50
    WHILE           shift and go to state 54
    {               shift and go to state 55
    LET             shift and go to state 56
    CASE            shift and go to state 57
    NEW             shift and go to state 58
    ISVOID          shift and go to state 59
    ~               shift and go to state 61
    NOT             shift and go to state 62
    (               shift and go to state 53
    INT_CONST       shift and go to state 63
    STR_CONST       shift and go to state 64
    BOOL_CONST      shift and go to state 65
    -               shift and go to state 60

    expr                           shift and go to state 93

state 63

    (55) expr -> INT_CONST .
    .               reduce using rule 55 (expr -> INT_CONST .)
    @               reduce using rule 55 (expr -> INT_CONST .)
    +               reduce using rule 55 (expr -> INT_CONST .)
    -               reduce using rule 55 (expr -> INT_CONST .)
    *               reduce using rule 55 (expr -> INT_CONST .)
    /               reduce using rule 55 (expr -> INT_CONST .)
    <               reduce using rule 55 (expr -> INT_CONST .)
    LE              reduce using rule 55 (expr -> INT_CONST .)
    =               reduce using rule 55 (expr -> INT_CONST .)
    ;               reduce using rule 55 (expr -> INT_CONST .)
    THEN            reduce using rule 55 (expr -> INT_CONST .)
    )               reduce using rule 55 (expr -> INT_CONST .)
    LOOP            reduce using rule 55 (expr -> INT_CONST .)
    OF              reduce using rule 55 (expr -> INT_CONST .)
    }               reduce using rule 55 (expr -> INT_CONST .)
    ,               reduce using rule 55 (expr -> INT_CONST .)
    ELSE            reduce using rule 55 (expr -> INT_CONST .)
    POOL            reduce using rule 55 (expr -> INT_CONST .)
    error           reduce using rule 55 (expr -> INT_CONST .)
    FI              reduce using rule 55 (expr -> INT_CONST .)
    IN              reduce using rule 55 (expr -> INT_CONST .)


state 64

    (56) expr -> STR_CONST .
    .               reduce using rule 56 (expr -> STR_CONST .)
    @               reduce using rule 56 (expr -> STR_CONST .)
    +               reduce using rule 56 (expr -> STR_CONST .)
    -               reduce using rule 56 (expr -> STR_CONST .)
    *               reduce using rule 56 (expr -> STR_CONST .)
    /               reduce using rule 56 (expr -> STR_CONST .)
    <               reduce using rule 56 (expr -> STR_CONST .)
    LE              reduce using rule 56 (expr -> STR_CONST .)
    =               reduce using rule 56 (expr -> STR_CONST .)
    ;               reduce using rule 56 (expr -> STR_CONST .)
    THEN            reduce using rule 56 (expr -> STR_CONST .)
    )               reduce using rule 56 (expr -> STR_CONST .)
    LOOP            reduce using rule 56 (expr -> STR_CONST .)
    OF              reduce using rule 56 (expr -> STR_CONST .)
    }               reduce using rule 56 (expr -> STR_CONST .)
    ,               reduce using rule 56 (expr -> STR_CONST .)
    ELSE            reduce using rule 56 (expr -> STR_CONST .)
    POOL            reduce using rule 56 (expr -> STR_CONST .)
    error           reduce using rule 56 (expr -> STR_CONST .)
    FI              reduce using rule 56 (expr -> STR_CONST .)
    IN              reduce using rule 56 (expr -> STR_CONST .)


state 65

    (57) expr -> BOOL_CONST .
    .               reduce using rule 57 (expr -> BOOL_CONST .)
    @               reduce using rule 57 (expr -> BOOL_CONST .)
    +               reduce using rule 57 (expr -> BOOL_CONST .)
    -               reduce using rule 57 (expr -> BOOL_CONST .)
    *               reduce using rule 57 (expr -> BOOL_CONST .)
    /               reduce using rule 57 (expr -> BOOL_CONST .)
    <               reduce using rule 57 (expr -> BOOL_CONST .)
    LE              reduce using rule 57 (expr -> BOOL_CONST .)
    =               reduce using rule 57 (expr -> BOOL_CONST .)
    ;               reduce using rule 57 (expr -> BOOL_CONST .)
    THEN            reduce using rule 57 (expr -> BOOL_CONST .)
    )               reduce using rule 57 (expr -> BOOL_CONST .)
    LOOP            reduce using rule 57 (expr -> BOOL_CONST .)
    OF              reduce using rule 57 (expr -> BOOL_CONST .)
    }               reduce using rule 57 (expr -> BOOL_CONST .)
    ,               reduce using rule 57 (expr -> BOOL_CONST .)
    ELSE            reduce using rule 57 (expr -> BOOL_CONST .)
    POOL            reduce using rule 57 (expr -> BOOL_CONST .)
    error           reduce using rule 57 (expr -> BOOL_CONST .)
    FI              reduce using rule 57 (expr -> BOOL_CONST .)
    IN              reduce using rule 57 (expr -> BOOL_CONST .)


state 66

    (11) feature -> OBJECTID ( optional_formal ) : TYPEID . { error }
    {               shift and go to state 94


state 67

    (12) feature -> OBJECTID ( ) : TYPEID { . error }
    (13) feature -> OBJECTID ( ) : TYPEID { . expr }
    (22) expr -> . IF expr THEN expr ELSE expr error
    (23) expr -> . IF expr THEN error FI
    (24) expr -> . OBJECTID ASSIGN expr
    (25) expr -> . expr . OBJECTID ( expr optional_expressions )
    (26) expr -> . expr . OBJECTID ( expr )
    (27) expr -> . expr . OBJECTID ( )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (30) expr -> . expr @ TYPEID . OBJECTID ( )
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr optional_expressions )
    (33) expr -> . OBJECTID ( expr )
    (34) expr -> . IF expr THEN expr ELSE expr FI
    (35) expr -> . WHILE expr LOOP expr POOL
    (36) expr -> . { lista_expr }
    (37) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (39) expr -> . LET OBJECTID : TYPEID IN expr
    (40) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (41) expr -> . CASE expr OF lista_asig ESAC
    (42) expr -> . NEW TYPEID
    (43) expr -> . ISVOID expr
    (44) expr -> . expr + expr
    (45) expr -> . expr - expr
    (46) expr -> . expr * expr
    (47) expr -> . expr / expr
    (48) expr -> . ~ expr
    (49) expr -> . expr < expr
    (50) expr -> . expr LE expr
    (51) expr -> . expr = expr
    (52) expr -> . NOT expr
    (53) expr -> . ( expr )
    (54) expr -> . OBJECTID
    (55) expr -> . INT_CONST
    (56) expr -> . STR_CONST
    (57) expr -> . BOOL_CONST
    (58) expr -> . - expr
    error           shift and go to state 95
    IF              shift and go to state 52
    OBJECTID        shift and go to state 50
    WHILE           shift and go to state 54
    {               shift and go to state 55
    LET             shift and go to state 56
    CASE            shift and go to state 57
    NEW             shift and go to state 58
    ISVOID          shift and go to state 59
    ~               shift and go to state 61
    NOT             shift and go to state 62
    (               shift and go to state 53
    INT_CONST       shift and go to state 63
    STR_CONST       shift and go to state 64
    BOOL_CONST      shift and go to state 65
    -               shift and go to state 60

    expr                           shift and go to state 96

state 68

    (14) feature -> OBJECTID ( formal ) : TYPEID . { expr }
    {               shift and go to state 97


state 69

    (15) feature -> OBJECTID ( formal optional_formal ) : . TYPEID { expr }
    TYPEID          shift and go to state 98


state 70

    (24) expr -> OBJECTID ASSIGN . expr
    (22) expr -> . IF expr THEN expr ELSE expr error
    (23) expr -> . IF expr THEN error FI
    (24) expr -> . OBJECTID ASSIGN expr
    (25) expr -> . expr . OBJECTID ( expr optional_expressions )
    (26) expr -> . expr . OBJECTID ( expr )
    (27) expr -> . expr . OBJECTID ( )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (30) expr -> . expr @ TYPEID . OBJECTID ( )
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr optional_expressions )
    (33) expr -> . OBJECTID ( expr )
    (34) expr -> . IF expr THEN expr ELSE expr FI
    (35) expr -> . WHILE expr LOOP expr POOL
    (36) expr -> . { lista_expr }
    (37) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (39) expr -> . LET OBJECTID : TYPEID IN expr
    (40) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (41) expr -> . CASE expr OF lista_asig ESAC
    (42) expr -> . NEW TYPEID
    (43) expr -> . ISVOID expr
    (44) expr -> . expr + expr
    (45) expr -> . expr - expr
    (46) expr -> . expr * expr
    (47) expr -> . expr / expr
    (48) expr -> . ~ expr
    (49) expr -> . expr < expr
    (50) expr -> . expr LE expr
    (51) expr -> . expr = expr
    (52) expr -> . NOT expr
    (53) expr -> . ( expr )
    (54) expr -> . OBJECTID
    (55) expr -> . INT_CONST
    (56) expr -> . STR_CONST
    (57) expr -> . BOOL_CONST
    (58) expr -> . - expr
    IF              shift and go to state 52
    OBJECTID        shift and go to state 50
    WHILE           shift and go to state 54
    {               shift and go to state 55
    LET             shift and go to state 56
    CASE            shift and go to state 57
    NEW             shift and go to state 58
    ISVOID          shift and go to state 59
    ~               shift and go to state 61
    NOT             shift and go to state 62
    (               shift and go to state 53
    INT_CONST       shift and go to state 63
    STR_CONST       shift and go to state 64
    BOOL_CONST      shift and go to state 65
    -               shift and go to state 60

    expr                           shift and go to state 99

state 71

    (31) expr -> OBJECTID ( . )
    (32) expr -> OBJECTID ( . expr optional_expressions )
    (33) expr -> OBJECTID ( . expr )
    (22) expr -> . IF expr THEN expr ELSE expr error
    (23) expr -> . IF expr THEN error FI
    (24) expr -> . OBJECTID ASSIGN expr
    (25) expr -> . expr . OBJECTID ( expr optional_expressions )
    (26) expr -> . expr . OBJECTID ( expr )
    (27) expr -> . expr . OBJECTID ( )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (30) expr -> . expr @ TYPEID . OBJECTID ( )
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr optional_expressions )
    (33) expr -> . OBJECTID ( expr )
    (34) expr -> . IF expr THEN expr ELSE expr FI
    (35) expr -> . WHILE expr LOOP expr POOL
    (36) expr -> . { lista_expr }
    (37) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (39) expr -> . LET OBJECTID : TYPEID IN expr
    (40) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (41) expr -> . CASE expr OF lista_asig ESAC
    (42) expr -> . NEW TYPEID
    (43) expr -> . ISVOID expr
    (44) expr -> . expr + expr
    (45) expr -> . expr - expr
    (46) expr -> . expr * expr
    (47) expr -> . expr / expr
    (48) expr -> . ~ expr
    (49) expr -> . expr < expr
    (50) expr -> . expr LE expr
    (51) expr -> . expr = expr
    (52) expr -> . NOT expr
    (53) expr -> . ( expr )
    (54) expr -> . OBJECTID
    (55) expr -> . INT_CONST
    (56) expr -> . STR_CONST
    (57) expr -> . BOOL_CONST
    (58) expr -> . - expr
    )               shift and go to state 100
    IF              shift and go to state 52
    OBJECTID        shift and go to state 50
    WHILE           shift and go to state 54
    {               shift and go to state 55
    LET             shift and go to state 56
    CASE            shift and go to state 57
    NEW             shift and go to state 58
    ISVOID          shift and go to state 59
    ~               shift and go to state 61
    NOT             shift and go to state 62
    (               shift and go to state 53
    INT_CONST       shift and go to state 63
    STR_CONST       shift and go to state 64
    BOOL_CONST      shift and go to state 65
    -               shift and go to state 60

    expr                           shift and go to state 101

state 72

    (25) expr -> expr . . OBJECTID ( expr optional_expressions )
    (26) expr -> expr . . OBJECTID ( expr )
    (27) expr -> expr . . OBJECTID ( )
    OBJECTID        shift and go to state 102


state 73

    (28) expr -> expr @ . TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> expr @ . TYPEID . OBJECTID ( expr )
    (30) expr -> expr @ . TYPEID . OBJECTID ( )
    TYPEID          shift and go to state 103


state 74

    (44) expr -> expr + . expr
    (22) expr -> . IF expr THEN expr ELSE expr error
    (23) expr -> . IF expr THEN error FI
    (24) expr -> . OBJECTID ASSIGN expr
    (25) expr -> . expr . OBJECTID ( expr optional_expressions )
    (26) expr -> . expr . OBJECTID ( expr )
    (27) expr -> . expr . OBJECTID ( )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (30) expr -> . expr @ TYPEID . OBJECTID ( )
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr optional_expressions )
    (33) expr -> . OBJECTID ( expr )
    (34) expr -> . IF expr THEN expr ELSE expr FI
    (35) expr -> . WHILE expr LOOP expr POOL
    (36) expr -> . { lista_expr }
    (37) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (39) expr -> . LET OBJECTID : TYPEID IN expr
    (40) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (41) expr -> . CASE expr OF lista_asig ESAC
    (42) expr -> . NEW TYPEID
    (43) expr -> . ISVOID expr
    (44) expr -> . expr + expr
    (45) expr -> . expr - expr
    (46) expr -> . expr * expr
    (47) expr -> . expr / expr
    (48) expr -> . ~ expr
    (49) expr -> . expr < expr
    (50) expr -> . expr LE expr
    (51) expr -> . expr = expr
    (52) expr -> . NOT expr
    (53) expr -> . ( expr )
    (54) expr -> . OBJECTID
    (55) expr -> . INT_CONST
    (56) expr -> . STR_CONST
    (57) expr -> . BOOL_CONST
    (58) expr -> . - expr
    IF              shift and go to state 52
    OBJECTID        shift and go to state 50
    WHILE           shift and go to state 54
    {               shift and go to state 55
    LET             shift and go to state 56
    CASE            shift and go to state 57
    NEW             shift and go to state 58
    ISVOID          shift and go to state 59
    ~               shift and go to state 61
    NOT             shift and go to state 62
    (               shift and go to state 53
    INT_CONST       shift and go to state 63
    STR_CONST       shift and go to state 64
    BOOL_CONST      shift and go to state 65
    -               shift and go to state 60

    expr                           shift and go to state 104

state 75

    (45) expr -> expr - . expr
    (22) expr -> . IF expr THEN expr ELSE expr error
    (23) expr -> . IF expr THEN error FI
    (24) expr -> . OBJECTID ASSIGN expr
    (25) expr -> . expr . OBJECTID ( expr optional_expressions )
    (26) expr -> . expr . OBJECTID ( expr )
    (27) expr -> . expr . OBJECTID ( )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (30) expr -> . expr @ TYPEID . OBJECTID ( )
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr optional_expressions )
    (33) expr -> . OBJECTID ( expr )
    (34) expr -> . IF expr THEN expr ELSE expr FI
    (35) expr -> . WHILE expr LOOP expr POOL
    (36) expr -> . { lista_expr }
    (37) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (39) expr -> . LET OBJECTID : TYPEID IN expr
    (40) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (41) expr -> . CASE expr OF lista_asig ESAC
    (42) expr -> . NEW TYPEID
    (43) expr -> . ISVOID expr
    (44) expr -> . expr + expr
    (45) expr -> . expr - expr
    (46) expr -> . expr * expr
    (47) expr -> . expr / expr
    (48) expr -> . ~ expr
    (49) expr -> . expr < expr
    (50) expr -> . expr LE expr
    (51) expr -> . expr = expr
    (52) expr -> . NOT expr
    (53) expr -> . ( expr )
    (54) expr -> . OBJECTID
    (55) expr -> . INT_CONST
    (56) expr -> . STR_CONST
    (57) expr -> . BOOL_CONST
    (58) expr -> . - expr
    IF              shift and go to state 52
    OBJECTID        shift and go to state 50
    WHILE           shift and go to state 54
    {               shift and go to state 55
    LET             shift and go to state 56
    CASE            shift and go to state 57
    NEW             shift and go to state 58
    ISVOID          shift and go to state 59
    ~               shift and go to state 61
    NOT             shift and go to state 62
    (               shift and go to state 53
    INT_CONST       shift and go to state 63
    STR_CONST       shift and go to state 64
    BOOL_CONST      shift and go to state 65
    -               shift and go to state 60

    expr                           shift and go to state 105

state 76

    (46) expr -> expr * . expr
    (22) expr -> . IF expr THEN expr ELSE expr error
    (23) expr -> . IF expr THEN error FI
    (24) expr -> . OBJECTID ASSIGN expr
    (25) expr -> . expr . OBJECTID ( expr optional_expressions )
    (26) expr -> . expr . OBJECTID ( expr )
    (27) expr -> . expr . OBJECTID ( )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (30) expr -> . expr @ TYPEID . OBJECTID ( )
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr optional_expressions )
    (33) expr -> . OBJECTID ( expr )
    (34) expr -> . IF expr THEN expr ELSE expr FI
    (35) expr -> . WHILE expr LOOP expr POOL
    (36) expr -> . { lista_expr }
    (37) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (39) expr -> . LET OBJECTID : TYPEID IN expr
    (40) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (41) expr -> . CASE expr OF lista_asig ESAC
    (42) expr -> . NEW TYPEID
    (43) expr -> . ISVOID expr
    (44) expr -> . expr + expr
    (45) expr -> . expr - expr
    (46) expr -> . expr * expr
    (47) expr -> . expr / expr
    (48) expr -> . ~ expr
    (49) expr -> . expr < expr
    (50) expr -> . expr LE expr
    (51) expr -> . expr = expr
    (52) expr -> . NOT expr
    (53) expr -> . ( expr )
    (54) expr -> . OBJECTID
    (55) expr -> . INT_CONST
    (56) expr -> . STR_CONST
    (57) expr -> . BOOL_CONST
    (58) expr -> . - expr
    IF              shift and go to state 52
    OBJECTID        shift and go to state 50
    WHILE           shift and go to state 54
    {               shift and go to state 55
    LET             shift and go to state 56
    CASE            shift and go to state 57
    NEW             shift and go to state 58
    ISVOID          shift and go to state 59
    ~               shift and go to state 61
    NOT             shift and go to state 62
    (               shift and go to state 53
    INT_CONST       shift and go to state 63
    STR_CONST       shift and go to state 64
    BOOL_CONST      shift and go to state 65
    -               shift and go to state 60

    expr                           shift and go to state 106

state 77

    (47) expr -> expr / . expr
    (22) expr -> . IF expr THEN expr ELSE expr error
    (23) expr -> . IF expr THEN error FI
    (24) expr -> . OBJECTID ASSIGN expr
    (25) expr -> . expr . OBJECTID ( expr optional_expressions )
    (26) expr -> . expr . OBJECTID ( expr )
    (27) expr -> . expr . OBJECTID ( )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (30) expr -> . expr @ TYPEID . OBJECTID ( )
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr optional_expressions )
    (33) expr -> . OBJECTID ( expr )
    (34) expr -> . IF expr THEN expr ELSE expr FI
    (35) expr -> . WHILE expr LOOP expr POOL
    (36) expr -> . { lista_expr }
    (37) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (39) expr -> . LET OBJECTID : TYPEID IN expr
    (40) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (41) expr -> . CASE expr OF lista_asig ESAC
    (42) expr -> . NEW TYPEID
    (43) expr -> . ISVOID expr
    (44) expr -> . expr + expr
    (45) expr -> . expr - expr
    (46) expr -> . expr * expr
    (47) expr -> . expr / expr
    (48) expr -> . ~ expr
    (49) expr -> . expr < expr
    (50) expr -> . expr LE expr
    (51) expr -> . expr = expr
    (52) expr -> . NOT expr
    (53) expr -> . ( expr )
    (54) expr -> . OBJECTID
    (55) expr -> . INT_CONST
    (56) expr -> . STR_CONST
    (57) expr -> . BOOL_CONST
    (58) expr -> . - expr
    IF              shift and go to state 52
    OBJECTID        shift and go to state 50
    WHILE           shift and go to state 54
    {               shift and go to state 55
    LET             shift and go to state 56
    CASE            shift and go to state 57
    NEW             shift and go to state 58
    ISVOID          shift and go to state 59
    ~               shift and go to state 61
    NOT             shift and go to state 62
    (               shift and go to state 53
    INT_CONST       shift and go to state 63
    STR_CONST       shift and go to state 64
    BOOL_CONST      shift and go to state 65
    -               shift and go to state 60

    expr                           shift and go to state 107

state 78

    (49) expr -> expr < . expr
    (22) expr -> . IF expr THEN expr ELSE expr error
    (23) expr -> . IF expr THEN error FI
    (24) expr -> . OBJECTID ASSIGN expr
    (25) expr -> . expr . OBJECTID ( expr optional_expressions )
    (26) expr -> . expr . OBJECTID ( expr )
    (27) expr -> . expr . OBJECTID ( )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (30) expr -> . expr @ TYPEID . OBJECTID ( )
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr optional_expressions )
    (33) expr -> . OBJECTID ( expr )
    (34) expr -> . IF expr THEN expr ELSE expr FI
    (35) expr -> . WHILE expr LOOP expr POOL
    (36) expr -> . { lista_expr }
    (37) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (39) expr -> . LET OBJECTID : TYPEID IN expr
    (40) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (41) expr -> . CASE expr OF lista_asig ESAC
    (42) expr -> . NEW TYPEID
    (43) expr -> . ISVOID expr
    (44) expr -> . expr + expr
    (45) expr -> . expr - expr
    (46) expr -> . expr * expr
    (47) expr -> . expr / expr
    (48) expr -> . ~ expr
    (49) expr -> . expr < expr
    (50) expr -> . expr LE expr
    (51) expr -> . expr = expr
    (52) expr -> . NOT expr
    (53) expr -> . ( expr )
    (54) expr -> . OBJECTID
    (55) expr -> . INT_CONST
    (56) expr -> . STR_CONST
    (57) expr -> . BOOL_CONST
    (58) expr -> . - expr
    IF              shift and go to state 52
    OBJECTID        shift and go to state 50
    WHILE           shift and go to state 54
    {               shift and go to state 55
    LET             shift and go to state 56
    CASE            shift and go to state 57
    NEW             shift and go to state 58
    ISVOID          shift and go to state 59
    ~               shift and go to state 61
    NOT             shift and go to state 62
    (               shift and go to state 53
    INT_CONST       shift and go to state 63
    STR_CONST       shift and go to state 64
    BOOL_CONST      shift and go to state 65
    -               shift and go to state 60

    expr                           shift and go to state 108

state 79

    (50) expr -> expr LE . expr
    (22) expr -> . IF expr THEN expr ELSE expr error
    (23) expr -> . IF expr THEN error FI
    (24) expr -> . OBJECTID ASSIGN expr
    (25) expr -> . expr . OBJECTID ( expr optional_expressions )
    (26) expr -> . expr . OBJECTID ( expr )
    (27) expr -> . expr . OBJECTID ( )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (30) expr -> . expr @ TYPEID . OBJECTID ( )
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr optional_expressions )
    (33) expr -> . OBJECTID ( expr )
    (34) expr -> . IF expr THEN expr ELSE expr FI
    (35) expr -> . WHILE expr LOOP expr POOL
    (36) expr -> . { lista_expr }
    (37) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (39) expr -> . LET OBJECTID : TYPEID IN expr
    (40) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (41) expr -> . CASE expr OF lista_asig ESAC
    (42) expr -> . NEW TYPEID
    (43) expr -> . ISVOID expr
    (44) expr -> . expr + expr
    (45) expr -> . expr - expr
    (46) expr -> . expr * expr
    (47) expr -> . expr / expr
    (48) expr -> . ~ expr
    (49) expr -> . expr < expr
    (50) expr -> . expr LE expr
    (51) expr -> . expr = expr
    (52) expr -> . NOT expr
    (53) expr -> . ( expr )
    (54) expr -> . OBJECTID
    (55) expr -> . INT_CONST
    (56) expr -> . STR_CONST
    (57) expr -> . BOOL_CONST
    (58) expr -> . - expr
    IF              shift and go to state 52
    OBJECTID        shift and go to state 50
    WHILE           shift and go to state 54
    {               shift and go to state 55
    LET             shift and go to state 56
    CASE            shift and go to state 57
    NEW             shift and go to state 58
    ISVOID          shift and go to state 59
    ~               shift and go to state 61
    NOT             shift and go to state 62
    (               shift and go to state 53
    INT_CONST       shift and go to state 63
    STR_CONST       shift and go to state 64
    BOOL_CONST      shift and go to state 65
    -               shift and go to state 60

    expr                           shift and go to state 109

state 80

    (51) expr -> expr = . expr
    (22) expr -> . IF expr THEN expr ELSE expr error
    (23) expr -> . IF expr THEN error FI
    (24) expr -> . OBJECTID ASSIGN expr
    (25) expr -> . expr . OBJECTID ( expr optional_expressions )
    (26) expr -> . expr . OBJECTID ( expr )
    (27) expr -> . expr . OBJECTID ( )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (30) expr -> . expr @ TYPEID . OBJECTID ( )
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr optional_expressions )
    (33) expr -> . OBJECTID ( expr )
    (34) expr -> . IF expr THEN expr ELSE expr FI
    (35) expr -> . WHILE expr LOOP expr POOL
    (36) expr -> . { lista_expr }
    (37) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (39) expr -> . LET OBJECTID : TYPEID IN expr
    (40) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (41) expr -> . CASE expr OF lista_asig ESAC
    (42) expr -> . NEW TYPEID
    (43) expr -> . ISVOID expr
    (44) expr -> . expr + expr
    (45) expr -> . expr - expr
    (46) expr -> . expr * expr
    (47) expr -> . expr / expr
    (48) expr -> . ~ expr
    (49) expr -> . expr < expr
    (50) expr -> . expr LE expr
    (51) expr -> . expr = expr
    (52) expr -> . NOT expr
    (53) expr -> . ( expr )
    (54) expr -> . OBJECTID
    (55) expr -> . INT_CONST
    (56) expr -> . STR_CONST
    (57) expr -> . BOOL_CONST
    (58) expr -> . - expr
    IF              shift and go to state 52
    OBJECTID        shift and go to state 50
    WHILE           shift and go to state 54
    {               shift and go to state 55
    LET             shift and go to state 56
    CASE            shift and go to state 57
    NEW             shift and go to state 58
    ISVOID          shift and go to state 59
    ~               shift and go to state 61
    NOT             shift and go to state 62
    (               shift and go to state 53
    INT_CONST       shift and go to state 63
    STR_CONST       shift and go to state 64
    BOOL_CONST      shift and go to state 65
    -               shift and go to state 60

    expr                           shift and go to state 110

state 81

    (22) expr -> IF expr . THEN expr ELSE expr error
    (23) expr -> IF expr . THEN error FI
    (34) expr -> IF expr . THEN expr ELSE expr FI
    (25) expr -> expr . . OBJECTID ( expr optional_expressions )
    (26) expr -> expr . . OBJECTID ( expr )
    (27) expr -> expr . . OBJECTID ( )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (30) expr -> expr . @ TYPEID . OBJECTID ( )
    (44) expr -> expr . + expr
    (45) expr -> expr . - expr
    (46) expr -> expr . * expr
    (47) expr -> expr . / expr
    (49) expr -> expr . < expr
    (50) expr -> expr . LE expr
    (51) expr -> expr . = expr
    THEN            shift and go to state 111
    .               shift and go to state 72
    @               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    *               shift and go to state 76
    /               shift and go to state 77
    <               shift and go to state 78
    LE              shift and go to state 79
    =               shift and go to state 80


state 82

    (53) expr -> ( expr . )
    (25) expr -> expr . . OBJECTID ( expr optional_expressions )
    (26) expr -> expr . . OBJECTID ( expr )
    (27) expr -> expr . . OBJECTID ( )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (30) expr -> expr . @ TYPEID . OBJECTID ( )
    (44) expr -> expr . + expr
    (45) expr -> expr . - expr
    (46) expr -> expr . * expr
    (47) expr -> expr . / expr
    (49) expr -> expr . < expr
    (50) expr -> expr . LE expr
    (51) expr -> expr . = expr
    )               shift and go to state 112
    .               shift and go to state 72
    @               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    *               shift and go to state 76
    /               shift and go to state 77
    <               shift and go to state 78
    LE              shift and go to state 79
    =               shift and go to state 80


state 83

    (35) expr -> WHILE expr . LOOP expr POOL
    (25) expr -> expr . . OBJECTID ( expr optional_expressions )
    (26) expr -> expr . . OBJECTID ( expr )
    (27) expr -> expr . . OBJECTID ( )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (30) expr -> expr . @ TYPEID . OBJECTID ( )
    (44) expr -> expr . + expr
    (45) expr -> expr . - expr
    (46) expr -> expr . * expr
    (47) expr -> expr . / expr
    (49) expr -> expr . < expr
    (50) expr -> expr . LE expr
    (51) expr -> expr . = expr
    LOOP            shift and go to state 113
    .               shift and go to state 72
    @               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    *               shift and go to state 76
    /               shift and go to state 77
    <               shift and go to state 78
    LE              shift and go to state 79
    =               shift and go to state 80


state 84

    (36) expr -> { lista_expr . }
    (66) lista_expr -> lista_expr . expr ;
    (22) expr -> . IF expr THEN expr ELSE expr error
    (23) expr -> . IF expr THEN error FI
    (24) expr -> . OBJECTID ASSIGN expr
    (25) expr -> . expr . OBJECTID ( expr optional_expressions )
    (26) expr -> . expr . OBJECTID ( expr )
    (27) expr -> . expr . OBJECTID ( )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (30) expr -> . expr @ TYPEID . OBJECTID ( )
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr optional_expressions )
    (33) expr -> . OBJECTID ( expr )
    (34) expr -> . IF expr THEN expr ELSE expr FI
    (35) expr -> . WHILE expr LOOP expr POOL
    (36) expr -> . { lista_expr }
    (37) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (39) expr -> . LET OBJECTID : TYPEID IN expr
    (40) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (41) expr -> . CASE expr OF lista_asig ESAC
    (42) expr -> . NEW TYPEID
    (43) expr -> . ISVOID expr
    (44) expr -> . expr + expr
    (45) expr -> . expr - expr
    (46) expr -> . expr * expr
    (47) expr -> . expr / expr
    (48) expr -> . ~ expr
    (49) expr -> . expr < expr
    (50) expr -> . expr LE expr
    (51) expr -> . expr = expr
    (52) expr -> . NOT expr
    (53) expr -> . ( expr )
    (54) expr -> . OBJECTID
    (55) expr -> . INT_CONST
    (56) expr -> . STR_CONST
    (57) expr -> . BOOL_CONST
    (58) expr -> . - expr
    }               shift and go to state 114
    IF              shift and go to state 52
    OBJECTID        shift and go to state 50
    WHILE           shift and go to state 54
    {               shift and go to state 55
    LET             shift and go to state 56
    CASE            shift and go to state 57
    NEW             shift and go to state 58
    ISVOID          shift and go to state 59
    ~               shift and go to state 61
    NOT             shift and go to state 62
    (               shift and go to state 53
    INT_CONST       shift and go to state 63
    STR_CONST       shift and go to state 64
    BOOL_CONST      shift and go to state 65
    -               shift and go to state 60

    expr                           shift and go to state 115

state 85

    (65) lista_expr -> error . ;
    ;               shift and go to state 116


state 86

    (67) lista_expr -> expr . ;
    (25) expr -> expr . . OBJECTID ( expr optional_expressions )
    (26) expr -> expr . . OBJECTID ( expr )
    (27) expr -> expr . . OBJECTID ( )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (30) expr -> expr . @ TYPEID . OBJECTID ( )
    (44) expr -> expr . + expr
    (45) expr -> expr . - expr
    (46) expr -> expr . * expr
    (47) expr -> expr . / expr
    (49) expr -> expr . < expr
    (50) expr -> expr . LE expr
    (51) expr -> expr . = expr
    ;               shift and go to state 117
    .               shift and go to state 72
    @               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    *               shift and go to state 76
    /               shift and go to state 77
    <               shift and go to state 78
    LE              shift and go to state 79
    =               shift and go to state 80


state 87

    (37) expr -> LET OBJECTID . : TYPEID optional_assigns IN expr
    (38) expr -> LET OBJECTID . : TYPEID ASSIGN expr optional_assigns IN expr
    (39) expr -> LET OBJECTID . : TYPEID IN expr
    (40) expr -> LET OBJECTID . : TYPEID ASSIGN expr IN expr
    :               shift and go to state 118


state 88

    (41) expr -> CASE expr . OF lista_asig ESAC
    (25) expr -> expr . . OBJECTID ( expr optional_expressions )
    (26) expr -> expr . . OBJECTID ( expr )
    (27) expr -> expr . . OBJECTID ( )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (30) expr -> expr . @ TYPEID . OBJECTID ( )
    (44) expr -> expr . + expr
    (45) expr -> expr . - expr
    (46) expr -> expr . * expr
    (47) expr -> expr . / expr
    (49) expr -> expr . < expr
    (50) expr -> expr . LE expr
    (51) expr -> expr . = expr
    OF              shift and go to state 119
    .               shift and go to state 72
    @               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    *               shift and go to state 76
    /               shift and go to state 77
    <               shift and go to state 78
    LE              shift and go to state 79
    =               shift and go to state 80


state 89

    (42) expr -> NEW TYPEID .
    .               reduce using rule 42 (expr -> NEW TYPEID .)
    @               reduce using rule 42 (expr -> NEW TYPEID .)
    +               reduce using rule 42 (expr -> NEW TYPEID .)
    -               reduce using rule 42 (expr -> NEW TYPEID .)
    *               reduce using rule 42 (expr -> NEW TYPEID .)
    /               reduce using rule 42 (expr -> NEW TYPEID .)
    <               reduce using rule 42 (expr -> NEW TYPEID .)
    LE              reduce using rule 42 (expr -> NEW TYPEID .)
    =               reduce using rule 42 (expr -> NEW TYPEID .)
    ;               reduce using rule 42 (expr -> NEW TYPEID .)
    THEN            reduce using rule 42 (expr -> NEW TYPEID .)
    )               reduce using rule 42 (expr -> NEW TYPEID .)
    LOOP            reduce using rule 42 (expr -> NEW TYPEID .)
    OF              reduce using rule 42 (expr -> NEW TYPEID .)
    }               reduce using rule 42 (expr -> NEW TYPEID .)
    ,               reduce using rule 42 (expr -> NEW TYPEID .)
    ELSE            reduce using rule 42 (expr -> NEW TYPEID .)
    POOL            reduce using rule 42 (expr -> NEW TYPEID .)
    error           reduce using rule 42 (expr -> NEW TYPEID .)
    FI              reduce using rule 42 (expr -> NEW TYPEID .)
    IN              reduce using rule 42 (expr -> NEW TYPEID .)


state 90

    (43) expr -> ISVOID expr .
    (25) expr -> expr . . OBJECTID ( expr optional_expressions )
    (26) expr -> expr . . OBJECTID ( expr )
    (27) expr -> expr . . OBJECTID ( )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (30) expr -> expr . @ TYPEID . OBJECTID ( )
    (44) expr -> expr . + expr
    (45) expr -> expr . - expr
    (46) expr -> expr . * expr
    (47) expr -> expr . / expr
    (49) expr -> expr . < expr
    (50) expr -> expr . LE expr
    (51) expr -> expr . = expr
    +               reduce using rule 43 (expr -> ISVOID expr .)
    -               reduce using rule 43 (expr -> ISVOID expr .)
    *               reduce using rule 43 (expr -> ISVOID expr .)
    /               reduce using rule 43 (expr -> ISVOID expr .)
    <               reduce using rule 43 (expr -> ISVOID expr .)
    LE              reduce using rule 43 (expr -> ISVOID expr .)
    =               reduce using rule 43 (expr -> ISVOID expr .)
    ;               reduce using rule 43 (expr -> ISVOID expr .)
    THEN            reduce using rule 43 (expr -> ISVOID expr .)
    )               reduce using rule 43 (expr -> ISVOID expr .)
    LOOP            reduce using rule 43 (expr -> ISVOID expr .)
    OF              reduce using rule 43 (expr -> ISVOID expr .)
    }               reduce using rule 43 (expr -> ISVOID expr .)
    ,               reduce using rule 43 (expr -> ISVOID expr .)
    ELSE            reduce using rule 43 (expr -> ISVOID expr .)
    POOL            reduce using rule 43 (expr -> ISVOID expr .)
    error           reduce using rule 43 (expr -> ISVOID expr .)
    FI              reduce using rule 43 (expr -> ISVOID expr .)
    IN              reduce using rule 43 (expr -> ISVOID expr .)
    .               shift and go to state 72
    @               shift and go to state 73


state 91

    (58) expr -> - expr .
    (25) expr -> expr . . OBJECTID ( expr optional_expressions )
    (26) expr -> expr . . OBJECTID ( expr )
    (27) expr -> expr . . OBJECTID ( )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (30) expr -> expr . @ TYPEID . OBJECTID ( )
    (44) expr -> expr . + expr
    (45) expr -> expr . - expr
    (46) expr -> expr . * expr
    (47) expr -> expr . / expr
    (49) expr -> expr . < expr
    (50) expr -> expr . LE expr
    (51) expr -> expr . = expr
    +               reduce using rule 58 (expr -> - expr .)
    -               reduce using rule 58 (expr -> - expr .)
    *               reduce using rule 58 (expr -> - expr .)
    /               reduce using rule 58 (expr -> - expr .)
    <               reduce using rule 58 (expr -> - expr .)
    LE              reduce using rule 58 (expr -> - expr .)
    =               reduce using rule 58 (expr -> - expr .)
    ;               reduce using rule 58 (expr -> - expr .)
    THEN            reduce using rule 58 (expr -> - expr .)
    )               reduce using rule 58 (expr -> - expr .)
    LOOP            reduce using rule 58 (expr -> - expr .)
    OF              reduce using rule 58 (expr -> - expr .)
    }               reduce using rule 58 (expr -> - expr .)
    ,               reduce using rule 58 (expr -> - expr .)
    ELSE            reduce using rule 58 (expr -> - expr .)
    POOL            reduce using rule 58 (expr -> - expr .)
    error           reduce using rule 58 (expr -> - expr .)
    FI              reduce using rule 58 (expr -> - expr .)
    IN              reduce using rule 58 (expr -> - expr .)
    .               shift and go to state 72
    @               shift and go to state 73


state 92

    (48) expr -> ~ expr .
    (25) expr -> expr . . OBJECTID ( expr optional_expressions )
    (26) expr -> expr . . OBJECTID ( expr )
    (27) expr -> expr . . OBJECTID ( )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (30) expr -> expr . @ TYPEID . OBJECTID ( )
    (44) expr -> expr . + expr
    (45) expr -> expr . - expr
    (46) expr -> expr . * expr
    (47) expr -> expr . / expr
    (49) expr -> expr . < expr
    (50) expr -> expr . LE expr
    (51) expr -> expr . = expr
    +               reduce using rule 48 (expr -> ~ expr .)
    -               reduce using rule 48 (expr -> ~ expr .)
    <               reduce using rule 48 (expr -> ~ expr .)
    LE              reduce using rule 48 (expr -> ~ expr .)
    =               reduce using rule 48 (expr -> ~ expr .)
    ;               reduce using rule 48 (expr -> ~ expr .)
    THEN            reduce using rule 48 (expr -> ~ expr .)
    )               reduce using rule 48 (expr -> ~ expr .)
    LOOP            reduce using rule 48 (expr -> ~ expr .)
    OF              reduce using rule 48 (expr -> ~ expr .)
    }               reduce using rule 48 (expr -> ~ expr .)
    ,               reduce using rule 48 (expr -> ~ expr .)
    ELSE            reduce using rule 48 (expr -> ~ expr .)
    POOL            reduce using rule 48 (expr -> ~ expr .)
    error           reduce using rule 48 (expr -> ~ expr .)
    FI              reduce using rule 48 (expr -> ~ expr .)
    IN              reduce using rule 48 (expr -> ~ expr .)
    .               shift and go to state 72
    @               shift and go to state 73
    *               shift and go to state 76
    /               shift and go to state 77


state 93

    (52) expr -> NOT expr .
    (25) expr -> expr . . OBJECTID ( expr optional_expressions )
    (26) expr -> expr . . OBJECTID ( expr )
    (27) expr -> expr . . OBJECTID ( )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (30) expr -> expr . @ TYPEID . OBJECTID ( )
    (44) expr -> expr . + expr
    (45) expr -> expr . - expr
    (46) expr -> expr . * expr
    (47) expr -> expr . / expr
    (49) expr -> expr . < expr
    (50) expr -> expr . LE expr
    (51) expr -> expr . = expr
    ;               reduce using rule 52 (expr -> NOT expr .)
    THEN            reduce using rule 52 (expr -> NOT expr .)
    )               reduce using rule 52 (expr -> NOT expr .)
    LOOP            reduce using rule 52 (expr -> NOT expr .)
    OF              reduce using rule 52 (expr -> NOT expr .)
    }               reduce using rule 52 (expr -> NOT expr .)
    ,               reduce using rule 52 (expr -> NOT expr .)
    ELSE            reduce using rule 52 (expr -> NOT expr .)
    POOL            reduce using rule 52 (expr -> NOT expr .)
    error           reduce using rule 52 (expr -> NOT expr .)
    FI              reduce using rule 52 (expr -> NOT expr .)
    IN              reduce using rule 52 (expr -> NOT expr .)
    .               shift and go to state 72
    @               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    *               shift and go to state 76
    /               shift and go to state 77
    <               shift and go to state 78
    LE              shift and go to state 79
    =               shift and go to state 80


state 94

    (11) feature -> OBJECTID ( optional_formal ) : TYPEID { . error }
    error           shift and go to state 120


state 95

    (12) feature -> OBJECTID ( ) : TYPEID { error . }
    }               shift and go to state 121


state 96

    (13) feature -> OBJECTID ( ) : TYPEID { expr . }
    (25) expr -> expr . . OBJECTID ( expr optional_expressions )
    (26) expr -> expr . . OBJECTID ( expr )
    (27) expr -> expr . . OBJECTID ( )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (30) expr -> expr . @ TYPEID . OBJECTID ( )
    (44) expr -> expr . + expr
    (45) expr -> expr . - expr
    (46) expr -> expr . * expr
    (47) expr -> expr . / expr
    (49) expr -> expr . < expr
    (50) expr -> expr . LE expr
    (51) expr -> expr . = expr
    }               shift and go to state 122
    .               shift and go to state 72
    @               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    *               shift and go to state 76
    /               shift and go to state 77
    <               shift and go to state 78
    LE              shift and go to state 79
    =               shift and go to state 80


state 97

    (14) feature -> OBJECTID ( formal ) : TYPEID { . expr }
    (22) expr -> . IF expr THEN expr ELSE expr error
    (23) expr -> . IF expr THEN error FI
    (24) expr -> . OBJECTID ASSIGN expr
    (25) expr -> . expr . OBJECTID ( expr optional_expressions )
    (26) expr -> . expr . OBJECTID ( expr )
    (27) expr -> . expr . OBJECTID ( )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (30) expr -> . expr @ TYPEID . OBJECTID ( )
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr optional_expressions )
    (33) expr -> . OBJECTID ( expr )
    (34) expr -> . IF expr THEN expr ELSE expr FI
    (35) expr -> . WHILE expr LOOP expr POOL
    (36) expr -> . { lista_expr }
    (37) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (39) expr -> . LET OBJECTID : TYPEID IN expr
    (40) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (41) expr -> . CASE expr OF lista_asig ESAC
    (42) expr -> . NEW TYPEID
    (43) expr -> . ISVOID expr
    (44) expr -> . expr + expr
    (45) expr -> . expr - expr
    (46) expr -> . expr * expr
    (47) expr -> . expr / expr
    (48) expr -> . ~ expr
    (49) expr -> . expr < expr
    (50) expr -> . expr LE expr
    (51) expr -> . expr = expr
    (52) expr -> . NOT expr
    (53) expr -> . ( expr )
    (54) expr -> . OBJECTID
    (55) expr -> . INT_CONST
    (56) expr -> . STR_CONST
    (57) expr -> . BOOL_CONST
    (58) expr -> . - expr
    IF              shift and go to state 52
    OBJECTID        shift and go to state 50
    WHILE           shift and go to state 54
    {               shift and go to state 55
    LET             shift and go to state 56
    CASE            shift and go to state 57
    NEW             shift and go to state 58
    ISVOID          shift and go to state 59
    ~               shift and go to state 61
    NOT             shift and go to state 62
    (               shift and go to state 53
    INT_CONST       shift and go to state 63
    STR_CONST       shift and go to state 64
    BOOL_CONST      shift and go to state 65
    -               shift and go to state 60

    expr                           shift and go to state 123

state 98

    (15) feature -> OBJECTID ( formal optional_formal ) : TYPEID . { expr }
    {               shift and go to state 124


state 99

    (24) expr -> OBJECTID ASSIGN expr .
    (25) expr -> expr . . OBJECTID ( expr optional_expressions )
    (26) expr -> expr . . OBJECTID ( expr )
    (27) expr -> expr . . OBJECTID ( )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (30) expr -> expr . @ TYPEID . OBJECTID ( )
    (44) expr -> expr . + expr
    (45) expr -> expr . - expr
    (46) expr -> expr . * expr
    (47) expr -> expr . / expr
    (49) expr -> expr . < expr
    (50) expr -> expr . LE expr
    (51) expr -> expr . = expr
    ;               reduce using rule 24 (expr -> OBJECTID ASSIGN expr .)
    THEN            reduce using rule 24 (expr -> OBJECTID ASSIGN expr .)
    )               reduce using rule 24 (expr -> OBJECTID ASSIGN expr .)
    LOOP            reduce using rule 24 (expr -> OBJECTID ASSIGN expr .)
    OF              reduce using rule 24 (expr -> OBJECTID ASSIGN expr .)
    }               reduce using rule 24 (expr -> OBJECTID ASSIGN expr .)
    ,               reduce using rule 24 (expr -> OBJECTID ASSIGN expr .)
    ELSE            reduce using rule 24 (expr -> OBJECTID ASSIGN expr .)
    POOL            reduce using rule 24 (expr -> OBJECTID ASSIGN expr .)
    error           reduce using rule 24 (expr -> OBJECTID ASSIGN expr .)
    FI              reduce using rule 24 (expr -> OBJECTID ASSIGN expr .)
    IN              reduce using rule 24 (expr -> OBJECTID ASSIGN expr .)
    .               shift and go to state 72
    @               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    *               shift and go to state 76
    /               shift and go to state 77
    <               shift and go to state 78
    LE              shift and go to state 79
    =               shift and go to state 80


state 100

    (31) expr -> OBJECTID ( ) .
    .               reduce using rule 31 (expr -> OBJECTID ( ) .)
    @               reduce using rule 31 (expr -> OBJECTID ( ) .)
    +               reduce using rule 31 (expr -> OBJECTID ( ) .)
    -               reduce using rule 31 (expr -> OBJECTID ( ) .)
    *               reduce using rule 31 (expr -> OBJECTID ( ) .)
    /               reduce using rule 31 (expr -> OBJECTID ( ) .)
    <               reduce using rule 31 (expr -> OBJECTID ( ) .)
    LE              reduce using rule 31 (expr -> OBJECTID ( ) .)
    =               reduce using rule 31 (expr -> OBJECTID ( ) .)
    ;               reduce using rule 31 (expr -> OBJECTID ( ) .)
    THEN            reduce using rule 31 (expr -> OBJECTID ( ) .)
    )               reduce using rule 31 (expr -> OBJECTID ( ) .)
    LOOP            reduce using rule 31 (expr -> OBJECTID ( ) .)
    OF              reduce using rule 31 (expr -> OBJECTID ( ) .)
    }               reduce using rule 31 (expr -> OBJECTID ( ) .)
    ,               reduce using rule 31 (expr -> OBJECTID ( ) .)
    ELSE            reduce using rule 31 (expr -> OBJECTID ( ) .)
    POOL            reduce using rule 31 (expr -> OBJECTID ( ) .)
    error           reduce using rule 31 (expr -> OBJECTID ( ) .)
    FI              reduce using rule 31 (expr -> OBJECTID ( ) .)
    IN              reduce using rule 31 (expr -> OBJECTID ( ) .)


state 101

    (32) expr -> OBJECTID ( expr . optional_expressions )
    (33) expr -> OBJECTID ( expr . )
    (25) expr -> expr . . OBJECTID ( expr optional_expressions )
    (26) expr -> expr . . OBJECTID ( expr )
    (27) expr -> expr . . OBJECTID ( )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (30) expr -> expr . @ TYPEID . OBJECTID ( )
    (44) expr -> expr . + expr
    (45) expr -> expr . - expr
    (46) expr -> expr . * expr
    (47) expr -> expr . / expr
    (49) expr -> expr . < expr
    (50) expr -> expr . LE expr
    (51) expr -> expr . = expr
    (68) optional_expressions -> . , expr optional_expressions
    (69) optional_expressions -> . , expr
    )               shift and go to state 126
    .               shift and go to state 72
    @               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    *               shift and go to state 76
    /               shift and go to state 77
    <               shift and go to state 78
    LE              shift and go to state 79
    =               shift and go to state 80
    ,               shift and go to state 127

    optional_expressions           shift and go to state 125

state 102

    (25) expr -> expr . OBJECTID . ( expr optional_expressions )
    (26) expr -> expr . OBJECTID . ( expr )
    (27) expr -> expr . OBJECTID . ( )
    (               shift and go to state 128


state 103

    (28) expr -> expr @ TYPEID . . OBJECTID ( expr optional_expressions )
    (29) expr -> expr @ TYPEID . . OBJECTID ( expr )
    (30) expr -> expr @ TYPEID . . OBJECTID ( )
    .               shift and go to state 129


state 104

    (44) expr -> expr + expr .
    (25) expr -> expr . . OBJECTID ( expr optional_expressions )
    (26) expr -> expr . . OBJECTID ( expr )
    (27) expr -> expr . . OBJECTID ( )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (30) expr -> expr . @ TYPEID . OBJECTID ( )
    (44) expr -> expr . + expr
    (45) expr -> expr . - expr
    (46) expr -> expr . * expr
    (47) expr -> expr . / expr
    (49) expr -> expr . < expr
    (50) expr -> expr . LE expr
    (51) expr -> expr . = expr
    +               reduce using rule 44 (expr -> expr + expr .)
    -               reduce using rule 44 (expr -> expr + expr .)
    <               reduce using rule 44 (expr -> expr + expr .)
    LE              reduce using rule 44 (expr -> expr + expr .)
    =               reduce using rule 44 (expr -> expr + expr .)
    ;               reduce using rule 44 (expr -> expr + expr .)
    THEN            reduce using rule 44 (expr -> expr + expr .)
    )               reduce using rule 44 (expr -> expr + expr .)
    LOOP            reduce using rule 44 (expr -> expr + expr .)
    OF              reduce using rule 44 (expr -> expr + expr .)
    }               reduce using rule 44 (expr -> expr + expr .)
    ,               reduce using rule 44 (expr -> expr + expr .)
    ELSE            reduce using rule 44 (expr -> expr + expr .)
    POOL            reduce using rule 44 (expr -> expr + expr .)
    error           reduce using rule 44 (expr -> expr + expr .)
    FI              reduce using rule 44 (expr -> expr + expr .)
    IN              reduce using rule 44 (expr -> expr + expr .)
    .               shift and go to state 72
    @               shift and go to state 73
    *               shift and go to state 76
    /               shift and go to state 77


state 105

    (45) expr -> expr - expr .
    (25) expr -> expr . . OBJECTID ( expr optional_expressions )
    (26) expr -> expr . . OBJECTID ( expr )
    (27) expr -> expr . . OBJECTID ( )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (30) expr -> expr . @ TYPEID . OBJECTID ( )
    (44) expr -> expr . + expr
    (45) expr -> expr . - expr
    (46) expr -> expr . * expr
    (47) expr -> expr . / expr
    (49) expr -> expr . < expr
    (50) expr -> expr . LE expr
    (51) expr -> expr . = expr
    +               reduce using rule 45 (expr -> expr - expr .)
    -               reduce using rule 45 (expr -> expr - expr .)
    <               reduce using rule 45 (expr -> expr - expr .)
    LE              reduce using rule 45 (expr -> expr - expr .)
    =               reduce using rule 45 (expr -> expr - expr .)
    ;               reduce using rule 45 (expr -> expr - expr .)
    THEN            reduce using rule 45 (expr -> expr - expr .)
    )               reduce using rule 45 (expr -> expr - expr .)
    LOOP            reduce using rule 45 (expr -> expr - expr .)
    OF              reduce using rule 45 (expr -> expr - expr .)
    }               reduce using rule 45 (expr -> expr - expr .)
    ,               reduce using rule 45 (expr -> expr - expr .)
    ELSE            reduce using rule 45 (expr -> expr - expr .)
    POOL            reduce using rule 45 (expr -> expr - expr .)
    error           reduce using rule 45 (expr -> expr - expr .)
    FI              reduce using rule 45 (expr -> expr - expr .)
    IN              reduce using rule 45 (expr -> expr - expr .)
    .               shift and go to state 72
    @               shift and go to state 73
    *               shift and go to state 76
    /               shift and go to state 77


state 106

    (46) expr -> expr * expr .
    (25) expr -> expr . . OBJECTID ( expr optional_expressions )
    (26) expr -> expr . . OBJECTID ( expr )
    (27) expr -> expr . . OBJECTID ( )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (30) expr -> expr . @ TYPEID . OBJECTID ( )
    (44) expr -> expr . + expr
    (45) expr -> expr . - expr
    (46) expr -> expr . * expr
    (47) expr -> expr . / expr
    (49) expr -> expr . < expr
    (50) expr -> expr . LE expr
    (51) expr -> expr . = expr
    +               reduce using rule 46 (expr -> expr * expr .)
    -               reduce using rule 46 (expr -> expr * expr .)
    *               reduce using rule 46 (expr -> expr * expr .)
    /               reduce using rule 46 (expr -> expr * expr .)
    <               reduce using rule 46 (expr -> expr * expr .)
    LE              reduce using rule 46 (expr -> expr * expr .)
    =               reduce using rule 46 (expr -> expr * expr .)
    ;               reduce using rule 46 (expr -> expr * expr .)
    THEN            reduce using rule 46 (expr -> expr * expr .)
    )               reduce using rule 46 (expr -> expr * expr .)
    LOOP            reduce using rule 46 (expr -> expr * expr .)
    OF              reduce using rule 46 (expr -> expr * expr .)
    }               reduce using rule 46 (expr -> expr * expr .)
    ,               reduce using rule 46 (expr -> expr * expr .)
    ELSE            reduce using rule 46 (expr -> expr * expr .)
    POOL            reduce using rule 46 (expr -> expr * expr .)
    error           reduce using rule 46 (expr -> expr * expr .)
    FI              reduce using rule 46 (expr -> expr * expr .)
    IN              reduce using rule 46 (expr -> expr * expr .)
    .               shift and go to state 72
    @               shift and go to state 73


state 107

    (47) expr -> expr / expr .
    (25) expr -> expr . . OBJECTID ( expr optional_expressions )
    (26) expr -> expr . . OBJECTID ( expr )
    (27) expr -> expr . . OBJECTID ( )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (30) expr -> expr . @ TYPEID . OBJECTID ( )
    (44) expr -> expr . + expr
    (45) expr -> expr . - expr
    (46) expr -> expr . * expr
    (47) expr -> expr . / expr
    (49) expr -> expr . < expr
    (50) expr -> expr . LE expr
    (51) expr -> expr . = expr
    +               reduce using rule 47 (expr -> expr / expr .)
    -               reduce using rule 47 (expr -> expr / expr .)
    *               reduce using rule 47 (expr -> expr / expr .)
    /               reduce using rule 47 (expr -> expr / expr .)
    <               reduce using rule 47 (expr -> expr / expr .)
    LE              reduce using rule 47 (expr -> expr / expr .)
    =               reduce using rule 47 (expr -> expr / expr .)
    ;               reduce using rule 47 (expr -> expr / expr .)
    THEN            reduce using rule 47 (expr -> expr / expr .)
    )               reduce using rule 47 (expr -> expr / expr .)
    LOOP            reduce using rule 47 (expr -> expr / expr .)
    OF              reduce using rule 47 (expr -> expr / expr .)
    }               reduce using rule 47 (expr -> expr / expr .)
    ,               reduce using rule 47 (expr -> expr / expr .)
    ELSE            reduce using rule 47 (expr -> expr / expr .)
    POOL            reduce using rule 47 (expr -> expr / expr .)
    error           reduce using rule 47 (expr -> expr / expr .)
    FI              reduce using rule 47 (expr -> expr / expr .)
    IN              reduce using rule 47 (expr -> expr / expr .)
    .               shift and go to state 72
    @               shift and go to state 73


state 108

    (49) expr -> expr < expr .
    (25) expr -> expr . . OBJECTID ( expr optional_expressions )
    (26) expr -> expr . . OBJECTID ( expr )
    (27) expr -> expr . . OBJECTID ( )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (30) expr -> expr . @ TYPEID . OBJECTID ( )
    (44) expr -> expr . + expr
    (45) expr -> expr . - expr
    (46) expr -> expr . * expr
    (47) expr -> expr . / expr
    (49) expr -> expr . < expr
    (50) expr -> expr . LE expr
    (51) expr -> expr . = expr
    <               reduce using rule 49 (expr -> expr < expr .)
    LE              reduce using rule 49 (expr -> expr < expr .)
    =               reduce using rule 49 (expr -> expr < expr .)
    ;               reduce using rule 49 (expr -> expr < expr .)
    THEN            reduce using rule 49 (expr -> expr < expr .)
    )               reduce using rule 49 (expr -> expr < expr .)
    LOOP            reduce using rule 49 (expr -> expr < expr .)
    OF              reduce using rule 49 (expr -> expr < expr .)
    }               reduce using rule 49 (expr -> expr < expr .)
    ,               reduce using rule 49 (expr -> expr < expr .)
    ELSE            reduce using rule 49 (expr -> expr < expr .)
    POOL            reduce using rule 49 (expr -> expr < expr .)
    error           reduce using rule 49 (expr -> expr < expr .)
    FI              reduce using rule 49 (expr -> expr < expr .)
    IN              reduce using rule 49 (expr -> expr < expr .)
    .               shift and go to state 72
    @               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    *               shift and go to state 76
    /               shift and go to state 77


state 109

    (50) expr -> expr LE expr .
    (25) expr -> expr . . OBJECTID ( expr optional_expressions )
    (26) expr -> expr . . OBJECTID ( expr )
    (27) expr -> expr . . OBJECTID ( )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (30) expr -> expr . @ TYPEID . OBJECTID ( )
    (44) expr -> expr . + expr
    (45) expr -> expr . - expr
    (46) expr -> expr . * expr
    (47) expr -> expr . / expr
    (49) expr -> expr . < expr
    (50) expr -> expr . LE expr
    (51) expr -> expr . = expr
    <               reduce using rule 50 (expr -> expr LE expr .)
    LE              reduce using rule 50 (expr -> expr LE expr .)
    =               reduce using rule 50 (expr -> expr LE expr .)
    ;               reduce using rule 50 (expr -> expr LE expr .)
    THEN            reduce using rule 50 (expr -> expr LE expr .)
    )               reduce using rule 50 (expr -> expr LE expr .)
    LOOP            reduce using rule 50 (expr -> expr LE expr .)
    OF              reduce using rule 50 (expr -> expr LE expr .)
    }               reduce using rule 50 (expr -> expr LE expr .)
    ,               reduce using rule 50 (expr -> expr LE expr .)
    ELSE            reduce using rule 50 (expr -> expr LE expr .)
    POOL            reduce using rule 50 (expr -> expr LE expr .)
    error           reduce using rule 50 (expr -> expr LE expr .)
    FI              reduce using rule 50 (expr -> expr LE expr .)
    IN              reduce using rule 50 (expr -> expr LE expr .)
    .               shift and go to state 72
    @               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    *               shift and go to state 76
    /               shift and go to state 77


state 110

    (51) expr -> expr = expr .
    (25) expr -> expr . . OBJECTID ( expr optional_expressions )
    (26) expr -> expr . . OBJECTID ( expr )
    (27) expr -> expr . . OBJECTID ( )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (30) expr -> expr . @ TYPEID . OBJECTID ( )
    (44) expr -> expr . + expr
    (45) expr -> expr . - expr
    (46) expr -> expr . * expr
    (47) expr -> expr . / expr
    (49) expr -> expr . < expr
    (50) expr -> expr . LE expr
    (51) expr -> expr . = expr
    <               reduce using rule 51 (expr -> expr = expr .)
    LE              reduce using rule 51 (expr -> expr = expr .)
    =               reduce using rule 51 (expr -> expr = expr .)
    ;               reduce using rule 51 (expr -> expr = expr .)
    THEN            reduce using rule 51 (expr -> expr = expr .)
    )               reduce using rule 51 (expr -> expr = expr .)
    LOOP            reduce using rule 51 (expr -> expr = expr .)
    OF              reduce using rule 51 (expr -> expr = expr .)
    }               reduce using rule 51 (expr -> expr = expr .)
    ,               reduce using rule 51 (expr -> expr = expr .)
    ELSE            reduce using rule 51 (expr -> expr = expr .)
    POOL            reduce using rule 51 (expr -> expr = expr .)
    error           reduce using rule 51 (expr -> expr = expr .)
    FI              reduce using rule 51 (expr -> expr = expr .)
    IN              reduce using rule 51 (expr -> expr = expr .)
    .               shift and go to state 72
    @               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    *               shift and go to state 76
    /               shift and go to state 77


state 111

    (22) expr -> IF expr THEN . expr ELSE expr error
    (23) expr -> IF expr THEN . error FI
    (34) expr -> IF expr THEN . expr ELSE expr FI
    (22) expr -> . IF expr THEN expr ELSE expr error
    (23) expr -> . IF expr THEN error FI
    (24) expr -> . OBJECTID ASSIGN expr
    (25) expr -> . expr . OBJECTID ( expr optional_expressions )
    (26) expr -> . expr . OBJECTID ( expr )
    (27) expr -> . expr . OBJECTID ( )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (30) expr -> . expr @ TYPEID . OBJECTID ( )
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr optional_expressions )
    (33) expr -> . OBJECTID ( expr )
    (34) expr -> . IF expr THEN expr ELSE expr FI
    (35) expr -> . WHILE expr LOOP expr POOL
    (36) expr -> . { lista_expr }
    (37) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (39) expr -> . LET OBJECTID : TYPEID IN expr
    (40) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (41) expr -> . CASE expr OF lista_asig ESAC
    (42) expr -> . NEW TYPEID
    (43) expr -> . ISVOID expr
    (44) expr -> . expr + expr
    (45) expr -> . expr - expr
    (46) expr -> . expr * expr
    (47) expr -> . expr / expr
    (48) expr -> . ~ expr
    (49) expr -> . expr < expr
    (50) expr -> . expr LE expr
    (51) expr -> . expr = expr
    (52) expr -> . NOT expr
    (53) expr -> . ( expr )
    (54) expr -> . OBJECTID
    (55) expr -> . INT_CONST
    (56) expr -> . STR_CONST
    (57) expr -> . BOOL_CONST
    (58) expr -> . - expr
    error           shift and go to state 131
    IF              shift and go to state 52
    OBJECTID        shift and go to state 50
    WHILE           shift and go to state 54
    {               shift and go to state 55
    LET             shift and go to state 56
    CASE            shift and go to state 57
    NEW             shift and go to state 58
    ISVOID          shift and go to state 59
    ~               shift and go to state 61
    NOT             shift and go to state 62
    (               shift and go to state 53
    INT_CONST       shift and go to state 63
    STR_CONST       shift and go to state 64
    BOOL_CONST      shift and go to state 65
    -               shift and go to state 60

    expr                           shift and go to state 130

state 112

    (53) expr -> ( expr ) .
    .               reduce using rule 53 (expr -> ( expr ) .)
    @               reduce using rule 53 (expr -> ( expr ) .)
    +               reduce using rule 53 (expr -> ( expr ) .)
    -               reduce using rule 53 (expr -> ( expr ) .)
    *               reduce using rule 53 (expr -> ( expr ) .)
    /               reduce using rule 53 (expr -> ( expr ) .)
    <               reduce using rule 53 (expr -> ( expr ) .)
    LE              reduce using rule 53 (expr -> ( expr ) .)
    =               reduce using rule 53 (expr -> ( expr ) .)
    ;               reduce using rule 53 (expr -> ( expr ) .)
    THEN            reduce using rule 53 (expr -> ( expr ) .)
    )               reduce using rule 53 (expr -> ( expr ) .)
    LOOP            reduce using rule 53 (expr -> ( expr ) .)
    OF              reduce using rule 53 (expr -> ( expr ) .)
    }               reduce using rule 53 (expr -> ( expr ) .)
    ,               reduce using rule 53 (expr -> ( expr ) .)
    ELSE            reduce using rule 53 (expr -> ( expr ) .)
    POOL            reduce using rule 53 (expr -> ( expr ) .)
    error           reduce using rule 53 (expr -> ( expr ) .)
    FI              reduce using rule 53 (expr -> ( expr ) .)
    IN              reduce using rule 53 (expr -> ( expr ) .)


state 113

    (35) expr -> WHILE expr LOOP . expr POOL
    (22) expr -> . IF expr THEN expr ELSE expr error
    (23) expr -> . IF expr THEN error FI
    (24) expr -> . OBJECTID ASSIGN expr
    (25) expr -> . expr . OBJECTID ( expr optional_expressions )
    (26) expr -> . expr . OBJECTID ( expr )
    (27) expr -> . expr . OBJECTID ( )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (30) expr -> . expr @ TYPEID . OBJECTID ( )
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr optional_expressions )
    (33) expr -> . OBJECTID ( expr )
    (34) expr -> . IF expr THEN expr ELSE expr FI
    (35) expr -> . WHILE expr LOOP expr POOL
    (36) expr -> . { lista_expr }
    (37) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (39) expr -> . LET OBJECTID : TYPEID IN expr
    (40) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (41) expr -> . CASE expr OF lista_asig ESAC
    (42) expr -> . NEW TYPEID
    (43) expr -> . ISVOID expr
    (44) expr -> . expr + expr
    (45) expr -> . expr - expr
    (46) expr -> . expr * expr
    (47) expr -> . expr / expr
    (48) expr -> . ~ expr
    (49) expr -> . expr < expr
    (50) expr -> . expr LE expr
    (51) expr -> . expr = expr
    (52) expr -> . NOT expr
    (53) expr -> . ( expr )
    (54) expr -> . OBJECTID
    (55) expr -> . INT_CONST
    (56) expr -> . STR_CONST
    (57) expr -> . BOOL_CONST
    (58) expr -> . - expr
    IF              shift and go to state 52
    OBJECTID        shift and go to state 50
    WHILE           shift and go to state 54
    {               shift and go to state 55
    LET             shift and go to state 56
    CASE            shift and go to state 57
    NEW             shift and go to state 58
    ISVOID          shift and go to state 59
    ~               shift and go to state 61
    NOT             shift and go to state 62
    (               shift and go to state 53
    INT_CONST       shift and go to state 63
    STR_CONST       shift and go to state 64
    BOOL_CONST      shift and go to state 65
    -               shift and go to state 60

    expr                           shift and go to state 132

state 114

    (36) expr -> { lista_expr } .
    .               reduce using rule 36 (expr -> { lista_expr } .)
    @               reduce using rule 36 (expr -> { lista_expr } .)
    +               reduce using rule 36 (expr -> { lista_expr } .)
    -               reduce using rule 36 (expr -> { lista_expr } .)
    *               reduce using rule 36 (expr -> { lista_expr } .)
    /               reduce using rule 36 (expr -> { lista_expr } .)
    <               reduce using rule 36 (expr -> { lista_expr } .)
    LE              reduce using rule 36 (expr -> { lista_expr } .)
    =               reduce using rule 36 (expr -> { lista_expr } .)
    ;               reduce using rule 36 (expr -> { lista_expr } .)
    THEN            reduce using rule 36 (expr -> { lista_expr } .)
    )               reduce using rule 36 (expr -> { lista_expr } .)
    LOOP            reduce using rule 36 (expr -> { lista_expr } .)
    OF              reduce using rule 36 (expr -> { lista_expr } .)
    }               reduce using rule 36 (expr -> { lista_expr } .)
    ,               reduce using rule 36 (expr -> { lista_expr } .)
    ELSE            reduce using rule 36 (expr -> { lista_expr } .)
    POOL            reduce using rule 36 (expr -> { lista_expr } .)
    error           reduce using rule 36 (expr -> { lista_expr } .)
    FI              reduce using rule 36 (expr -> { lista_expr } .)
    IN              reduce using rule 36 (expr -> { lista_expr } .)


state 115

    (66) lista_expr -> lista_expr expr . ;
    (25) expr -> expr . . OBJECTID ( expr optional_expressions )
    (26) expr -> expr . . OBJECTID ( expr )
    (27) expr -> expr . . OBJECTID ( )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (30) expr -> expr . @ TYPEID . OBJECTID ( )
    (44) expr -> expr . + expr
    (45) expr -> expr . - expr
    (46) expr -> expr . * expr
    (47) expr -> expr . / expr
    (49) expr -> expr . < expr
    (50) expr -> expr . LE expr
    (51) expr -> expr . = expr
    ;               shift and go to state 133
    .               shift and go to state 72
    @               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    *               shift and go to state 76
    /               shift and go to state 77
    <               shift and go to state 78
    LE              shift and go to state 79
    =               shift and go to state 80


state 116

    (65) lista_expr -> error ; .
    }               reduce using rule 65 (lista_expr -> error ; .)
    IF              reduce using rule 65 (lista_expr -> error ; .)
    OBJECTID        reduce using rule 65 (lista_expr -> error ; .)
    WHILE           reduce using rule 65 (lista_expr -> error ; .)
    {               reduce using rule 65 (lista_expr -> error ; .)
    LET             reduce using rule 65 (lista_expr -> error ; .)
    CASE            reduce using rule 65 (lista_expr -> error ; .)
    NEW             reduce using rule 65 (lista_expr -> error ; .)
    ISVOID          reduce using rule 65 (lista_expr -> error ; .)
    ~               reduce using rule 65 (lista_expr -> error ; .)
    NOT             reduce using rule 65 (lista_expr -> error ; .)
    (               reduce using rule 65 (lista_expr -> error ; .)
    INT_CONST       reduce using rule 65 (lista_expr -> error ; .)
    STR_CONST       reduce using rule 65 (lista_expr -> error ; .)
    BOOL_CONST      reduce using rule 65 (lista_expr -> error ; .)
    -               reduce using rule 65 (lista_expr -> error ; .)


state 117

    (67) lista_expr -> expr ; .
    }               reduce using rule 67 (lista_expr -> expr ; .)
    IF              reduce using rule 67 (lista_expr -> expr ; .)
    OBJECTID        reduce using rule 67 (lista_expr -> expr ; .)
    WHILE           reduce using rule 67 (lista_expr -> expr ; .)
    {               reduce using rule 67 (lista_expr -> expr ; .)
    LET             reduce using rule 67 (lista_expr -> expr ; .)
    CASE            reduce using rule 67 (lista_expr -> expr ; .)
    NEW             reduce using rule 67 (lista_expr -> expr ; .)
    ISVOID          reduce using rule 67 (lista_expr -> expr ; .)
    ~               reduce using rule 67 (lista_expr -> expr ; .)
    NOT             reduce using rule 67 (lista_expr -> expr ; .)
    (               reduce using rule 67 (lista_expr -> expr ; .)
    INT_CONST       reduce using rule 67 (lista_expr -> expr ; .)
    STR_CONST       reduce using rule 67 (lista_expr -> expr ; .)
    BOOL_CONST      reduce using rule 67 (lista_expr -> expr ; .)
    -               reduce using rule 67 (lista_expr -> expr ; .)


state 118

    (37) expr -> LET OBJECTID : . TYPEID optional_assigns IN expr
    (38) expr -> LET OBJECTID : . TYPEID ASSIGN expr optional_assigns IN expr
    (39) expr -> LET OBJECTID : . TYPEID IN expr
    (40) expr -> LET OBJECTID : . TYPEID ASSIGN expr IN expr
    TYPEID          shift and go to state 134


state 119

    (41) expr -> CASE expr OF . lista_asig ESAC
    (59) lista_asig -> . OBJECTID : TYPEID DARROW expr ; lista_asig
    (60) lista_asig -> . OBJECTID : TYPEID DARROW expr ;
    OBJECTID        shift and go to state 136

    lista_asig                     shift and go to state 135

state 120

    (11) feature -> OBJECTID ( optional_formal ) : TYPEID { error . }
    }               shift and go to state 137


state 121

    (12) feature -> OBJECTID ( ) : TYPEID { error } .
    ;               reduce using rule 12 (feature -> OBJECTID ( ) : TYPEID { error } .)


state 122

    (13) feature -> OBJECTID ( ) : TYPEID { expr } .
    ;               reduce using rule 13 (feature -> OBJECTID ( ) : TYPEID { expr } .)


state 123

    (14) feature -> OBJECTID ( formal ) : TYPEID { expr . }
    (25) expr -> expr . . OBJECTID ( expr optional_expressions )
    (26) expr -> expr . . OBJECTID ( expr )
    (27) expr -> expr . . OBJECTID ( )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (30) expr -> expr . @ TYPEID . OBJECTID ( )
    (44) expr -> expr . + expr
    (45) expr -> expr . - expr
    (46) expr -> expr . * expr
    (47) expr -> expr . / expr
    (49) expr -> expr . < expr
    (50) expr -> expr . LE expr
    (51) expr -> expr . = expr
    }               shift and go to state 138
    .               shift and go to state 72
    @               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    *               shift and go to state 76
    /               shift and go to state 77
    <               shift and go to state 78
    LE              shift and go to state 79
    =               shift and go to state 80


state 124

    (15) feature -> OBJECTID ( formal optional_formal ) : TYPEID { . expr }
    (22) expr -> . IF expr THEN expr ELSE expr error
    (23) expr -> . IF expr THEN error FI
    (24) expr -> . OBJECTID ASSIGN expr
    (25) expr -> . expr . OBJECTID ( expr optional_expressions )
    (26) expr -> . expr . OBJECTID ( expr )
    (27) expr -> . expr . OBJECTID ( )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (30) expr -> . expr @ TYPEID . OBJECTID ( )
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr optional_expressions )
    (33) expr -> . OBJECTID ( expr )
    (34) expr -> . IF expr THEN expr ELSE expr FI
    (35) expr -> . WHILE expr LOOP expr POOL
    (36) expr -> . { lista_expr }
    (37) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (39) expr -> . LET OBJECTID : TYPEID IN expr
    (40) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (41) expr -> . CASE expr OF lista_asig ESAC
    (42) expr -> . NEW TYPEID
    (43) expr -> . ISVOID expr
    (44) expr -> . expr + expr
    (45) expr -> . expr - expr
    (46) expr -> . expr * expr
    (47) expr -> . expr / expr
    (48) expr -> . ~ expr
    (49) expr -> . expr < expr
    (50) expr -> . expr LE expr
    (51) expr -> . expr = expr
    (52) expr -> . NOT expr
    (53) expr -> . ( expr )
    (54) expr -> . OBJECTID
    (55) expr -> . INT_CONST
    (56) expr -> . STR_CONST
    (57) expr -> . BOOL_CONST
    (58) expr -> . - expr
    IF              shift and go to state 52
    OBJECTID        shift and go to state 50
    WHILE           shift and go to state 54
    {               shift and go to state 55
    LET             shift and go to state 56
    CASE            shift and go to state 57
    NEW             shift and go to state 58
    ISVOID          shift and go to state 59
    ~               shift and go to state 61
    NOT             shift and go to state 62
    (               shift and go to state 53
    INT_CONST       shift and go to state 63
    STR_CONST       shift and go to state 64
    BOOL_CONST      shift and go to state 65
    -               shift and go to state 60

    expr                           shift and go to state 139

state 125

    (32) expr -> OBJECTID ( expr optional_expressions . )
    )               shift and go to state 140


state 126

    (33) expr -> OBJECTID ( expr ) .
    .               reduce using rule 33 (expr -> OBJECTID ( expr ) .)
    @               reduce using rule 33 (expr -> OBJECTID ( expr ) .)
    +               reduce using rule 33 (expr -> OBJECTID ( expr ) .)
    -               reduce using rule 33 (expr -> OBJECTID ( expr ) .)
    *               reduce using rule 33 (expr -> OBJECTID ( expr ) .)
    /               reduce using rule 33 (expr -> OBJECTID ( expr ) .)
    <               reduce using rule 33 (expr -> OBJECTID ( expr ) .)
    LE              reduce using rule 33 (expr -> OBJECTID ( expr ) .)
    =               reduce using rule 33 (expr -> OBJECTID ( expr ) .)
    ;               reduce using rule 33 (expr -> OBJECTID ( expr ) .)
    THEN            reduce using rule 33 (expr -> OBJECTID ( expr ) .)
    )               reduce using rule 33 (expr -> OBJECTID ( expr ) .)
    LOOP            reduce using rule 33 (expr -> OBJECTID ( expr ) .)
    OF              reduce using rule 33 (expr -> OBJECTID ( expr ) .)
    }               reduce using rule 33 (expr -> OBJECTID ( expr ) .)
    ,               reduce using rule 33 (expr -> OBJECTID ( expr ) .)
    ELSE            reduce using rule 33 (expr -> OBJECTID ( expr ) .)
    POOL            reduce using rule 33 (expr -> OBJECTID ( expr ) .)
    error           reduce using rule 33 (expr -> OBJECTID ( expr ) .)
    FI              reduce using rule 33 (expr -> OBJECTID ( expr ) .)
    IN              reduce using rule 33 (expr -> OBJECTID ( expr ) .)


state 127

    (68) optional_expressions -> , . expr optional_expressions
    (69) optional_expressions -> , . expr
    (22) expr -> . IF expr THEN expr ELSE expr error
    (23) expr -> . IF expr THEN error FI
    (24) expr -> . OBJECTID ASSIGN expr
    (25) expr -> . expr . OBJECTID ( expr optional_expressions )
    (26) expr -> . expr . OBJECTID ( expr )
    (27) expr -> . expr . OBJECTID ( )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (30) expr -> . expr @ TYPEID . OBJECTID ( )
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr optional_expressions )
    (33) expr -> . OBJECTID ( expr )
    (34) expr -> . IF expr THEN expr ELSE expr FI
    (35) expr -> . WHILE expr LOOP expr POOL
    (36) expr -> . { lista_expr }
    (37) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (39) expr -> . LET OBJECTID : TYPEID IN expr
    (40) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (41) expr -> . CASE expr OF lista_asig ESAC
    (42) expr -> . NEW TYPEID
    (43) expr -> . ISVOID expr
    (44) expr -> . expr + expr
    (45) expr -> . expr - expr
    (46) expr -> . expr * expr
    (47) expr -> . expr / expr
    (48) expr -> . ~ expr
    (49) expr -> . expr < expr
    (50) expr -> . expr LE expr
    (51) expr -> . expr = expr
    (52) expr -> . NOT expr
    (53) expr -> . ( expr )
    (54) expr -> . OBJECTID
    (55) expr -> . INT_CONST
    (56) expr -> . STR_CONST
    (57) expr -> . BOOL_CONST
    (58) expr -> . - expr
    IF              shift and go to state 52
    OBJECTID        shift and go to state 50
    WHILE           shift and go to state 54
    {               shift and go to state 55
    LET             shift and go to state 56
    CASE            shift and go to state 57
    NEW             shift and go to state 58
    ISVOID          shift and go to state 59
    ~               shift and go to state 61
    NOT             shift and go to state 62
    (               shift and go to state 53
    INT_CONST       shift and go to state 63
    STR_CONST       shift and go to state 64
    BOOL_CONST      shift and go to state 65
    -               shift and go to state 60

    expr                           shift and go to state 141

state 128

    (25) expr -> expr . OBJECTID ( . expr optional_expressions )
    (26) expr -> expr . OBJECTID ( . expr )
    (27) expr -> expr . OBJECTID ( . )
    (22) expr -> . IF expr THEN expr ELSE expr error
    (23) expr -> . IF expr THEN error FI
    (24) expr -> . OBJECTID ASSIGN expr
    (25) expr -> . expr . OBJECTID ( expr optional_expressions )
    (26) expr -> . expr . OBJECTID ( expr )
    (27) expr -> . expr . OBJECTID ( )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (30) expr -> . expr @ TYPEID . OBJECTID ( )
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr optional_expressions )
    (33) expr -> . OBJECTID ( expr )
    (34) expr -> . IF expr THEN expr ELSE expr FI
    (35) expr -> . WHILE expr LOOP expr POOL
    (36) expr -> . { lista_expr }
    (37) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (39) expr -> . LET OBJECTID : TYPEID IN expr
    (40) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (41) expr -> . CASE expr OF lista_asig ESAC
    (42) expr -> . NEW TYPEID
    (43) expr -> . ISVOID expr
    (44) expr -> . expr + expr
    (45) expr -> . expr - expr
    (46) expr -> . expr * expr
    (47) expr -> . expr / expr
    (48) expr -> . ~ expr
    (49) expr -> . expr < expr
    (50) expr -> . expr LE expr
    (51) expr -> . expr = expr
    (52) expr -> . NOT expr
    (53) expr -> . ( expr )
    (54) expr -> . OBJECTID
    (55) expr -> . INT_CONST
    (56) expr -> . STR_CONST
    (57) expr -> . BOOL_CONST
    (58) expr -> . - expr
    )               shift and go to state 143
    IF              shift and go to state 52
    OBJECTID        shift and go to state 50
    WHILE           shift and go to state 54
    {               shift and go to state 55
    LET             shift and go to state 56
    CASE            shift and go to state 57
    NEW             shift and go to state 58
    ISVOID          shift and go to state 59
    ~               shift and go to state 61
    NOT             shift and go to state 62
    (               shift and go to state 53
    INT_CONST       shift and go to state 63
    STR_CONST       shift and go to state 64
    BOOL_CONST      shift and go to state 65
    -               shift and go to state 60

    expr                           shift and go to state 142

state 129

    (28) expr -> expr @ TYPEID . . OBJECTID ( expr optional_expressions )
    (29) expr -> expr @ TYPEID . . OBJECTID ( expr )
    (30) expr -> expr @ TYPEID . . OBJECTID ( )
    OBJECTID        shift and go to state 144


state 130

    (22) expr -> IF expr THEN expr . ELSE expr error
    (34) expr -> IF expr THEN expr . ELSE expr FI
    (25) expr -> expr . . OBJECTID ( expr optional_expressions )
    (26) expr -> expr . . OBJECTID ( expr )
    (27) expr -> expr . . OBJECTID ( )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (30) expr -> expr . @ TYPEID . OBJECTID ( )
    (44) expr -> expr . + expr
    (45) expr -> expr . - expr
    (46) expr -> expr . * expr
    (47) expr -> expr . / expr
    (49) expr -> expr . < expr
    (50) expr -> expr . LE expr
    (51) expr -> expr . = expr
    ELSE            shift and go to state 145
    .               shift and go to state 72
    @               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    *               shift and go to state 76
    /               shift and go to state 77
    <               shift and go to state 78
    LE              shift and go to state 79
    =               shift and go to state 80


state 131

    (23) expr -> IF expr THEN error . FI
    FI              shift and go to state 146


state 132

    (35) expr -> WHILE expr LOOP expr . POOL
    (25) expr -> expr . . OBJECTID ( expr optional_expressions )
    (26) expr -> expr . . OBJECTID ( expr )
    (27) expr -> expr . . OBJECTID ( )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (30) expr -> expr . @ TYPEID . OBJECTID ( )
    (44) expr -> expr . + expr
    (45) expr -> expr . - expr
    (46) expr -> expr . * expr
    (47) expr -> expr . / expr
    (49) expr -> expr . < expr
    (50) expr -> expr . LE expr
    (51) expr -> expr . = expr
    POOL            shift and go to state 147
    .               shift and go to state 72
    @               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    *               shift and go to state 76
    /               shift and go to state 77
    <               shift and go to state 78
    LE              shift and go to state 79
    =               shift and go to state 80


state 133

    (66) lista_expr -> lista_expr expr ; .
    }               reduce using rule 66 (lista_expr -> lista_expr expr ; .)
    IF              reduce using rule 66 (lista_expr -> lista_expr expr ; .)
    OBJECTID        reduce using rule 66 (lista_expr -> lista_expr expr ; .)
    WHILE           reduce using rule 66 (lista_expr -> lista_expr expr ; .)
    {               reduce using rule 66 (lista_expr -> lista_expr expr ; .)
    LET             reduce using rule 66 (lista_expr -> lista_expr expr ; .)
    CASE            reduce using rule 66 (lista_expr -> lista_expr expr ; .)
    NEW             reduce using rule 66 (lista_expr -> lista_expr expr ; .)
    ISVOID          reduce using rule 66 (lista_expr -> lista_expr expr ; .)
    ~               reduce using rule 66 (lista_expr -> lista_expr expr ; .)
    NOT             reduce using rule 66 (lista_expr -> lista_expr expr ; .)
    (               reduce using rule 66 (lista_expr -> lista_expr expr ; .)
    INT_CONST       reduce using rule 66 (lista_expr -> lista_expr expr ; .)
    STR_CONST       reduce using rule 66 (lista_expr -> lista_expr expr ; .)
    BOOL_CONST      reduce using rule 66 (lista_expr -> lista_expr expr ; .)
    -               reduce using rule 66 (lista_expr -> lista_expr expr ; .)


state 134

    (37) expr -> LET OBJECTID : TYPEID . optional_assigns IN expr
    (38) expr -> LET OBJECTID : TYPEID . ASSIGN expr optional_assigns IN expr
    (39) expr -> LET OBJECTID : TYPEID . IN expr
    (40) expr -> LET OBJECTID : TYPEID . ASSIGN expr IN expr
    (61) optional_assigns -> . , OBJECTID : TYPEID
    (62) optional_assigns -> . , OBJECTID : TYPEID ASSIGN expr
    (63) optional_assigns -> . , OBJECTID : TYPEID optional_assigns
    (64) optional_assigns -> . , OBJECTID : TYPEID ASSIGN expr optional_assigns
    ASSIGN          shift and go to state 150
    IN              shift and go to state 149
    ,               shift and go to state 151

    optional_assigns               shift and go to state 148

state 135

    (41) expr -> CASE expr OF lista_asig . ESAC
    ESAC            shift and go to state 152


state 136

    (59) lista_asig -> OBJECTID . : TYPEID DARROW expr ; lista_asig
    (60) lista_asig -> OBJECTID . : TYPEID DARROW expr ;
    :               shift and go to state 153


state 137

    (11) feature -> OBJECTID ( optional_formal ) : TYPEID { error } .
    ;               reduce using rule 11 (feature -> OBJECTID ( optional_formal ) : TYPEID { error } .)


state 138

    (14) feature -> OBJECTID ( formal ) : TYPEID { expr } .
    ;               reduce using rule 14 (feature -> OBJECTID ( formal ) : TYPEID { expr } .)


state 139

    (15) feature -> OBJECTID ( formal optional_formal ) : TYPEID { expr . }
    (25) expr -> expr . . OBJECTID ( expr optional_expressions )
    (26) expr -> expr . . OBJECTID ( expr )
    (27) expr -> expr . . OBJECTID ( )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (30) expr -> expr . @ TYPEID . OBJECTID ( )
    (44) expr -> expr . + expr
    (45) expr -> expr . - expr
    (46) expr -> expr . * expr
    (47) expr -> expr . / expr
    (49) expr -> expr . < expr
    (50) expr -> expr . LE expr
    (51) expr -> expr . = expr
    }               shift and go to state 154
    .               shift and go to state 72
    @               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    *               shift and go to state 76
    /               shift and go to state 77
    <               shift and go to state 78
    LE              shift and go to state 79
    =               shift and go to state 80


state 140

    (32) expr -> OBJECTID ( expr optional_expressions ) .
    .               reduce using rule 32 (expr -> OBJECTID ( expr optional_expressions ) .)
    @               reduce using rule 32 (expr -> OBJECTID ( expr optional_expressions ) .)
    +               reduce using rule 32 (expr -> OBJECTID ( expr optional_expressions ) .)
    -               reduce using rule 32 (expr -> OBJECTID ( expr optional_expressions ) .)
    *               reduce using rule 32 (expr -> OBJECTID ( expr optional_expressions ) .)
    /               reduce using rule 32 (expr -> OBJECTID ( expr optional_expressions ) .)
    <               reduce using rule 32 (expr -> OBJECTID ( expr optional_expressions ) .)
    LE              reduce using rule 32 (expr -> OBJECTID ( expr optional_expressions ) .)
    =               reduce using rule 32 (expr -> OBJECTID ( expr optional_expressions ) .)
    ;               reduce using rule 32 (expr -> OBJECTID ( expr optional_expressions ) .)
    THEN            reduce using rule 32 (expr -> OBJECTID ( expr optional_expressions ) .)
    )               reduce using rule 32 (expr -> OBJECTID ( expr optional_expressions ) .)
    LOOP            reduce using rule 32 (expr -> OBJECTID ( expr optional_expressions ) .)
    OF              reduce using rule 32 (expr -> OBJECTID ( expr optional_expressions ) .)
    }               reduce using rule 32 (expr -> OBJECTID ( expr optional_expressions ) .)
    ,               reduce using rule 32 (expr -> OBJECTID ( expr optional_expressions ) .)
    ELSE            reduce using rule 32 (expr -> OBJECTID ( expr optional_expressions ) .)
    POOL            reduce using rule 32 (expr -> OBJECTID ( expr optional_expressions ) .)
    error           reduce using rule 32 (expr -> OBJECTID ( expr optional_expressions ) .)
    FI              reduce using rule 32 (expr -> OBJECTID ( expr optional_expressions ) .)
    IN              reduce using rule 32 (expr -> OBJECTID ( expr optional_expressions ) .)


state 141

    (68) optional_expressions -> , expr . optional_expressions
    (69) optional_expressions -> , expr .
    (25) expr -> expr . . OBJECTID ( expr optional_expressions )
    (26) expr -> expr . . OBJECTID ( expr )
    (27) expr -> expr . . OBJECTID ( )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (30) expr -> expr . @ TYPEID . OBJECTID ( )
    (44) expr -> expr . + expr
    (45) expr -> expr . - expr
    (46) expr -> expr . * expr
    (47) expr -> expr . / expr
    (49) expr -> expr . < expr
    (50) expr -> expr . LE expr
    (51) expr -> expr . = expr
    (68) optional_expressions -> . , expr optional_expressions
    (69) optional_expressions -> . , expr
    )               reduce using rule 69 (optional_expressions -> , expr .)
    .               shift and go to state 72
    @               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    *               shift and go to state 76
    /               shift and go to state 77
    <               shift and go to state 78
    LE              shift and go to state 79
    =               shift and go to state 80
    ,               shift and go to state 127

    optional_expressions           shift and go to state 155

state 142

    (25) expr -> expr . OBJECTID ( expr . optional_expressions )
    (26) expr -> expr . OBJECTID ( expr . )
    (25) expr -> expr . . OBJECTID ( expr optional_expressions )
    (26) expr -> expr . . OBJECTID ( expr )
    (27) expr -> expr . . OBJECTID ( )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (30) expr -> expr . @ TYPEID . OBJECTID ( )
    (44) expr -> expr . + expr
    (45) expr -> expr . - expr
    (46) expr -> expr . * expr
    (47) expr -> expr . / expr
    (49) expr -> expr . < expr
    (50) expr -> expr . LE expr
    (51) expr -> expr . = expr
    (68) optional_expressions -> . , expr optional_expressions
    (69) optional_expressions -> . , expr
    )               shift and go to state 157
    .               shift and go to state 72
    @               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    *               shift and go to state 76
    /               shift and go to state 77
    <               shift and go to state 78
    LE              shift and go to state 79
    =               shift and go to state 80
    ,               shift and go to state 127

    optional_expressions           shift and go to state 156

state 143

    (27) expr -> expr . OBJECTID ( ) .
    .               reduce using rule 27 (expr -> expr . OBJECTID ( ) .)
    @               reduce using rule 27 (expr -> expr . OBJECTID ( ) .)
    +               reduce using rule 27 (expr -> expr . OBJECTID ( ) .)
    -               reduce using rule 27 (expr -> expr . OBJECTID ( ) .)
    *               reduce using rule 27 (expr -> expr . OBJECTID ( ) .)
    /               reduce using rule 27 (expr -> expr . OBJECTID ( ) .)
    <               reduce using rule 27 (expr -> expr . OBJECTID ( ) .)
    LE              reduce using rule 27 (expr -> expr . OBJECTID ( ) .)
    =               reduce using rule 27 (expr -> expr . OBJECTID ( ) .)
    ;               reduce using rule 27 (expr -> expr . OBJECTID ( ) .)
    THEN            reduce using rule 27 (expr -> expr . OBJECTID ( ) .)
    )               reduce using rule 27 (expr -> expr . OBJECTID ( ) .)
    LOOP            reduce using rule 27 (expr -> expr . OBJECTID ( ) .)
    OF              reduce using rule 27 (expr -> expr . OBJECTID ( ) .)
    }               reduce using rule 27 (expr -> expr . OBJECTID ( ) .)
    ,               reduce using rule 27 (expr -> expr . OBJECTID ( ) .)
    ELSE            reduce using rule 27 (expr -> expr . OBJECTID ( ) .)
    POOL            reduce using rule 27 (expr -> expr . OBJECTID ( ) .)
    error           reduce using rule 27 (expr -> expr . OBJECTID ( ) .)
    FI              reduce using rule 27 (expr -> expr . OBJECTID ( ) .)
    IN              reduce using rule 27 (expr -> expr . OBJECTID ( ) .)


state 144

    (28) expr -> expr @ TYPEID . OBJECTID . ( expr optional_expressions )
    (29) expr -> expr @ TYPEID . OBJECTID . ( expr )
    (30) expr -> expr @ TYPEID . OBJECTID . ( )
    (               shift and go to state 158


state 145

    (22) expr -> IF expr THEN expr ELSE . expr error
    (34) expr -> IF expr THEN expr ELSE . expr FI
    (22) expr -> . IF expr THEN expr ELSE expr error
    (23) expr -> . IF expr THEN error FI
    (24) expr -> . OBJECTID ASSIGN expr
    (25) expr -> . expr . OBJECTID ( expr optional_expressions )
    (26) expr -> . expr . OBJECTID ( expr )
    (27) expr -> . expr . OBJECTID ( )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (30) expr -> . expr @ TYPEID . OBJECTID ( )
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr optional_expressions )
    (33) expr -> . OBJECTID ( expr )
    (34) expr -> . IF expr THEN expr ELSE expr FI
    (35) expr -> . WHILE expr LOOP expr POOL
    (36) expr -> . { lista_expr }
    (37) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (39) expr -> . LET OBJECTID : TYPEID IN expr
    (40) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (41) expr -> . CASE expr OF lista_asig ESAC
    (42) expr -> . NEW TYPEID
    (43) expr -> . ISVOID expr
    (44) expr -> . expr + expr
    (45) expr -> . expr - expr
    (46) expr -> . expr * expr
    (47) expr -> . expr / expr
    (48) expr -> . ~ expr
    (49) expr -> . expr < expr
    (50) expr -> . expr LE expr
    (51) expr -> . expr = expr
    (52) expr -> . NOT expr
    (53) expr -> . ( expr )
    (54) expr -> . OBJECTID
    (55) expr -> . INT_CONST
    (56) expr -> . STR_CONST
    (57) expr -> . BOOL_CONST
    (58) expr -> . - expr
    IF              shift and go to state 52
    OBJECTID        shift and go to state 50
    WHILE           shift and go to state 54
    {               shift and go to state 55
    LET             shift and go to state 56
    CASE            shift and go to state 57
    NEW             shift and go to state 58
    ISVOID          shift and go to state 59
    ~               shift and go to state 61
    NOT             shift and go to state 62
    (               shift and go to state 53
    INT_CONST       shift and go to state 63
    STR_CONST       shift and go to state 64
    BOOL_CONST      shift and go to state 65
    -               shift and go to state 60

    expr                           shift and go to state 159

state 146

    (23) expr -> IF expr THEN error FI .
    .               reduce using rule 23 (expr -> IF expr THEN error FI .)
    @               reduce using rule 23 (expr -> IF expr THEN error FI .)
    +               reduce using rule 23 (expr -> IF expr THEN error FI .)
    -               reduce using rule 23 (expr -> IF expr THEN error FI .)
    *               reduce using rule 23 (expr -> IF expr THEN error FI .)
    /               reduce using rule 23 (expr -> IF expr THEN error FI .)
    <               reduce using rule 23 (expr -> IF expr THEN error FI .)
    LE              reduce using rule 23 (expr -> IF expr THEN error FI .)
    =               reduce using rule 23 (expr -> IF expr THEN error FI .)
    ;               reduce using rule 23 (expr -> IF expr THEN error FI .)
    THEN            reduce using rule 23 (expr -> IF expr THEN error FI .)
    )               reduce using rule 23 (expr -> IF expr THEN error FI .)
    LOOP            reduce using rule 23 (expr -> IF expr THEN error FI .)
    OF              reduce using rule 23 (expr -> IF expr THEN error FI .)
    }               reduce using rule 23 (expr -> IF expr THEN error FI .)
    ,               reduce using rule 23 (expr -> IF expr THEN error FI .)
    ELSE            reduce using rule 23 (expr -> IF expr THEN error FI .)
    POOL            reduce using rule 23 (expr -> IF expr THEN error FI .)
    error           reduce using rule 23 (expr -> IF expr THEN error FI .)
    FI              reduce using rule 23 (expr -> IF expr THEN error FI .)
    IN              reduce using rule 23 (expr -> IF expr THEN error FI .)


state 147

    (35) expr -> WHILE expr LOOP expr POOL .
    .               reduce using rule 35 (expr -> WHILE expr LOOP expr POOL .)
    @               reduce using rule 35 (expr -> WHILE expr LOOP expr POOL .)
    +               reduce using rule 35 (expr -> WHILE expr LOOP expr POOL .)
    -               reduce using rule 35 (expr -> WHILE expr LOOP expr POOL .)
    *               reduce using rule 35 (expr -> WHILE expr LOOP expr POOL .)
    /               reduce using rule 35 (expr -> WHILE expr LOOP expr POOL .)
    <               reduce using rule 35 (expr -> WHILE expr LOOP expr POOL .)
    LE              reduce using rule 35 (expr -> WHILE expr LOOP expr POOL .)
    =               reduce using rule 35 (expr -> WHILE expr LOOP expr POOL .)
    ;               reduce using rule 35 (expr -> WHILE expr LOOP expr POOL .)
    THEN            reduce using rule 35 (expr -> WHILE expr LOOP expr POOL .)
    )               reduce using rule 35 (expr -> WHILE expr LOOP expr POOL .)
    LOOP            reduce using rule 35 (expr -> WHILE expr LOOP expr POOL .)
    OF              reduce using rule 35 (expr -> WHILE expr LOOP expr POOL .)
    }               reduce using rule 35 (expr -> WHILE expr LOOP expr POOL .)
    ,               reduce using rule 35 (expr -> WHILE expr LOOP expr POOL .)
    ELSE            reduce using rule 35 (expr -> WHILE expr LOOP expr POOL .)
    POOL            reduce using rule 35 (expr -> WHILE expr LOOP expr POOL .)
    error           reduce using rule 35 (expr -> WHILE expr LOOP expr POOL .)
    FI              reduce using rule 35 (expr -> WHILE expr LOOP expr POOL .)
    IN              reduce using rule 35 (expr -> WHILE expr LOOP expr POOL .)


state 148

    (37) expr -> LET OBJECTID : TYPEID optional_assigns . IN expr
    IN              shift and go to state 160


state 149

    (39) expr -> LET OBJECTID : TYPEID IN . expr
    (22) expr -> . IF expr THEN expr ELSE expr error
    (23) expr -> . IF expr THEN error FI
    (24) expr -> . OBJECTID ASSIGN expr
    (25) expr -> . expr . OBJECTID ( expr optional_expressions )
    (26) expr -> . expr . OBJECTID ( expr )
    (27) expr -> . expr . OBJECTID ( )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (30) expr -> . expr @ TYPEID . OBJECTID ( )
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr optional_expressions )
    (33) expr -> . OBJECTID ( expr )
    (34) expr -> . IF expr THEN expr ELSE expr FI
    (35) expr -> . WHILE expr LOOP expr POOL
    (36) expr -> . { lista_expr }
    (37) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (39) expr -> . LET OBJECTID : TYPEID IN expr
    (40) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (41) expr -> . CASE expr OF lista_asig ESAC
    (42) expr -> . NEW TYPEID
    (43) expr -> . ISVOID expr
    (44) expr -> . expr + expr
    (45) expr -> . expr - expr
    (46) expr -> . expr * expr
    (47) expr -> . expr / expr
    (48) expr -> . ~ expr
    (49) expr -> . expr < expr
    (50) expr -> . expr LE expr
    (51) expr -> . expr = expr
    (52) expr -> . NOT expr
    (53) expr -> . ( expr )
    (54) expr -> . OBJECTID
    (55) expr -> . INT_CONST
    (56) expr -> . STR_CONST
    (57) expr -> . BOOL_CONST
    (58) expr -> . - expr
    IF              shift and go to state 52
    OBJECTID        shift and go to state 50
    WHILE           shift and go to state 54
    {               shift and go to state 55
    LET             shift and go to state 56
    CASE            shift and go to state 57
    NEW             shift and go to state 58
    ISVOID          shift and go to state 59
    ~               shift and go to state 61
    NOT             shift and go to state 62
    (               shift and go to state 53
    INT_CONST       shift and go to state 63
    STR_CONST       shift and go to state 64
    BOOL_CONST      shift and go to state 65
    -               shift and go to state 60

    expr                           shift and go to state 161

state 150

    (38) expr -> LET OBJECTID : TYPEID ASSIGN . expr optional_assigns IN expr
    (40) expr -> LET OBJECTID : TYPEID ASSIGN . expr IN expr
    (22) expr -> . IF expr THEN expr ELSE expr error
    (23) expr -> . IF expr THEN error FI
    (24) expr -> . OBJECTID ASSIGN expr
    (25) expr -> . expr . OBJECTID ( expr optional_expressions )
    (26) expr -> . expr . OBJECTID ( expr )
    (27) expr -> . expr . OBJECTID ( )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (30) expr -> . expr @ TYPEID . OBJECTID ( )
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr optional_expressions )
    (33) expr -> . OBJECTID ( expr )
    (34) expr -> . IF expr THEN expr ELSE expr FI
    (35) expr -> . WHILE expr LOOP expr POOL
    (36) expr -> . { lista_expr }
    (37) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (39) expr -> . LET OBJECTID : TYPEID IN expr
    (40) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (41) expr -> . CASE expr OF lista_asig ESAC
    (42) expr -> . NEW TYPEID
    (43) expr -> . ISVOID expr
    (44) expr -> . expr + expr
    (45) expr -> . expr - expr
    (46) expr -> . expr * expr
    (47) expr -> . expr / expr
    (48) expr -> . ~ expr
    (49) expr -> . expr < expr
    (50) expr -> . expr LE expr
    (51) expr -> . expr = expr
    (52) expr -> . NOT expr
    (53) expr -> . ( expr )
    (54) expr -> . OBJECTID
    (55) expr -> . INT_CONST
    (56) expr -> . STR_CONST
    (57) expr -> . BOOL_CONST
    (58) expr -> . - expr
    IF              shift and go to state 52
    OBJECTID        shift and go to state 50
    WHILE           shift and go to state 54
    {               shift and go to state 55
    LET             shift and go to state 56
    CASE            shift and go to state 57
    NEW             shift and go to state 58
    ISVOID          shift and go to state 59
    ~               shift and go to state 61
    NOT             shift and go to state 62
    (               shift and go to state 53
    INT_CONST       shift and go to state 63
    STR_CONST       shift and go to state 64
    BOOL_CONST      shift and go to state 65
    -               shift and go to state 60

    expr                           shift and go to state 162

state 151

    (61) optional_assigns -> , . OBJECTID : TYPEID
    (62) optional_assigns -> , . OBJECTID : TYPEID ASSIGN expr
    (63) optional_assigns -> , . OBJECTID : TYPEID optional_assigns
    (64) optional_assigns -> , . OBJECTID : TYPEID ASSIGN expr optional_assigns
    OBJECTID        shift and go to state 163


state 152

    (41) expr -> CASE expr OF lista_asig ESAC .
    .               reduce using rule 41 (expr -> CASE expr OF lista_asig ESAC .)
    @               reduce using rule 41 (expr -> CASE expr OF lista_asig ESAC .)
    +               reduce using rule 41 (expr -> CASE expr OF lista_asig ESAC .)
    -               reduce using rule 41 (expr -> CASE expr OF lista_asig ESAC .)
    *               reduce using rule 41 (expr -> CASE expr OF lista_asig ESAC .)
    /               reduce using rule 41 (expr -> CASE expr OF lista_asig ESAC .)
    <               reduce using rule 41 (expr -> CASE expr OF lista_asig ESAC .)
    LE              reduce using rule 41 (expr -> CASE expr OF lista_asig ESAC .)
    =               reduce using rule 41 (expr -> CASE expr OF lista_asig ESAC .)
    ;               reduce using rule 41 (expr -> CASE expr OF lista_asig ESAC .)
    THEN            reduce using rule 41 (expr -> CASE expr OF lista_asig ESAC .)
    )               reduce using rule 41 (expr -> CASE expr OF lista_asig ESAC .)
    LOOP            reduce using rule 41 (expr -> CASE expr OF lista_asig ESAC .)
    OF              reduce using rule 41 (expr -> CASE expr OF lista_asig ESAC .)
    }               reduce using rule 41 (expr -> CASE expr OF lista_asig ESAC .)
    ,               reduce using rule 41 (expr -> CASE expr OF lista_asig ESAC .)
    ELSE            reduce using rule 41 (expr -> CASE expr OF lista_asig ESAC .)
    POOL            reduce using rule 41 (expr -> CASE expr OF lista_asig ESAC .)
    error           reduce using rule 41 (expr -> CASE expr OF lista_asig ESAC .)
    FI              reduce using rule 41 (expr -> CASE expr OF lista_asig ESAC .)
    IN              reduce using rule 41 (expr -> CASE expr OF lista_asig ESAC .)


state 153

    (59) lista_asig -> OBJECTID : . TYPEID DARROW expr ; lista_asig
    (60) lista_asig -> OBJECTID : . TYPEID DARROW expr ;
    TYPEID          shift and go to state 164


state 154

    (15) feature -> OBJECTID ( formal optional_formal ) : TYPEID { expr } .
    ;               reduce using rule 15 (feature -> OBJECTID ( formal optional_formal ) : TYPEID { expr } .)


state 155

    (68) optional_expressions -> , expr optional_expressions .
    )               reduce using rule 68 (optional_expressions -> , expr optional_expressions .)


state 156

    (25) expr -> expr . OBJECTID ( expr optional_expressions . )
    )               shift and go to state 165


state 157

    (26) expr -> expr . OBJECTID ( expr ) .
    .               reduce using rule 26 (expr -> expr . OBJECTID ( expr ) .)
    @               reduce using rule 26 (expr -> expr . OBJECTID ( expr ) .)
    +               reduce using rule 26 (expr -> expr . OBJECTID ( expr ) .)
    -               reduce using rule 26 (expr -> expr . OBJECTID ( expr ) .)
    *               reduce using rule 26 (expr -> expr . OBJECTID ( expr ) .)
    /               reduce using rule 26 (expr -> expr . OBJECTID ( expr ) .)
    <               reduce using rule 26 (expr -> expr . OBJECTID ( expr ) .)
    LE              reduce using rule 26 (expr -> expr . OBJECTID ( expr ) .)
    =               reduce using rule 26 (expr -> expr . OBJECTID ( expr ) .)
    ;               reduce using rule 26 (expr -> expr . OBJECTID ( expr ) .)
    THEN            reduce using rule 26 (expr -> expr . OBJECTID ( expr ) .)
    )               reduce using rule 26 (expr -> expr . OBJECTID ( expr ) .)
    LOOP            reduce using rule 26 (expr -> expr . OBJECTID ( expr ) .)
    OF              reduce using rule 26 (expr -> expr . OBJECTID ( expr ) .)
    }               reduce using rule 26 (expr -> expr . OBJECTID ( expr ) .)
    ,               reduce using rule 26 (expr -> expr . OBJECTID ( expr ) .)
    ELSE            reduce using rule 26 (expr -> expr . OBJECTID ( expr ) .)
    POOL            reduce using rule 26 (expr -> expr . OBJECTID ( expr ) .)
    error           reduce using rule 26 (expr -> expr . OBJECTID ( expr ) .)
    FI              reduce using rule 26 (expr -> expr . OBJECTID ( expr ) .)
    IN              reduce using rule 26 (expr -> expr . OBJECTID ( expr ) .)


state 158

    (28) expr -> expr @ TYPEID . OBJECTID ( . expr optional_expressions )
    (29) expr -> expr @ TYPEID . OBJECTID ( . expr )
    (30) expr -> expr @ TYPEID . OBJECTID ( . )
    (22) expr -> . IF expr THEN expr ELSE expr error
    (23) expr -> . IF expr THEN error FI
    (24) expr -> . OBJECTID ASSIGN expr
    (25) expr -> . expr . OBJECTID ( expr optional_expressions )
    (26) expr -> . expr . OBJECTID ( expr )
    (27) expr -> . expr . OBJECTID ( )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (30) expr -> . expr @ TYPEID . OBJECTID ( )
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr optional_expressions )
    (33) expr -> . OBJECTID ( expr )
    (34) expr -> . IF expr THEN expr ELSE expr FI
    (35) expr -> . WHILE expr LOOP expr POOL
    (36) expr -> . { lista_expr }
    (37) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (39) expr -> . LET OBJECTID : TYPEID IN expr
    (40) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (41) expr -> . CASE expr OF lista_asig ESAC
    (42) expr -> . NEW TYPEID
    (43) expr -> . ISVOID expr
    (44) expr -> . expr + expr
    (45) expr -> . expr - expr
    (46) expr -> . expr * expr
    (47) expr -> . expr / expr
    (48) expr -> . ~ expr
    (49) expr -> . expr < expr
    (50) expr -> . expr LE expr
    (51) expr -> . expr = expr
    (52) expr -> . NOT expr
    (53) expr -> . ( expr )
    (54) expr -> . OBJECTID
    (55) expr -> . INT_CONST
    (56) expr -> . STR_CONST
    (57) expr -> . BOOL_CONST
    (58) expr -> . - expr
    )               shift and go to state 167
    IF              shift and go to state 52
    OBJECTID        shift and go to state 50
    WHILE           shift and go to state 54
    {               shift and go to state 55
    LET             shift and go to state 56
    CASE            shift and go to state 57
    NEW             shift and go to state 58
    ISVOID          shift and go to state 59
    ~               shift and go to state 61
    NOT             shift and go to state 62
    (               shift and go to state 53
    INT_CONST       shift and go to state 63
    STR_CONST       shift and go to state 64
    BOOL_CONST      shift and go to state 65
    -               shift and go to state 60

    expr                           shift and go to state 166

state 159

    (22) expr -> IF expr THEN expr ELSE expr . error
    (34) expr -> IF expr THEN expr ELSE expr . FI
    (25) expr -> expr . . OBJECTID ( expr optional_expressions )
    (26) expr -> expr . . OBJECTID ( expr )
    (27) expr -> expr . . OBJECTID ( )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (30) expr -> expr . @ TYPEID . OBJECTID ( )
    (44) expr -> expr . + expr
    (45) expr -> expr . - expr
    (46) expr -> expr . * expr
    (47) expr -> expr . / expr
    (49) expr -> expr . < expr
    (50) expr -> expr . LE expr
    (51) expr -> expr . = expr
    error           shift and go to state 168
    FI              shift and go to state 169
    .               shift and go to state 72
    @               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    *               shift and go to state 76
    /               shift and go to state 77
    <               shift and go to state 78
    LE              shift and go to state 79
    =               shift and go to state 80


state 160

    (37) expr -> LET OBJECTID : TYPEID optional_assigns IN . expr
    (22) expr -> . IF expr THEN expr ELSE expr error
    (23) expr -> . IF expr THEN error FI
    (24) expr -> . OBJECTID ASSIGN expr
    (25) expr -> . expr . OBJECTID ( expr optional_expressions )
    (26) expr -> . expr . OBJECTID ( expr )
    (27) expr -> . expr . OBJECTID ( )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (30) expr -> . expr @ TYPEID . OBJECTID ( )
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr optional_expressions )
    (33) expr -> . OBJECTID ( expr )
    (34) expr -> . IF expr THEN expr ELSE expr FI
    (35) expr -> . WHILE expr LOOP expr POOL
    (36) expr -> . { lista_expr }
    (37) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (39) expr -> . LET OBJECTID : TYPEID IN expr
    (40) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (41) expr -> . CASE expr OF lista_asig ESAC
    (42) expr -> . NEW TYPEID
    (43) expr -> . ISVOID expr
    (44) expr -> . expr + expr
    (45) expr -> . expr - expr
    (46) expr -> . expr * expr
    (47) expr -> . expr / expr
    (48) expr -> . ~ expr
    (49) expr -> . expr < expr
    (50) expr -> . expr LE expr
    (51) expr -> . expr = expr
    (52) expr -> . NOT expr
    (53) expr -> . ( expr )
    (54) expr -> . OBJECTID
    (55) expr -> . INT_CONST
    (56) expr -> . STR_CONST
    (57) expr -> . BOOL_CONST
    (58) expr -> . - expr
    IF              shift and go to state 52
    OBJECTID        shift and go to state 50
    WHILE           shift and go to state 54
    {               shift and go to state 55
    LET             shift and go to state 56
    CASE            shift and go to state 57
    NEW             shift and go to state 58
    ISVOID          shift and go to state 59
    ~               shift and go to state 61
    NOT             shift and go to state 62
    (               shift and go to state 53
    INT_CONST       shift and go to state 63
    STR_CONST       shift and go to state 64
    BOOL_CONST      shift and go to state 65
    -               shift and go to state 60

    expr                           shift and go to state 170

state 161

    (39) expr -> LET OBJECTID : TYPEID IN expr .
    (25) expr -> expr . . OBJECTID ( expr optional_expressions )
    (26) expr -> expr . . OBJECTID ( expr )
    (27) expr -> expr . . OBJECTID ( )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (30) expr -> expr . @ TYPEID . OBJECTID ( )
    (44) expr -> expr . + expr
    (45) expr -> expr . - expr
    (46) expr -> expr . * expr
    (47) expr -> expr . / expr
    (49) expr -> expr . < expr
    (50) expr -> expr . LE expr
    (51) expr -> expr . = expr
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for @ resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for = resolved as shift
    ;               reduce using rule 39 (expr -> LET OBJECTID : TYPEID IN expr .)
    THEN            reduce using rule 39 (expr -> LET OBJECTID : TYPEID IN expr .)
    )               reduce using rule 39 (expr -> LET OBJECTID : TYPEID IN expr .)
    LOOP            reduce using rule 39 (expr -> LET OBJECTID : TYPEID IN expr .)
    OF              reduce using rule 39 (expr -> LET OBJECTID : TYPEID IN expr .)
    }               reduce using rule 39 (expr -> LET OBJECTID : TYPEID IN expr .)
    ,               reduce using rule 39 (expr -> LET OBJECTID : TYPEID IN expr .)
    ELSE            reduce using rule 39 (expr -> LET OBJECTID : TYPEID IN expr .)
    POOL            reduce using rule 39 (expr -> LET OBJECTID : TYPEID IN expr .)
    error           reduce using rule 39 (expr -> LET OBJECTID : TYPEID IN expr .)
    FI              reduce using rule 39 (expr -> LET OBJECTID : TYPEID IN expr .)
    IN              reduce using rule 39 (expr -> LET OBJECTID : TYPEID IN expr .)
    .               shift and go to state 72
    @               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    *               shift and go to state 76
    /               shift and go to state 77
    <               shift and go to state 78
    LE              shift and go to state 79
    =               shift and go to state 80


state 162

    (38) expr -> LET OBJECTID : TYPEID ASSIGN expr . optional_assigns IN expr
    (40) expr -> LET OBJECTID : TYPEID ASSIGN expr . IN expr
    (25) expr -> expr . . OBJECTID ( expr optional_expressions )
    (26) expr -> expr . . OBJECTID ( expr )
    (27) expr -> expr . . OBJECTID ( )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (30) expr -> expr . @ TYPEID . OBJECTID ( )
    (44) expr -> expr . + expr
    (45) expr -> expr . - expr
    (46) expr -> expr . * expr
    (47) expr -> expr . / expr
    (49) expr -> expr . < expr
    (50) expr -> expr . LE expr
    (51) expr -> expr . = expr
    (61) optional_assigns -> . , OBJECTID : TYPEID
    (62) optional_assigns -> . , OBJECTID : TYPEID ASSIGN expr
    (63) optional_assigns -> . , OBJECTID : TYPEID optional_assigns
    (64) optional_assigns -> . , OBJECTID : TYPEID ASSIGN expr optional_assigns
    IN              shift and go to state 172
    .               shift and go to state 72
    @               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    *               shift and go to state 76
    /               shift and go to state 77
    <               shift and go to state 78
    LE              shift and go to state 79
    =               shift and go to state 80
    ,               shift and go to state 151

    optional_assigns               shift and go to state 171

state 163

    (61) optional_assigns -> , OBJECTID . : TYPEID
    (62) optional_assigns -> , OBJECTID . : TYPEID ASSIGN expr
    (63) optional_assigns -> , OBJECTID . : TYPEID optional_assigns
    (64) optional_assigns -> , OBJECTID . : TYPEID ASSIGN expr optional_assigns
    :               shift and go to state 173


state 164

    (59) lista_asig -> OBJECTID : TYPEID . DARROW expr ; lista_asig
    (60) lista_asig -> OBJECTID : TYPEID . DARROW expr ;
    DARROW          shift and go to state 174


state 165

    (25) expr -> expr . OBJECTID ( expr optional_expressions ) .
    .               reduce using rule 25 (expr -> expr . OBJECTID ( expr optional_expressions ) .)
    @               reduce using rule 25 (expr -> expr . OBJECTID ( expr optional_expressions ) .)
    +               reduce using rule 25 (expr -> expr . OBJECTID ( expr optional_expressions ) .)
    -               reduce using rule 25 (expr -> expr . OBJECTID ( expr optional_expressions ) .)
    *               reduce using rule 25 (expr -> expr . OBJECTID ( expr optional_expressions ) .)
    /               reduce using rule 25 (expr -> expr . OBJECTID ( expr optional_expressions ) .)
    <               reduce using rule 25 (expr -> expr . OBJECTID ( expr optional_expressions ) .)
    LE              reduce using rule 25 (expr -> expr . OBJECTID ( expr optional_expressions ) .)
    =               reduce using rule 25 (expr -> expr . OBJECTID ( expr optional_expressions ) .)
    ;               reduce using rule 25 (expr -> expr . OBJECTID ( expr optional_expressions ) .)
    THEN            reduce using rule 25 (expr -> expr . OBJECTID ( expr optional_expressions ) .)
    )               reduce using rule 25 (expr -> expr . OBJECTID ( expr optional_expressions ) .)
    LOOP            reduce using rule 25 (expr -> expr . OBJECTID ( expr optional_expressions ) .)
    OF              reduce using rule 25 (expr -> expr . OBJECTID ( expr optional_expressions ) .)
    }               reduce using rule 25 (expr -> expr . OBJECTID ( expr optional_expressions ) .)
    ,               reduce using rule 25 (expr -> expr . OBJECTID ( expr optional_expressions ) .)
    ELSE            reduce using rule 25 (expr -> expr . OBJECTID ( expr optional_expressions ) .)
    POOL            reduce using rule 25 (expr -> expr . OBJECTID ( expr optional_expressions ) .)
    error           reduce using rule 25 (expr -> expr . OBJECTID ( expr optional_expressions ) .)
    FI              reduce using rule 25 (expr -> expr . OBJECTID ( expr optional_expressions ) .)
    IN              reduce using rule 25 (expr -> expr . OBJECTID ( expr optional_expressions ) .)


state 166

    (28) expr -> expr @ TYPEID . OBJECTID ( expr . optional_expressions )
    (29) expr -> expr @ TYPEID . OBJECTID ( expr . )
    (25) expr -> expr . . OBJECTID ( expr optional_expressions )
    (26) expr -> expr . . OBJECTID ( expr )
    (27) expr -> expr . . OBJECTID ( )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (30) expr -> expr . @ TYPEID . OBJECTID ( )
    (44) expr -> expr . + expr
    (45) expr -> expr . - expr
    (46) expr -> expr . * expr
    (47) expr -> expr . / expr
    (49) expr -> expr . < expr
    (50) expr -> expr . LE expr
    (51) expr -> expr . = expr
    (68) optional_expressions -> . , expr optional_expressions
    (69) optional_expressions -> . , expr
    )               shift and go to state 176
    .               shift and go to state 72
    @               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    *               shift and go to state 76
    /               shift and go to state 77
    <               shift and go to state 78
    LE              shift and go to state 79
    =               shift and go to state 80
    ,               shift and go to state 127

    optional_expressions           shift and go to state 175

state 167

    (30) expr -> expr @ TYPEID . OBJECTID ( ) .
    .               reduce using rule 30 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    @               reduce using rule 30 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    +               reduce using rule 30 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    -               reduce using rule 30 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    *               reduce using rule 30 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    /               reduce using rule 30 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    <               reduce using rule 30 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    LE              reduce using rule 30 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    =               reduce using rule 30 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    ;               reduce using rule 30 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    THEN            reduce using rule 30 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    )               reduce using rule 30 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    LOOP            reduce using rule 30 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    OF              reduce using rule 30 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    }               reduce using rule 30 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    ,               reduce using rule 30 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    ELSE            reduce using rule 30 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    POOL            reduce using rule 30 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    error           reduce using rule 30 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    FI              reduce using rule 30 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    IN              reduce using rule 30 (expr -> expr @ TYPEID . OBJECTID ( ) .)


state 168

    (22) expr -> IF expr THEN expr ELSE expr error .
    .               reduce using rule 22 (expr -> IF expr THEN expr ELSE expr error .)
    @               reduce using rule 22 (expr -> IF expr THEN expr ELSE expr error .)
    +               reduce using rule 22 (expr -> IF expr THEN expr ELSE expr error .)
    -               reduce using rule 22 (expr -> IF expr THEN expr ELSE expr error .)
    *               reduce using rule 22 (expr -> IF expr THEN expr ELSE expr error .)
    /               reduce using rule 22 (expr -> IF expr THEN expr ELSE expr error .)
    <               reduce using rule 22 (expr -> IF expr THEN expr ELSE expr error .)
    LE              reduce using rule 22 (expr -> IF expr THEN expr ELSE expr error .)
    =               reduce using rule 22 (expr -> IF expr THEN expr ELSE expr error .)
    ;               reduce using rule 22 (expr -> IF expr THEN expr ELSE expr error .)
    THEN            reduce using rule 22 (expr -> IF expr THEN expr ELSE expr error .)
    )               reduce using rule 22 (expr -> IF expr THEN expr ELSE expr error .)
    LOOP            reduce using rule 22 (expr -> IF expr THEN expr ELSE expr error .)
    OF              reduce using rule 22 (expr -> IF expr THEN expr ELSE expr error .)
    }               reduce using rule 22 (expr -> IF expr THEN expr ELSE expr error .)
    ,               reduce using rule 22 (expr -> IF expr THEN expr ELSE expr error .)
    ELSE            reduce using rule 22 (expr -> IF expr THEN expr ELSE expr error .)
    POOL            reduce using rule 22 (expr -> IF expr THEN expr ELSE expr error .)
    error           reduce using rule 22 (expr -> IF expr THEN expr ELSE expr error .)
    FI              reduce using rule 22 (expr -> IF expr THEN expr ELSE expr error .)
    IN              reduce using rule 22 (expr -> IF expr THEN expr ELSE expr error .)


state 169

    (34) expr -> IF expr THEN expr ELSE expr FI .
    .               reduce using rule 34 (expr -> IF expr THEN expr ELSE expr FI .)
    @               reduce using rule 34 (expr -> IF expr THEN expr ELSE expr FI .)
    +               reduce using rule 34 (expr -> IF expr THEN expr ELSE expr FI .)
    -               reduce using rule 34 (expr -> IF expr THEN expr ELSE expr FI .)
    *               reduce using rule 34 (expr -> IF expr THEN expr ELSE expr FI .)
    /               reduce using rule 34 (expr -> IF expr THEN expr ELSE expr FI .)
    <               reduce using rule 34 (expr -> IF expr THEN expr ELSE expr FI .)
    LE              reduce using rule 34 (expr -> IF expr THEN expr ELSE expr FI .)
    =               reduce using rule 34 (expr -> IF expr THEN expr ELSE expr FI .)
    ;               reduce using rule 34 (expr -> IF expr THEN expr ELSE expr FI .)
    THEN            reduce using rule 34 (expr -> IF expr THEN expr ELSE expr FI .)
    )               reduce using rule 34 (expr -> IF expr THEN expr ELSE expr FI .)
    LOOP            reduce using rule 34 (expr -> IF expr THEN expr ELSE expr FI .)
    OF              reduce using rule 34 (expr -> IF expr THEN expr ELSE expr FI .)
    }               reduce using rule 34 (expr -> IF expr THEN expr ELSE expr FI .)
    ,               reduce using rule 34 (expr -> IF expr THEN expr ELSE expr FI .)
    ELSE            reduce using rule 34 (expr -> IF expr THEN expr ELSE expr FI .)
    POOL            reduce using rule 34 (expr -> IF expr THEN expr ELSE expr FI .)
    error           reduce using rule 34 (expr -> IF expr THEN expr ELSE expr FI .)
    FI              reduce using rule 34 (expr -> IF expr THEN expr ELSE expr FI .)
    IN              reduce using rule 34 (expr -> IF expr THEN expr ELSE expr FI .)


state 170

    (37) expr -> LET OBJECTID : TYPEID optional_assigns IN expr .
    (25) expr -> expr . . OBJECTID ( expr optional_expressions )
    (26) expr -> expr . . OBJECTID ( expr )
    (27) expr -> expr . . OBJECTID ( )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (30) expr -> expr . @ TYPEID . OBJECTID ( )
    (44) expr -> expr . + expr
    (45) expr -> expr . - expr
    (46) expr -> expr . * expr
    (47) expr -> expr . / expr
    (49) expr -> expr . < expr
    (50) expr -> expr . LE expr
    (51) expr -> expr . = expr
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for @ resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for = resolved as shift
    ;               reduce using rule 37 (expr -> LET OBJECTID : TYPEID optional_assigns IN expr .)
    THEN            reduce using rule 37 (expr -> LET OBJECTID : TYPEID optional_assigns IN expr .)
    )               reduce using rule 37 (expr -> LET OBJECTID : TYPEID optional_assigns IN expr .)
    LOOP            reduce using rule 37 (expr -> LET OBJECTID : TYPEID optional_assigns IN expr .)
    OF              reduce using rule 37 (expr -> LET OBJECTID : TYPEID optional_assigns IN expr .)
    }               reduce using rule 37 (expr -> LET OBJECTID : TYPEID optional_assigns IN expr .)
    ,               reduce using rule 37 (expr -> LET OBJECTID : TYPEID optional_assigns IN expr .)
    ELSE            reduce using rule 37 (expr -> LET OBJECTID : TYPEID optional_assigns IN expr .)
    POOL            reduce using rule 37 (expr -> LET OBJECTID : TYPEID optional_assigns IN expr .)
    error           reduce using rule 37 (expr -> LET OBJECTID : TYPEID optional_assigns IN expr .)
    FI              reduce using rule 37 (expr -> LET OBJECTID : TYPEID optional_assigns IN expr .)
    IN              reduce using rule 37 (expr -> LET OBJECTID : TYPEID optional_assigns IN expr .)
    .               shift and go to state 72
    @               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    *               shift and go to state 76
    /               shift and go to state 77
    <               shift and go to state 78
    LE              shift and go to state 79
    =               shift and go to state 80


state 171

    (38) expr -> LET OBJECTID : TYPEID ASSIGN expr optional_assigns . IN expr
    IN              shift and go to state 177


state 172

    (40) expr -> LET OBJECTID : TYPEID ASSIGN expr IN . expr
    (22) expr -> . IF expr THEN expr ELSE expr error
    (23) expr -> . IF expr THEN error FI
    (24) expr -> . OBJECTID ASSIGN expr
    (25) expr -> . expr . OBJECTID ( expr optional_expressions )
    (26) expr -> . expr . OBJECTID ( expr )
    (27) expr -> . expr . OBJECTID ( )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (30) expr -> . expr @ TYPEID . OBJECTID ( )
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr optional_expressions )
    (33) expr -> . OBJECTID ( expr )
    (34) expr -> . IF expr THEN expr ELSE expr FI
    (35) expr -> . WHILE expr LOOP expr POOL
    (36) expr -> . { lista_expr }
    (37) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (39) expr -> . LET OBJECTID : TYPEID IN expr
    (40) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (41) expr -> . CASE expr OF lista_asig ESAC
    (42) expr -> . NEW TYPEID
    (43) expr -> . ISVOID expr
    (44) expr -> . expr + expr
    (45) expr -> . expr - expr
    (46) expr -> . expr * expr
    (47) expr -> . expr / expr
    (48) expr -> . ~ expr
    (49) expr -> . expr < expr
    (50) expr -> . expr LE expr
    (51) expr -> . expr = expr
    (52) expr -> . NOT expr
    (53) expr -> . ( expr )
    (54) expr -> . OBJECTID
    (55) expr -> . INT_CONST
    (56) expr -> . STR_CONST
    (57) expr -> . BOOL_CONST
    (58) expr -> . - expr
    IF              shift and go to state 52
    OBJECTID        shift and go to state 50
    WHILE           shift and go to state 54
    {               shift and go to state 55
    LET             shift and go to state 56
    CASE            shift and go to state 57
    NEW             shift and go to state 58
    ISVOID          shift and go to state 59
    ~               shift and go to state 61
    NOT             shift and go to state 62
    (               shift and go to state 53
    INT_CONST       shift and go to state 63
    STR_CONST       shift and go to state 64
    BOOL_CONST      shift and go to state 65
    -               shift and go to state 60

    expr                           shift and go to state 178

state 173

    (61) optional_assigns -> , OBJECTID : . TYPEID
    (62) optional_assigns -> , OBJECTID : . TYPEID ASSIGN expr
    (63) optional_assigns -> , OBJECTID : . TYPEID optional_assigns
    (64) optional_assigns -> , OBJECTID : . TYPEID ASSIGN expr optional_assigns
    TYPEID          shift and go to state 179


state 174

    (59) lista_asig -> OBJECTID : TYPEID DARROW . expr ; lista_asig
    (60) lista_asig -> OBJECTID : TYPEID DARROW . expr ;
    (22) expr -> . IF expr THEN expr ELSE expr error
    (23) expr -> . IF expr THEN error FI
    (24) expr -> . OBJECTID ASSIGN expr
    (25) expr -> . expr . OBJECTID ( expr optional_expressions )
    (26) expr -> . expr . OBJECTID ( expr )
    (27) expr -> . expr . OBJECTID ( )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (30) expr -> . expr @ TYPEID . OBJECTID ( )
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr optional_expressions )
    (33) expr -> . OBJECTID ( expr )
    (34) expr -> . IF expr THEN expr ELSE expr FI
    (35) expr -> . WHILE expr LOOP expr POOL
    (36) expr -> . { lista_expr }
    (37) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (39) expr -> . LET OBJECTID : TYPEID IN expr
    (40) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (41) expr -> . CASE expr OF lista_asig ESAC
    (42) expr -> . NEW TYPEID
    (43) expr -> . ISVOID expr
    (44) expr -> . expr + expr
    (45) expr -> . expr - expr
    (46) expr -> . expr * expr
    (47) expr -> . expr / expr
    (48) expr -> . ~ expr
    (49) expr -> . expr < expr
    (50) expr -> . expr LE expr
    (51) expr -> . expr = expr
    (52) expr -> . NOT expr
    (53) expr -> . ( expr )
    (54) expr -> . OBJECTID
    (55) expr -> . INT_CONST
    (56) expr -> . STR_CONST
    (57) expr -> . BOOL_CONST
    (58) expr -> . - expr
    IF              shift and go to state 52
    OBJECTID        shift and go to state 50
    WHILE           shift and go to state 54
    {               shift and go to state 55
    LET             shift and go to state 56
    CASE            shift and go to state 57
    NEW             shift and go to state 58
    ISVOID          shift and go to state 59
    ~               shift and go to state 61
    NOT             shift and go to state 62
    (               shift and go to state 53
    INT_CONST       shift and go to state 63
    STR_CONST       shift and go to state 64
    BOOL_CONST      shift and go to state 65
    -               shift and go to state 60

    expr                           shift and go to state 180

state 175

    (28) expr -> expr @ TYPEID . OBJECTID ( expr optional_expressions . )
    )               shift and go to state 181


state 176

    (29) expr -> expr @ TYPEID . OBJECTID ( expr ) .
    .               reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    @               reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    +               reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    -               reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    *               reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    /               reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    <               reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    LE              reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    =               reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    ;               reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    THEN            reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    )               reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    LOOP            reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    OF              reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    }               reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    ,               reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    ELSE            reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    POOL            reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    error           reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    FI              reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    IN              reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)


state 177

    (38) expr -> LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN . expr
    (22) expr -> . IF expr THEN expr ELSE expr error
    (23) expr -> . IF expr THEN error FI
    (24) expr -> . OBJECTID ASSIGN expr
    (25) expr -> . expr . OBJECTID ( expr optional_expressions )
    (26) expr -> . expr . OBJECTID ( expr )
    (27) expr -> . expr . OBJECTID ( )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (30) expr -> . expr @ TYPEID . OBJECTID ( )
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr optional_expressions )
    (33) expr -> . OBJECTID ( expr )
    (34) expr -> . IF expr THEN expr ELSE expr FI
    (35) expr -> . WHILE expr LOOP expr POOL
    (36) expr -> . { lista_expr }
    (37) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (39) expr -> . LET OBJECTID : TYPEID IN expr
    (40) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (41) expr -> . CASE expr OF lista_asig ESAC
    (42) expr -> . NEW TYPEID
    (43) expr -> . ISVOID expr
    (44) expr -> . expr + expr
    (45) expr -> . expr - expr
    (46) expr -> . expr * expr
    (47) expr -> . expr / expr
    (48) expr -> . ~ expr
    (49) expr -> . expr < expr
    (50) expr -> . expr LE expr
    (51) expr -> . expr = expr
    (52) expr -> . NOT expr
    (53) expr -> . ( expr )
    (54) expr -> . OBJECTID
    (55) expr -> . INT_CONST
    (56) expr -> . STR_CONST
    (57) expr -> . BOOL_CONST
    (58) expr -> . - expr
    IF              shift and go to state 52
    OBJECTID        shift and go to state 50
    WHILE           shift and go to state 54
    {               shift and go to state 55
    LET             shift and go to state 56
    CASE            shift and go to state 57
    NEW             shift and go to state 58
    ISVOID          shift and go to state 59
    ~               shift and go to state 61
    NOT             shift and go to state 62
    (               shift and go to state 53
    INT_CONST       shift and go to state 63
    STR_CONST       shift and go to state 64
    BOOL_CONST      shift and go to state 65
    -               shift and go to state 60

    expr                           shift and go to state 182

state 178

    (40) expr -> LET OBJECTID : TYPEID ASSIGN expr IN expr .
    (25) expr -> expr . . OBJECTID ( expr optional_expressions )
    (26) expr -> expr . . OBJECTID ( expr )
    (27) expr -> expr . . OBJECTID ( )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (30) expr -> expr . @ TYPEID . OBJECTID ( )
    (44) expr -> expr . + expr
    (45) expr -> expr . - expr
    (46) expr -> expr . * expr
    (47) expr -> expr . / expr
    (49) expr -> expr . < expr
    (50) expr -> expr . LE expr
    (51) expr -> expr . = expr
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for @ resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for = resolved as shift
    ;               reduce using rule 40 (expr -> LET OBJECTID : TYPEID ASSIGN expr IN expr .)
    THEN            reduce using rule 40 (expr -> LET OBJECTID : TYPEID ASSIGN expr IN expr .)
    )               reduce using rule 40 (expr -> LET OBJECTID : TYPEID ASSIGN expr IN expr .)
    LOOP            reduce using rule 40 (expr -> LET OBJECTID : TYPEID ASSIGN expr IN expr .)
    OF              reduce using rule 40 (expr -> LET OBJECTID : TYPEID ASSIGN expr IN expr .)
    }               reduce using rule 40 (expr -> LET OBJECTID : TYPEID ASSIGN expr IN expr .)
    ,               reduce using rule 40 (expr -> LET OBJECTID : TYPEID ASSIGN expr IN expr .)
    ELSE            reduce using rule 40 (expr -> LET OBJECTID : TYPEID ASSIGN expr IN expr .)
    POOL            reduce using rule 40 (expr -> LET OBJECTID : TYPEID ASSIGN expr IN expr .)
    error           reduce using rule 40 (expr -> LET OBJECTID : TYPEID ASSIGN expr IN expr .)
    FI              reduce using rule 40 (expr -> LET OBJECTID : TYPEID ASSIGN expr IN expr .)
    IN              reduce using rule 40 (expr -> LET OBJECTID : TYPEID ASSIGN expr IN expr .)
    .               shift and go to state 72
    @               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    *               shift and go to state 76
    /               shift and go to state 77
    <               shift and go to state 78
    LE              shift and go to state 79
    =               shift and go to state 80


state 179

    (61) optional_assigns -> , OBJECTID : TYPEID .
    (62) optional_assigns -> , OBJECTID : TYPEID . ASSIGN expr
    (63) optional_assigns -> , OBJECTID : TYPEID . optional_assigns
    (64) optional_assigns -> , OBJECTID : TYPEID . ASSIGN expr optional_assigns
    (61) optional_assigns -> . , OBJECTID : TYPEID
    (62) optional_assigns -> . , OBJECTID : TYPEID ASSIGN expr
    (63) optional_assigns -> . , OBJECTID : TYPEID optional_assigns
    (64) optional_assigns -> . , OBJECTID : TYPEID ASSIGN expr optional_assigns
    IN              reduce using rule 61 (optional_assigns -> , OBJECTID : TYPEID .)
    ASSIGN          shift and go to state 183
    ,               shift and go to state 151

    optional_assigns               shift and go to state 184

state 180

    (59) lista_asig -> OBJECTID : TYPEID DARROW expr . ; lista_asig
    (60) lista_asig -> OBJECTID : TYPEID DARROW expr . ;
    (25) expr -> expr . . OBJECTID ( expr optional_expressions )
    (26) expr -> expr . . OBJECTID ( expr )
    (27) expr -> expr . . OBJECTID ( )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (30) expr -> expr . @ TYPEID . OBJECTID ( )
    (44) expr -> expr . + expr
    (45) expr -> expr . - expr
    (46) expr -> expr . * expr
    (47) expr -> expr . / expr
    (49) expr -> expr . < expr
    (50) expr -> expr . LE expr
    (51) expr -> expr . = expr
    ;               shift and go to state 185
    .               shift and go to state 72
    @               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    *               shift and go to state 76
    /               shift and go to state 77
    <               shift and go to state 78
    LE              shift and go to state 79
    =               shift and go to state 80


state 181

    (28) expr -> expr @ TYPEID . OBJECTID ( expr optional_expressions ) .
    .               reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr optional_expressions ) .)
    @               reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr optional_expressions ) .)
    +               reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr optional_expressions ) .)
    -               reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr optional_expressions ) .)
    *               reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr optional_expressions ) .)
    /               reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr optional_expressions ) .)
    <               reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr optional_expressions ) .)
    LE              reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr optional_expressions ) .)
    =               reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr optional_expressions ) .)
    ;               reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr optional_expressions ) .)
    THEN            reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr optional_expressions ) .)
    )               reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr optional_expressions ) .)
    LOOP            reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr optional_expressions ) .)
    OF              reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr optional_expressions ) .)
    }               reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr optional_expressions ) .)
    ,               reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr optional_expressions ) .)
    ELSE            reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr optional_expressions ) .)
    POOL            reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr optional_expressions ) .)
    error           reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr optional_expressions ) .)
    FI              reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr optional_expressions ) .)
    IN              reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr optional_expressions ) .)


state 182

    (38) expr -> LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr .
    (25) expr -> expr . . OBJECTID ( expr optional_expressions )
    (26) expr -> expr . . OBJECTID ( expr )
    (27) expr -> expr . . OBJECTID ( )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (30) expr -> expr . @ TYPEID . OBJECTID ( )
    (44) expr -> expr . + expr
    (45) expr -> expr . - expr
    (46) expr -> expr . * expr
    (47) expr -> expr . / expr
    (49) expr -> expr . < expr
    (50) expr -> expr . LE expr
    (51) expr -> expr . = expr
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for @ resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for = resolved as shift
    ;               reduce using rule 38 (expr -> LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr .)
    THEN            reduce using rule 38 (expr -> LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr .)
    )               reduce using rule 38 (expr -> LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr .)
    LOOP            reduce using rule 38 (expr -> LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr .)
    OF              reduce using rule 38 (expr -> LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr .)
    }               reduce using rule 38 (expr -> LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr .)
    ,               reduce using rule 38 (expr -> LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr .)
    ELSE            reduce using rule 38 (expr -> LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr .)
    POOL            reduce using rule 38 (expr -> LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr .)
    error           reduce using rule 38 (expr -> LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr .)
    FI              reduce using rule 38 (expr -> LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr .)
    IN              reduce using rule 38 (expr -> LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr .)
    .               shift and go to state 72
    @               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    *               shift and go to state 76
    /               shift and go to state 77
    <               shift and go to state 78
    LE              shift and go to state 79
    =               shift and go to state 80


state 183

    (62) optional_assigns -> , OBJECTID : TYPEID ASSIGN . expr
    (64) optional_assigns -> , OBJECTID : TYPEID ASSIGN . expr optional_assigns
    (22) expr -> . IF expr THEN expr ELSE expr error
    (23) expr -> . IF expr THEN error FI
    (24) expr -> . OBJECTID ASSIGN expr
    (25) expr -> . expr . OBJECTID ( expr optional_expressions )
    (26) expr -> . expr . OBJECTID ( expr )
    (27) expr -> . expr . OBJECTID ( )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (30) expr -> . expr @ TYPEID . OBJECTID ( )
    (31) expr -> . OBJECTID ( )
    (32) expr -> . OBJECTID ( expr optional_expressions )
    (33) expr -> . OBJECTID ( expr )
    (34) expr -> . IF expr THEN expr ELSE expr FI
    (35) expr -> . WHILE expr LOOP expr POOL
    (36) expr -> . { lista_expr }
    (37) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (39) expr -> . LET OBJECTID : TYPEID IN expr
    (40) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (41) expr -> . CASE expr OF lista_asig ESAC
    (42) expr -> . NEW TYPEID
    (43) expr -> . ISVOID expr
    (44) expr -> . expr + expr
    (45) expr -> . expr - expr
    (46) expr -> . expr * expr
    (47) expr -> . expr / expr
    (48) expr -> . ~ expr
    (49) expr -> . expr < expr
    (50) expr -> . expr LE expr
    (51) expr -> . expr = expr
    (52) expr -> . NOT expr
    (53) expr -> . ( expr )
    (54) expr -> . OBJECTID
    (55) expr -> . INT_CONST
    (56) expr -> . STR_CONST
    (57) expr -> . BOOL_CONST
    (58) expr -> . - expr
    IF              shift and go to state 52
    OBJECTID        shift and go to state 50
    WHILE           shift and go to state 54
    {               shift and go to state 55
    LET             shift and go to state 56
    CASE            shift and go to state 57
    NEW             shift and go to state 58
    ISVOID          shift and go to state 59
    ~               shift and go to state 61
    NOT             shift and go to state 62
    (               shift and go to state 53
    INT_CONST       shift and go to state 63
    STR_CONST       shift and go to state 64
    BOOL_CONST      shift and go to state 65
    -               shift and go to state 60

    expr                           shift and go to state 186

state 184

    (63) optional_assigns -> , OBJECTID : TYPEID optional_assigns .
    IN              reduce using rule 63 (optional_assigns -> , OBJECTID : TYPEID optional_assigns .)


state 185

    (59) lista_asig -> OBJECTID : TYPEID DARROW expr ; . lista_asig
    (60) lista_asig -> OBJECTID : TYPEID DARROW expr ; .
    (59) lista_asig -> . OBJECTID : TYPEID DARROW expr ; lista_asig
    (60) lista_asig -> . OBJECTID : TYPEID DARROW expr ;
    ESAC            reduce using rule 60 (lista_asig -> OBJECTID : TYPEID DARROW expr ; .)
    OBJECTID        shift and go to state 136

    lista_asig                     shift and go to state 187

state 186

    (62) optional_assigns -> , OBJECTID : TYPEID ASSIGN expr .
    (64) optional_assigns -> , OBJECTID : TYPEID ASSIGN expr . optional_assigns
    (25) expr -> expr . . OBJECTID ( expr optional_expressions )
    (26) expr -> expr . . OBJECTID ( expr )
    (27) expr -> expr . . OBJECTID ( )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (29) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (30) expr -> expr . @ TYPEID . OBJECTID ( )
    (44) expr -> expr . + expr
    (45) expr -> expr . - expr
    (46) expr -> expr . * expr
    (47) expr -> expr . / expr
    (49) expr -> expr . < expr
    (50) expr -> expr . LE expr
    (51) expr -> expr . = expr
    (61) optional_assigns -> . , OBJECTID : TYPEID
    (62) optional_assigns -> . , OBJECTID : TYPEID ASSIGN expr
    (63) optional_assigns -> . , OBJECTID : TYPEID optional_assigns
    (64) optional_assigns -> . , OBJECTID : TYPEID ASSIGN expr optional_assigns
    IN              reduce using rule 62 (optional_assigns -> , OBJECTID : TYPEID ASSIGN expr .)
    .               shift and go to state 72
    @               shift and go to state 73
    +               shift and go to state 74
    -               shift and go to state 75
    *               shift and go to state 76
    /               shift and go to state 77
    <               shift and go to state 78
    LE              shift and go to state 79
    =               shift and go to state 80
    ,               shift and go to state 151

    optional_assigns               shift and go to state 188

state 187

    (59) lista_asig -> OBJECTID : TYPEID DARROW expr ; lista_asig .
    ESAC            reduce using rule 59 (lista_asig -> OBJECTID : TYPEID DARROW expr ; lista_asig .)


state 188

    (64) optional_assigns -> , OBJECTID : TYPEID ASSIGN expr optional_assigns .
    IN              reduce using rule 64 (optional_assigns -> , OBJECTID : TYPEID ASSIGN expr optional_assigns .)


Conflicts:

shift/reduce conflict for . in state 161 resolved as shift
shift/reduce conflict for @ in state 161 resolved as shift
shift/reduce conflict for + in state 161 resolved as shift
shift/reduce conflict for - in state 161 resolved as shift
shift/reduce conflict for * in state 161 resolved as shift
shift/reduce conflict for / in state 161 resolved as shift
shift/reduce conflict for < in state 161 resolved as shift
shift/reduce conflict for LE in state 161 resolved as shift
shift/reduce conflict for = in state 161 resolved as shift
shift/reduce conflict for . in state 170 resolved as shift
shift/reduce conflict for @ in state 170 resolved as shift
shift/reduce conflict for + in state 170 resolved as shift
shift/reduce conflict for - in state 170 resolved as shift
shift/reduce conflict for * in state 170 resolved as shift
shift/reduce conflict for / in state 170 resolved as shift
shift/reduce conflict for < in state 170 resolved as shift
shift/reduce conflict for LE in state 170 resolved as shift
shift/reduce conflict for = in state 170 resolved as shift
shift/reduce conflict for . in state 178 resolved as shift
shift/reduce conflict for @ in state 178 resolved as shift
shift/reduce conflict for + in state 178 resolved as shift
shift/reduce conflict for - in state 178 resolved as shift
shift/reduce conflict for * in state 178 resolved as shift
shift/reduce conflict for / in state 178 resolved as shift
shift/reduce conflict for < in state 178 resolved as shift
shift/reduce conflict for LE in state 178 resolved as shift
shift/reduce conflict for = in state 178 resolved as shift
shift/reduce conflict for . in state 182 resolved as shift
shift/reduce conflict for @ in state 182 resolved as shift
shift/reduce conflict for + in state 182 resolved as shift
shift/reduce conflict for - in state 182 resolved as shift
shift/reduce conflict for * in state 182 resolved as shift
shift/reduce conflict for / in state 182 resolved as shift
shift/reduce conflict for < in state 182 resolved as shift
shift/reduce conflict for LE in state 182 resolved as shift
shift/reduce conflict for = in state 182 resolved as shift