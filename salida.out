Grammar:

Rule 0     S' -> programa
Rule 1     programa -> clase ;
Rule 2     programa -> programa clase ;
Rule 3     clase -> CLASS TYPEID { error }
Rule 4     clase -> CLASS TYPEID { }
Rule 5     clase -> CLASS TYPEID { optional_feature }
Rule 6     clase -> CLASS TYPEID INHERITS TYPEID { }
Rule 7     clase -> CLASS TYPEID INHERITS TYPEID { optional_feature }
Rule 8     optional_feature -> error ;
Rule 9     optional_feature -> optional_feature feature ;
Rule 10    optional_feature -> feature ;
Rule 11    feature -> OBJECTID ( optional_formal ) : TYPEID { error }
Rule 12    feature -> OBJECTID ( ) : TYPEID { error }
Rule 13    feature -> OBJECTID ( ) : TYPEID { expr }
Rule 14    feature -> OBJECTID ( formal ) : TYPEID { expr }
Rule 15    feature -> OBJECTID ( formal optional_formal ) : TYPEID { expr }
Rule 16    feature -> OBJECTID : TYPEID
Rule 17    feature -> OBJECTID : TYPEID ASSIGN expr  [precedence=right, level=1]
Rule 18    optional_formal -> , formal optional_formal
Rule 19    optional_formal -> , formal
Rule 20    formal -> OBJECTID : TYPEID
Rule 21    expr -> IF expr THEN expr ELSE expr error
Rule 22    expr -> IF expr THEN error FI
Rule 23    expr -> OBJECTID ASSIGN expr  [precedence=right, level=1]
Rule 24    expr -> expr . OBJECTID ( expr optional_expressions )
Rule 25    expr -> expr . OBJECTID ( expr )
Rule 26    expr -> expr . OBJECTID ( )
Rule 27    expr -> expr @ TYPEID . OBJECTID ( expr optional_expressions )
Rule 28    expr -> expr @ TYPEID . OBJECTID ( expr )
Rule 29    expr -> expr @ TYPEID . OBJECTID ( )
Rule 30    expr -> OBJECTID ( )
Rule 31    expr -> OBJECTID ( expr optional_expressions )
Rule 32    expr -> OBJECTID ( expr )
Rule 33    expr -> IF expr THEN expr ELSE expr FI
Rule 34    expr -> WHILE expr LOOP expr POOL
Rule 35    expr -> { lista_expr }
Rule 36    expr -> LET OBJECTID : TYPEID optional_assigns IN expr
Rule 37    expr -> LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
Rule 38    expr -> LET OBJECTID : TYPEID IN expr
Rule 39    expr -> LET OBJECTID : TYPEID ASSIGN expr IN expr
Rule 40    expr -> CASE expr OF lista_asig ESAC
Rule 41    expr -> NEW TYPEID
Rule 42    expr -> ISVOID expr  [precedence=left, level=7]
Rule 43    expr -> expr + expr  [precedence=left, level=4]
Rule 44    expr -> expr - expr  [precedence=left, level=4]
Rule 45    expr -> expr * expr  [precedence=left, level=6]
Rule 46    expr -> expr / expr  [precedence=left, level=6]
Rule 47    expr -> ~ expr  [precedence=right, level=5]
Rule 48    expr -> expr < expr  [precedence=nonassoc, level=3]
Rule 49    expr -> expr LE expr  [precedence=nonassoc, level=3]
Rule 50    expr -> expr = expr  [precedence=nonassoc, level=3]
Rule 51    expr -> NOT expr  [precedence=right, level=2]
Rule 52    expr -> ( expr )
Rule 53    expr -> OBJECTID
Rule 54    expr -> INT_CONST
Rule 55    expr -> STR_CONST
Rule 56    expr -> BOOL_CONST
Rule 57    expr -> - expr  [precedence=right, level=8]
Rule 58    lista_asig -> OBJECTID : TYPEID DARROW expr ; lista_asig
Rule 59    lista_asig -> OBJECTID : TYPEID DARROW expr ;
Rule 60    optional_assigns -> , OBJECTID : TYPEID
Rule 61    optional_assigns -> , OBJECTID : TYPEID ASSIGN expr  [precedence=right, level=1]
Rule 62    optional_assigns -> , OBJECTID : TYPEID optional_assigns
Rule 63    optional_assigns -> , OBJECTID : TYPEID ASSIGN expr optional_assigns  [precedence=right, level=1]
Rule 64    lista_expr -> error ;
Rule 65    lista_expr -> lista_expr expr ;
Rule 66    lista_expr -> expr ;
Rule 67    optional_expressions -> , expr optional_expressions
Rule 68    optional_expressions -> , expr

Unused terminals:

    NUMBER

Terminals, with rules where they appear:

(                    : 11 12 13 14 15 24 25 26 27 28 29 30 31 32 52
)                    : 11 12 13 14 15 24 25 26 27 28 29 30 31 32 52
*                    : 45
+                    : 43
,                    : 18 19 60 61 62 63 67 68
-                    : 44 57
.                    : 24 25 26 27 28 29
/                    : 46
:                    : 11 12 13 14 15 16 17 20 36 37 38 39 58 59 60 61 62 63
;                    : 1 2 8 9 10 58 59 64 65 66
<                    : 48
=                    : 50
@                    : 27 28 29
ASSIGN               : 17 23 37 39 61 63
BOOL_CONST           : 56
CASE                 : 40
CLASS                : 3 4 5 6 7
DARROW               : 58 59
ELSE                 : 21 33
ESAC                 : 40
FI                   : 22 33
IF                   : 21 22 33
IN                   : 36 37 38 39
INHERITS             : 6 7
INT_CONST            : 54
ISVOID               : 42
LE                   : 49
LET                  : 36 37 38 39
LOOP                 : 34
NEW                  : 41
NOT                  : 51
NUMBER               : 
OBJECTID             : 11 12 13 14 15 16 17 20 23 24 25 26 27 28 29 30 31 32 36 37 38 39 53 58 59 60 61 62 63
OF                   : 40
POOL                 : 34
STR_CONST            : 55
THEN                 : 21 22 33
TYPEID               : 3 4 5 6 6 7 7 11 12 13 14 15 16 17 20 27 28 29 36 37 38 39 41 58 59 60 61 62 63
WHILE                : 34
error                : 3 8 11 12 21 22 64
{                    : 3 4 5 6 7 11 12 13 14 15 35
}                    : 3 4 5 6 7 11 12 13 14 15 35
~                    : 47

Nonterminals, with rules where they appear:

clase                : 1 2
expr                 : 13 14 15 17 21 21 21 22 23 24 24 25 25 26 27 27 28 28 29 31 32 33 33 33 34 34 36 37 37 38 39 39 40 42 43 43 44 44 45 45 46 46 47 48 48 49 49 50 50 51 52 57 58 59 61 63 65 66 67 68
feature              : 9 10
formal               : 14 15 18 19
lista_asig           : 40 58
lista_expr           : 35 65
optional_assigns     : 36 37 62 63
optional_expressions : 24 27 31 67
optional_feature     : 5 7 9
optional_formal      : 11 15 18
programa             : 2 0


state 0

    (0) S' -> . programa
    (1) programa -> . clase ;
    (2) programa -> . programa clase ;
    (3) clase -> . CLASS TYPEID { error }
    (4) clase -> . CLASS TYPEID { }
    (5) clase -> . CLASS TYPEID { optional_feature }
    (6) clase -> . CLASS TYPEID INHERITS TYPEID { }
    (7) clase -> . CLASS TYPEID INHERITS TYPEID { optional_feature }
    CLASS           shift and go to state 3

    programa                       shift and go to state 1
    clase                          shift and go to state 2

state 1

    (0) S' -> programa .
    (2) programa -> programa . clase ;
    (3) clase -> . CLASS TYPEID { error }
    (4) clase -> . CLASS TYPEID { }
    (5) clase -> . CLASS TYPEID { optional_feature }
    (6) clase -> . CLASS TYPEID INHERITS TYPEID { }
    (7) clase -> . CLASS TYPEID INHERITS TYPEID { optional_feature }
    CLASS           shift and go to state 3

    clase                          shift and go to state 4

state 2

    (1) programa -> clase . ;
    ;               shift and go to state 5


state 3

    (3) clase -> CLASS . TYPEID { error }
    (4) clase -> CLASS . TYPEID { }
    (5) clase -> CLASS . TYPEID { optional_feature }
    (6) clase -> CLASS . TYPEID INHERITS TYPEID { }
    (7) clase -> CLASS . TYPEID INHERITS TYPEID { optional_feature }
    TYPEID          shift and go to state 6


state 4

    (2) programa -> programa clase . ;
    ;               shift and go to state 7


state 5

    (1) programa -> clase ; .
    CLASS           reduce using rule 1 (programa -> clase ; .)
    $end            reduce using rule 1 (programa -> clase ; .)


state 6

    (3) clase -> CLASS TYPEID . { error }
    (4) clase -> CLASS TYPEID . { }
    (5) clase -> CLASS TYPEID . { optional_feature }
    (6) clase -> CLASS TYPEID . INHERITS TYPEID { }
    (7) clase -> CLASS TYPEID . INHERITS TYPEID { optional_feature }
    {               shift and go to state 8
    INHERITS        shift and go to state 9


state 7

    (2) programa -> programa clase ; .
    CLASS           reduce using rule 2 (programa -> programa clase ; .)
    $end            reduce using rule 2 (programa -> programa clase ; .)


state 8

    (3) clase -> CLASS TYPEID { . error }
    (4) clase -> CLASS TYPEID { . }
    (5) clase -> CLASS TYPEID { . optional_feature }
    (8) optional_feature -> . error ;
    (9) optional_feature -> . optional_feature feature ;
    (10) optional_feature -> . feature ;
    (11) feature -> . OBJECTID ( optional_formal ) : TYPEID { error }
    (12) feature -> . OBJECTID ( ) : TYPEID { error }
    (13) feature -> . OBJECTID ( ) : TYPEID { expr }
    (14) feature -> . OBJECTID ( formal ) : TYPEID { expr }
    (15) feature -> . OBJECTID ( formal optional_formal ) : TYPEID { expr }
    (16) feature -> . OBJECTID : TYPEID
    (17) feature -> . OBJECTID : TYPEID ASSIGN expr
    error           shift and go to state 10
    }               shift and go to state 11
    OBJECTID        shift and go to state 14

    optional_feature               shift and go to state 12
    feature                        shift and go to state 13

state 9

    (6) clase -> CLASS TYPEID INHERITS . TYPEID { }
    (7) clase -> CLASS TYPEID INHERITS . TYPEID { optional_feature }
    TYPEID          shift and go to state 15


state 10

    (3) clase -> CLASS TYPEID { error . }
    (8) optional_feature -> error . ;
    }               shift and go to state 16
    ;               shift and go to state 17


state 11

    (4) clase -> CLASS TYPEID { } .
    ;               reduce using rule 4 (clase -> CLASS TYPEID { } .)


state 12

    (5) clase -> CLASS TYPEID { optional_feature . }
    (9) optional_feature -> optional_feature . feature ;
    (11) feature -> . OBJECTID ( optional_formal ) : TYPEID { error }
    (12) feature -> . OBJECTID ( ) : TYPEID { error }
    (13) feature -> . OBJECTID ( ) : TYPEID { expr }
    (14) feature -> . OBJECTID ( formal ) : TYPEID { expr }
    (15) feature -> . OBJECTID ( formal optional_formal ) : TYPEID { expr }
    (16) feature -> . OBJECTID : TYPEID
    (17) feature -> . OBJECTID : TYPEID ASSIGN expr
    }               shift and go to state 18
    OBJECTID        shift and go to state 14

    feature                        shift and go to state 19

state 13

    (10) optional_feature -> feature . ;
    ;               shift and go to state 20


state 14

    (11) feature -> OBJECTID . ( optional_formal ) : TYPEID { error }
    (12) feature -> OBJECTID . ( ) : TYPEID { error }
    (13) feature -> OBJECTID . ( ) : TYPEID { expr }
    (14) feature -> OBJECTID . ( formal ) : TYPEID { expr }
    (15) feature -> OBJECTID . ( formal optional_formal ) : TYPEID { expr }
    (16) feature -> OBJECTID . : TYPEID
    (17) feature -> OBJECTID . : TYPEID ASSIGN expr
    (               shift and go to state 21
    :               shift and go to state 22


state 15

    (6) clase -> CLASS TYPEID INHERITS TYPEID . { }
    (7) clase -> CLASS TYPEID INHERITS TYPEID . { optional_feature }
    {               shift and go to state 23


state 16

    (3) clase -> CLASS TYPEID { error } .
    ;               reduce using rule 3 (clase -> CLASS TYPEID { error } .)


state 17

    (8) optional_feature -> error ; .
    }               reduce using rule 8 (optional_feature -> error ; .)
    OBJECTID        reduce using rule 8 (optional_feature -> error ; .)


state 18

    (5) clase -> CLASS TYPEID { optional_feature } .
    ;               reduce using rule 5 (clase -> CLASS TYPEID { optional_feature } .)


state 19

    (9) optional_feature -> optional_feature feature . ;
    ;               shift and go to state 24


state 20

    (10) optional_feature -> feature ; .
    }               reduce using rule 10 (optional_feature -> feature ; .)
    OBJECTID        reduce using rule 10 (optional_feature -> feature ; .)


state 21

    (11) feature -> OBJECTID ( . optional_formal ) : TYPEID { error }
    (12) feature -> OBJECTID ( . ) : TYPEID { error }
    (13) feature -> OBJECTID ( . ) : TYPEID { expr }
    (14) feature -> OBJECTID ( . formal ) : TYPEID { expr }
    (15) feature -> OBJECTID ( . formal optional_formal ) : TYPEID { expr }
    (18) optional_formal -> . , formal optional_formal
    (19) optional_formal -> . , formal
    (20) formal -> . OBJECTID : TYPEID
    )               shift and go to state 27
    ,               shift and go to state 29
    OBJECTID        shift and go to state 25

    optional_formal                shift and go to state 26
    formal                         shift and go to state 28

state 22

    (16) feature -> OBJECTID : . TYPEID
    (17) feature -> OBJECTID : . TYPEID ASSIGN expr
    TYPEID          shift and go to state 30


state 23

    (6) clase -> CLASS TYPEID INHERITS TYPEID { . }
    (7) clase -> CLASS TYPEID INHERITS TYPEID { . optional_feature }
    (8) optional_feature -> . error ;
    (9) optional_feature -> . optional_feature feature ;
    (10) optional_feature -> . feature ;
    (11) feature -> . OBJECTID ( optional_formal ) : TYPEID { error }
    (12) feature -> . OBJECTID ( ) : TYPEID { error }
    (13) feature -> . OBJECTID ( ) : TYPEID { expr }
    (14) feature -> . OBJECTID ( formal ) : TYPEID { expr }
    (15) feature -> . OBJECTID ( formal optional_formal ) : TYPEID { expr }
    (16) feature -> . OBJECTID : TYPEID
    (17) feature -> . OBJECTID : TYPEID ASSIGN expr
    }               shift and go to state 31
    error           shift and go to state 33
    OBJECTID        shift and go to state 14

    optional_feature               shift and go to state 32
    feature                        shift and go to state 13

state 24

    (9) optional_feature -> optional_feature feature ; .
    }               reduce using rule 9 (optional_feature -> optional_feature feature ; .)
    OBJECTID        reduce using rule 9 (optional_feature -> optional_feature feature ; .)


state 25

    (20) formal -> OBJECTID . : TYPEID
    :               shift and go to state 34


state 26

    (11) feature -> OBJECTID ( optional_formal . ) : TYPEID { error }
    )               shift and go to state 35


state 27

    (12) feature -> OBJECTID ( ) . : TYPEID { error }
    (13) feature -> OBJECTID ( ) . : TYPEID { expr }
    :               shift and go to state 36


state 28

    (14) feature -> OBJECTID ( formal . ) : TYPEID { expr }
    (15) feature -> OBJECTID ( formal . optional_formal ) : TYPEID { expr }
    (18) optional_formal -> . , formal optional_formal
    (19) optional_formal -> . , formal
    )               shift and go to state 37
    ,               shift and go to state 29

    optional_formal                shift and go to state 38

state 29

    (18) optional_formal -> , . formal optional_formal
    (19) optional_formal -> , . formal
    (20) formal -> . OBJECTID : TYPEID
    OBJECTID        shift and go to state 25

    formal                         shift and go to state 39

state 30

    (16) feature -> OBJECTID : TYPEID .
    (17) feature -> OBJECTID : TYPEID . ASSIGN expr
    ;               reduce using rule 16 (feature -> OBJECTID : TYPEID .)
    ASSIGN          shift and go to state 40


state 31

    (6) clase -> CLASS TYPEID INHERITS TYPEID { } .
    ;               reduce using rule 6 (clase -> CLASS TYPEID INHERITS TYPEID { } .)


state 32

    (7) clase -> CLASS TYPEID INHERITS TYPEID { optional_feature . }
    (9) optional_feature -> optional_feature . feature ;
    (11) feature -> . OBJECTID ( optional_formal ) : TYPEID { error }
    (12) feature -> . OBJECTID ( ) : TYPEID { error }
    (13) feature -> . OBJECTID ( ) : TYPEID { expr }
    (14) feature -> . OBJECTID ( formal ) : TYPEID { expr }
    (15) feature -> . OBJECTID ( formal optional_formal ) : TYPEID { expr }
    (16) feature -> . OBJECTID : TYPEID
    (17) feature -> . OBJECTID : TYPEID ASSIGN expr
    }               shift and go to state 41
    OBJECTID        shift and go to state 14

    feature                        shift and go to state 19

state 33

    (8) optional_feature -> error . ;
    ;               shift and go to state 17


state 34

    (20) formal -> OBJECTID : . TYPEID
    TYPEID          shift and go to state 42


state 35

    (11) feature -> OBJECTID ( optional_formal ) . : TYPEID { error }
    :               shift and go to state 43


state 36

    (12) feature -> OBJECTID ( ) : . TYPEID { error }
    (13) feature -> OBJECTID ( ) : . TYPEID { expr }
    TYPEID          shift and go to state 44


state 37

    (14) feature -> OBJECTID ( formal ) . : TYPEID { expr }
    :               shift and go to state 45


state 38

    (15) feature -> OBJECTID ( formal optional_formal . ) : TYPEID { expr }
    )               shift and go to state 46


state 39

    (18) optional_formal -> , formal . optional_formal
    (19) optional_formal -> , formal .
    (18) optional_formal -> . , formal optional_formal
    (19) optional_formal -> . , formal
    )               reduce using rule 19 (optional_formal -> , formal .)
    ,               shift and go to state 29

    optional_formal                shift and go to state 47

state 40

    (17) feature -> OBJECTID : TYPEID ASSIGN . expr
    (21) expr -> . IF expr THEN expr ELSE expr error
    (22) expr -> . IF expr THEN error FI
    (23) expr -> . OBJECTID ASSIGN expr
    (24) expr -> . expr . OBJECTID ( expr optional_expressions )
    (25) expr -> . expr . OBJECTID ( expr )
    (26) expr -> . expr . OBJECTID ( )
    (27) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . OBJECTID ( )
    (31) expr -> . OBJECTID ( expr optional_expressions )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . IF expr THEN expr ELSE expr FI
    (34) expr -> . WHILE expr LOOP expr POOL
    (35) expr -> . { lista_expr }
    (36) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (37) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID IN expr
    (39) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (40) expr -> . CASE expr OF lista_asig ESAC
    (41) expr -> . NEW TYPEID
    (42) expr -> . ISVOID expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . ~ expr
    (48) expr -> . expr < expr
    (49) expr -> . expr LE expr
    (50) expr -> . expr = expr
    (51) expr -> . NOT expr
    (52) expr -> . ( expr )
    (53) expr -> . OBJECTID
    (54) expr -> . INT_CONST
    (55) expr -> . STR_CONST
    (56) expr -> . BOOL_CONST
    (57) expr -> . - expr
    IF              shift and go to state 50
    OBJECTID        shift and go to state 48
    WHILE           shift and go to state 52
    {               shift and go to state 53
    LET             shift and go to state 54
    CASE            shift and go to state 55
    NEW             shift and go to state 56
    ISVOID          shift and go to state 57
    ~               shift and go to state 59
    NOT             shift and go to state 60
    (               shift and go to state 51
    INT_CONST       shift and go to state 61
    STR_CONST       shift and go to state 62
    BOOL_CONST      shift and go to state 63
    -               shift and go to state 58

    expr                           shift and go to state 49

state 41

    (7) clase -> CLASS TYPEID INHERITS TYPEID { optional_feature } .
    ;               reduce using rule 7 (clase -> CLASS TYPEID INHERITS TYPEID { optional_feature } .)


state 42

    (20) formal -> OBJECTID : TYPEID .
    )               reduce using rule 20 (formal -> OBJECTID : TYPEID .)
    ,               reduce using rule 20 (formal -> OBJECTID : TYPEID .)


state 43

    (11) feature -> OBJECTID ( optional_formal ) : . TYPEID { error }
    TYPEID          shift and go to state 64


state 44

    (12) feature -> OBJECTID ( ) : TYPEID . { error }
    (13) feature -> OBJECTID ( ) : TYPEID . { expr }
    {               shift and go to state 65


state 45

    (14) feature -> OBJECTID ( formal ) : . TYPEID { expr }
    TYPEID          shift and go to state 66


state 46

    (15) feature -> OBJECTID ( formal optional_formal ) . : TYPEID { expr }
    :               shift and go to state 67


state 47

    (18) optional_formal -> , formal optional_formal .
    )               reduce using rule 18 (optional_formal -> , formal optional_formal .)


state 48

    (23) expr -> OBJECTID . ASSIGN expr
    (30) expr -> OBJECTID . ( )
    (31) expr -> OBJECTID . ( expr optional_expressions )
    (32) expr -> OBJECTID . ( expr )
    (53) expr -> OBJECTID .
    ASSIGN          shift and go to state 68
    (               shift and go to state 69
    .               reduce using rule 53 (expr -> OBJECTID .)
    @               reduce using rule 53 (expr -> OBJECTID .)
    +               reduce using rule 53 (expr -> OBJECTID .)
    -               reduce using rule 53 (expr -> OBJECTID .)
    *               reduce using rule 53 (expr -> OBJECTID .)
    /               reduce using rule 53 (expr -> OBJECTID .)
    <               reduce using rule 53 (expr -> OBJECTID .)
    LE              reduce using rule 53 (expr -> OBJECTID .)
    =               reduce using rule 53 (expr -> OBJECTID .)
    ;               reduce using rule 53 (expr -> OBJECTID .)
    THEN            reduce using rule 53 (expr -> OBJECTID .)
    )               reduce using rule 53 (expr -> OBJECTID .)
    LOOP            reduce using rule 53 (expr -> OBJECTID .)
    OF              reduce using rule 53 (expr -> OBJECTID .)
    }               reduce using rule 53 (expr -> OBJECTID .)
    ,               reduce using rule 53 (expr -> OBJECTID .)
    ELSE            reduce using rule 53 (expr -> OBJECTID .)
    POOL            reduce using rule 53 (expr -> OBJECTID .)
    error           reduce using rule 53 (expr -> OBJECTID .)
    FI              reduce using rule 53 (expr -> OBJECTID .)
    IN              reduce using rule 53 (expr -> OBJECTID .)


state 49

    (17) feature -> OBJECTID : TYPEID ASSIGN expr .
    (24) expr -> expr . . OBJECTID ( expr optional_expressions )
    (25) expr -> expr . . OBJECTID ( expr )
    (26) expr -> expr . . OBJECTID ( )
    (27) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (48) expr -> expr . < expr
    (49) expr -> expr . LE expr
    (50) expr -> expr . = expr
    ;               reduce using rule 17 (feature -> OBJECTID : TYPEID ASSIGN expr .)
    .               shift and go to state 70
    @               shift and go to state 71
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    <               shift and go to state 76
    LE              shift and go to state 77
    =               shift and go to state 78


state 50

    (21) expr -> IF . expr THEN expr ELSE expr error
    (22) expr -> IF . expr THEN error FI
    (33) expr -> IF . expr THEN expr ELSE expr FI
    (21) expr -> . IF expr THEN expr ELSE expr error
    (22) expr -> . IF expr THEN error FI
    (23) expr -> . OBJECTID ASSIGN expr
    (24) expr -> . expr . OBJECTID ( expr optional_expressions )
    (25) expr -> . expr . OBJECTID ( expr )
    (26) expr -> . expr . OBJECTID ( )
    (27) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . OBJECTID ( )
    (31) expr -> . OBJECTID ( expr optional_expressions )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . IF expr THEN expr ELSE expr FI
    (34) expr -> . WHILE expr LOOP expr POOL
    (35) expr -> . { lista_expr }
    (36) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (37) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID IN expr
    (39) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (40) expr -> . CASE expr OF lista_asig ESAC
    (41) expr -> . NEW TYPEID
    (42) expr -> . ISVOID expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . ~ expr
    (48) expr -> . expr < expr
    (49) expr -> . expr LE expr
    (50) expr -> . expr = expr
    (51) expr -> . NOT expr
    (52) expr -> . ( expr )
    (53) expr -> . OBJECTID
    (54) expr -> . INT_CONST
    (55) expr -> . STR_CONST
    (56) expr -> . BOOL_CONST
    (57) expr -> . - expr
    IF              shift and go to state 50
    OBJECTID        shift and go to state 48
    WHILE           shift and go to state 52
    {               shift and go to state 53
    LET             shift and go to state 54
    CASE            shift and go to state 55
    NEW             shift and go to state 56
    ISVOID          shift and go to state 57
    ~               shift and go to state 59
    NOT             shift and go to state 60
    (               shift and go to state 51
    INT_CONST       shift and go to state 61
    STR_CONST       shift and go to state 62
    BOOL_CONST      shift and go to state 63
    -               shift and go to state 58

    expr                           shift and go to state 79

state 51

    (52) expr -> ( . expr )
    (21) expr -> . IF expr THEN expr ELSE expr error
    (22) expr -> . IF expr THEN error FI
    (23) expr -> . OBJECTID ASSIGN expr
    (24) expr -> . expr . OBJECTID ( expr optional_expressions )
    (25) expr -> . expr . OBJECTID ( expr )
    (26) expr -> . expr . OBJECTID ( )
    (27) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . OBJECTID ( )
    (31) expr -> . OBJECTID ( expr optional_expressions )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . IF expr THEN expr ELSE expr FI
    (34) expr -> . WHILE expr LOOP expr POOL
    (35) expr -> . { lista_expr }
    (36) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (37) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID IN expr
    (39) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (40) expr -> . CASE expr OF lista_asig ESAC
    (41) expr -> . NEW TYPEID
    (42) expr -> . ISVOID expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . ~ expr
    (48) expr -> . expr < expr
    (49) expr -> . expr LE expr
    (50) expr -> . expr = expr
    (51) expr -> . NOT expr
    (52) expr -> . ( expr )
    (53) expr -> . OBJECTID
    (54) expr -> . INT_CONST
    (55) expr -> . STR_CONST
    (56) expr -> . BOOL_CONST
    (57) expr -> . - expr
    IF              shift and go to state 50
    OBJECTID        shift and go to state 48
    WHILE           shift and go to state 52
    {               shift and go to state 53
    LET             shift and go to state 54
    CASE            shift and go to state 55
    NEW             shift and go to state 56
    ISVOID          shift and go to state 57
    ~               shift and go to state 59
    NOT             shift and go to state 60
    (               shift and go to state 51
    INT_CONST       shift and go to state 61
    STR_CONST       shift and go to state 62
    BOOL_CONST      shift and go to state 63
    -               shift and go to state 58

    expr                           shift and go to state 80

state 52

    (34) expr -> WHILE . expr LOOP expr POOL
    (21) expr -> . IF expr THEN expr ELSE expr error
    (22) expr -> . IF expr THEN error FI
    (23) expr -> . OBJECTID ASSIGN expr
    (24) expr -> . expr . OBJECTID ( expr optional_expressions )
    (25) expr -> . expr . OBJECTID ( expr )
    (26) expr -> . expr . OBJECTID ( )
    (27) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . OBJECTID ( )
    (31) expr -> . OBJECTID ( expr optional_expressions )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . IF expr THEN expr ELSE expr FI
    (34) expr -> . WHILE expr LOOP expr POOL
    (35) expr -> . { lista_expr }
    (36) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (37) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID IN expr
    (39) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (40) expr -> . CASE expr OF lista_asig ESAC
    (41) expr -> . NEW TYPEID
    (42) expr -> . ISVOID expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . ~ expr
    (48) expr -> . expr < expr
    (49) expr -> . expr LE expr
    (50) expr -> . expr = expr
    (51) expr -> . NOT expr
    (52) expr -> . ( expr )
    (53) expr -> . OBJECTID
    (54) expr -> . INT_CONST
    (55) expr -> . STR_CONST
    (56) expr -> . BOOL_CONST
    (57) expr -> . - expr
    IF              shift and go to state 50
    OBJECTID        shift and go to state 48
    WHILE           shift and go to state 52
    {               shift and go to state 53
    LET             shift and go to state 54
    CASE            shift and go to state 55
    NEW             shift and go to state 56
    ISVOID          shift and go to state 57
    ~               shift and go to state 59
    NOT             shift and go to state 60
    (               shift and go to state 51
    INT_CONST       shift and go to state 61
    STR_CONST       shift and go to state 62
    BOOL_CONST      shift and go to state 63
    -               shift and go to state 58

    expr                           shift and go to state 81

state 53

    (35) expr -> { . lista_expr }
    (64) lista_expr -> . error ;
    (65) lista_expr -> . lista_expr expr ;
    (66) lista_expr -> . expr ;
    (21) expr -> . IF expr THEN expr ELSE expr error
    (22) expr -> . IF expr THEN error FI
    (23) expr -> . OBJECTID ASSIGN expr
    (24) expr -> . expr . OBJECTID ( expr optional_expressions )
    (25) expr -> . expr . OBJECTID ( expr )
    (26) expr -> . expr . OBJECTID ( )
    (27) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . OBJECTID ( )
    (31) expr -> . OBJECTID ( expr optional_expressions )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . IF expr THEN expr ELSE expr FI
    (34) expr -> . WHILE expr LOOP expr POOL
    (35) expr -> . { lista_expr }
    (36) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (37) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID IN expr
    (39) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (40) expr -> . CASE expr OF lista_asig ESAC
    (41) expr -> . NEW TYPEID
    (42) expr -> . ISVOID expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . ~ expr
    (48) expr -> . expr < expr
    (49) expr -> . expr LE expr
    (50) expr -> . expr = expr
    (51) expr -> . NOT expr
    (52) expr -> . ( expr )
    (53) expr -> . OBJECTID
    (54) expr -> . INT_CONST
    (55) expr -> . STR_CONST
    (56) expr -> . BOOL_CONST
    (57) expr -> . - expr
    error           shift and go to state 83
    IF              shift and go to state 50
    OBJECTID        shift and go to state 48
    WHILE           shift and go to state 52
    {               shift and go to state 53
    LET             shift and go to state 54
    CASE            shift and go to state 55
    NEW             shift and go to state 56
    ISVOID          shift and go to state 57
    ~               shift and go to state 59
    NOT             shift and go to state 60
    (               shift and go to state 51
    INT_CONST       shift and go to state 61
    STR_CONST       shift and go to state 62
    BOOL_CONST      shift and go to state 63
    -               shift and go to state 58

    lista_expr                     shift and go to state 82
    expr                           shift and go to state 84

state 54

    (36) expr -> LET . OBJECTID : TYPEID optional_assigns IN expr
    (37) expr -> LET . OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (38) expr -> LET . OBJECTID : TYPEID IN expr
    (39) expr -> LET . OBJECTID : TYPEID ASSIGN expr IN expr
    OBJECTID        shift and go to state 85


state 55

    (40) expr -> CASE . expr OF lista_asig ESAC
    (21) expr -> . IF expr THEN expr ELSE expr error
    (22) expr -> . IF expr THEN error FI
    (23) expr -> . OBJECTID ASSIGN expr
    (24) expr -> . expr . OBJECTID ( expr optional_expressions )
    (25) expr -> . expr . OBJECTID ( expr )
    (26) expr -> . expr . OBJECTID ( )
    (27) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . OBJECTID ( )
    (31) expr -> . OBJECTID ( expr optional_expressions )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . IF expr THEN expr ELSE expr FI
    (34) expr -> . WHILE expr LOOP expr POOL
    (35) expr -> . { lista_expr }
    (36) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (37) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID IN expr
    (39) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (40) expr -> . CASE expr OF lista_asig ESAC
    (41) expr -> . NEW TYPEID
    (42) expr -> . ISVOID expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . ~ expr
    (48) expr -> . expr < expr
    (49) expr -> . expr LE expr
    (50) expr -> . expr = expr
    (51) expr -> . NOT expr
    (52) expr -> . ( expr )
    (53) expr -> . OBJECTID
    (54) expr -> . INT_CONST
    (55) expr -> . STR_CONST
    (56) expr -> . BOOL_CONST
    (57) expr -> . - expr
    IF              shift and go to state 50
    OBJECTID        shift and go to state 48
    WHILE           shift and go to state 52
    {               shift and go to state 53
    LET             shift and go to state 54
    CASE            shift and go to state 55
    NEW             shift and go to state 56
    ISVOID          shift and go to state 57
    ~               shift and go to state 59
    NOT             shift and go to state 60
    (               shift and go to state 51
    INT_CONST       shift and go to state 61
    STR_CONST       shift and go to state 62
    BOOL_CONST      shift and go to state 63
    -               shift and go to state 58

    expr                           shift and go to state 86

state 56

    (41) expr -> NEW . TYPEID
    TYPEID          shift and go to state 87


state 57

    (42) expr -> ISVOID . expr
    (21) expr -> . IF expr THEN expr ELSE expr error
    (22) expr -> . IF expr THEN error FI
    (23) expr -> . OBJECTID ASSIGN expr
    (24) expr -> . expr . OBJECTID ( expr optional_expressions )
    (25) expr -> . expr . OBJECTID ( expr )
    (26) expr -> . expr . OBJECTID ( )
    (27) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . OBJECTID ( )
    (31) expr -> . OBJECTID ( expr optional_expressions )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . IF expr THEN expr ELSE expr FI
    (34) expr -> . WHILE expr LOOP expr POOL
    (35) expr -> . { lista_expr }
    (36) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (37) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID IN expr
    (39) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (40) expr -> . CASE expr OF lista_asig ESAC
    (41) expr -> . NEW TYPEID
    (42) expr -> . ISVOID expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . ~ expr
    (48) expr -> . expr < expr
    (49) expr -> . expr LE expr
    (50) expr -> . expr = expr
    (51) expr -> . NOT expr
    (52) expr -> . ( expr )
    (53) expr -> . OBJECTID
    (54) expr -> . INT_CONST
    (55) expr -> . STR_CONST
    (56) expr -> . BOOL_CONST
    (57) expr -> . - expr
    IF              shift and go to state 50
    OBJECTID        shift and go to state 48
    WHILE           shift and go to state 52
    {               shift and go to state 53
    LET             shift and go to state 54
    CASE            shift and go to state 55
    NEW             shift and go to state 56
    ISVOID          shift and go to state 57
    ~               shift and go to state 59
    NOT             shift and go to state 60
    (               shift and go to state 51
    INT_CONST       shift and go to state 61
    STR_CONST       shift and go to state 62
    BOOL_CONST      shift and go to state 63
    -               shift and go to state 58

    expr                           shift and go to state 88

state 58

    (57) expr -> - . expr
    (21) expr -> . IF expr THEN expr ELSE expr error
    (22) expr -> . IF expr THEN error FI
    (23) expr -> . OBJECTID ASSIGN expr
    (24) expr -> . expr . OBJECTID ( expr optional_expressions )
    (25) expr -> . expr . OBJECTID ( expr )
    (26) expr -> . expr . OBJECTID ( )
    (27) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . OBJECTID ( )
    (31) expr -> . OBJECTID ( expr optional_expressions )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . IF expr THEN expr ELSE expr FI
    (34) expr -> . WHILE expr LOOP expr POOL
    (35) expr -> . { lista_expr }
    (36) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (37) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID IN expr
    (39) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (40) expr -> . CASE expr OF lista_asig ESAC
    (41) expr -> . NEW TYPEID
    (42) expr -> . ISVOID expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . ~ expr
    (48) expr -> . expr < expr
    (49) expr -> . expr LE expr
    (50) expr -> . expr = expr
    (51) expr -> . NOT expr
    (52) expr -> . ( expr )
    (53) expr -> . OBJECTID
    (54) expr -> . INT_CONST
    (55) expr -> . STR_CONST
    (56) expr -> . BOOL_CONST
    (57) expr -> . - expr
    IF              shift and go to state 50
    OBJECTID        shift and go to state 48
    WHILE           shift and go to state 52
    {               shift and go to state 53
    LET             shift and go to state 54
    CASE            shift and go to state 55
    NEW             shift and go to state 56
    ISVOID          shift and go to state 57
    ~               shift and go to state 59
    NOT             shift and go to state 60
    (               shift and go to state 51
    INT_CONST       shift and go to state 61
    STR_CONST       shift and go to state 62
    BOOL_CONST      shift and go to state 63
    -               shift and go to state 58

    expr                           shift and go to state 89

state 59

    (47) expr -> ~ . expr
    (21) expr -> . IF expr THEN expr ELSE expr error
    (22) expr -> . IF expr THEN error FI
    (23) expr -> . OBJECTID ASSIGN expr
    (24) expr -> . expr . OBJECTID ( expr optional_expressions )
    (25) expr -> . expr . OBJECTID ( expr )
    (26) expr -> . expr . OBJECTID ( )
    (27) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . OBJECTID ( )
    (31) expr -> . OBJECTID ( expr optional_expressions )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . IF expr THEN expr ELSE expr FI
    (34) expr -> . WHILE expr LOOP expr POOL
    (35) expr -> . { lista_expr }
    (36) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (37) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID IN expr
    (39) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (40) expr -> . CASE expr OF lista_asig ESAC
    (41) expr -> . NEW TYPEID
    (42) expr -> . ISVOID expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . ~ expr
    (48) expr -> . expr < expr
    (49) expr -> . expr LE expr
    (50) expr -> . expr = expr
    (51) expr -> . NOT expr
    (52) expr -> . ( expr )
    (53) expr -> . OBJECTID
    (54) expr -> . INT_CONST
    (55) expr -> . STR_CONST
    (56) expr -> . BOOL_CONST
    (57) expr -> . - expr
    IF              shift and go to state 50
    OBJECTID        shift and go to state 48
    WHILE           shift and go to state 52
    {               shift and go to state 53
    LET             shift and go to state 54
    CASE            shift and go to state 55
    NEW             shift and go to state 56
    ISVOID          shift and go to state 57
    ~               shift and go to state 59
    NOT             shift and go to state 60
    (               shift and go to state 51
    INT_CONST       shift and go to state 61
    STR_CONST       shift and go to state 62
    BOOL_CONST      shift and go to state 63
    -               shift and go to state 58

    expr                           shift and go to state 90

state 60

    (51) expr -> NOT . expr
    (21) expr -> . IF expr THEN expr ELSE expr error
    (22) expr -> . IF expr THEN error FI
    (23) expr -> . OBJECTID ASSIGN expr
    (24) expr -> . expr . OBJECTID ( expr optional_expressions )
    (25) expr -> . expr . OBJECTID ( expr )
    (26) expr -> . expr . OBJECTID ( )
    (27) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . OBJECTID ( )
    (31) expr -> . OBJECTID ( expr optional_expressions )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . IF expr THEN expr ELSE expr FI
    (34) expr -> . WHILE expr LOOP expr POOL
    (35) expr -> . { lista_expr }
    (36) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (37) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID IN expr
    (39) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (40) expr -> . CASE expr OF lista_asig ESAC
    (41) expr -> . NEW TYPEID
    (42) expr -> . ISVOID expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . ~ expr
    (48) expr -> . expr < expr
    (49) expr -> . expr LE expr
    (50) expr -> . expr = expr
    (51) expr -> . NOT expr
    (52) expr -> . ( expr )
    (53) expr -> . OBJECTID
    (54) expr -> . INT_CONST
    (55) expr -> . STR_CONST
    (56) expr -> . BOOL_CONST
    (57) expr -> . - expr
    IF              shift and go to state 50
    OBJECTID        shift and go to state 48
    WHILE           shift and go to state 52
    {               shift and go to state 53
    LET             shift and go to state 54
    CASE            shift and go to state 55
    NEW             shift and go to state 56
    ISVOID          shift and go to state 57
    ~               shift and go to state 59
    NOT             shift and go to state 60
    (               shift and go to state 51
    INT_CONST       shift and go to state 61
    STR_CONST       shift and go to state 62
    BOOL_CONST      shift and go to state 63
    -               shift and go to state 58

    expr                           shift and go to state 91

state 61

    (54) expr -> INT_CONST .
    .               reduce using rule 54 (expr -> INT_CONST .)
    @               reduce using rule 54 (expr -> INT_CONST .)
    +               reduce using rule 54 (expr -> INT_CONST .)
    -               reduce using rule 54 (expr -> INT_CONST .)
    *               reduce using rule 54 (expr -> INT_CONST .)
    /               reduce using rule 54 (expr -> INT_CONST .)
    <               reduce using rule 54 (expr -> INT_CONST .)
    LE              reduce using rule 54 (expr -> INT_CONST .)
    =               reduce using rule 54 (expr -> INT_CONST .)
    ;               reduce using rule 54 (expr -> INT_CONST .)
    THEN            reduce using rule 54 (expr -> INT_CONST .)
    )               reduce using rule 54 (expr -> INT_CONST .)
    LOOP            reduce using rule 54 (expr -> INT_CONST .)
    OF              reduce using rule 54 (expr -> INT_CONST .)
    }               reduce using rule 54 (expr -> INT_CONST .)
    ,               reduce using rule 54 (expr -> INT_CONST .)
    ELSE            reduce using rule 54 (expr -> INT_CONST .)
    POOL            reduce using rule 54 (expr -> INT_CONST .)
    error           reduce using rule 54 (expr -> INT_CONST .)
    FI              reduce using rule 54 (expr -> INT_CONST .)
    IN              reduce using rule 54 (expr -> INT_CONST .)


state 62

    (55) expr -> STR_CONST .
    .               reduce using rule 55 (expr -> STR_CONST .)
    @               reduce using rule 55 (expr -> STR_CONST .)
    +               reduce using rule 55 (expr -> STR_CONST .)
    -               reduce using rule 55 (expr -> STR_CONST .)
    *               reduce using rule 55 (expr -> STR_CONST .)
    /               reduce using rule 55 (expr -> STR_CONST .)
    <               reduce using rule 55 (expr -> STR_CONST .)
    LE              reduce using rule 55 (expr -> STR_CONST .)
    =               reduce using rule 55 (expr -> STR_CONST .)
    ;               reduce using rule 55 (expr -> STR_CONST .)
    THEN            reduce using rule 55 (expr -> STR_CONST .)
    )               reduce using rule 55 (expr -> STR_CONST .)
    LOOP            reduce using rule 55 (expr -> STR_CONST .)
    OF              reduce using rule 55 (expr -> STR_CONST .)
    }               reduce using rule 55 (expr -> STR_CONST .)
    ,               reduce using rule 55 (expr -> STR_CONST .)
    ELSE            reduce using rule 55 (expr -> STR_CONST .)
    POOL            reduce using rule 55 (expr -> STR_CONST .)
    error           reduce using rule 55 (expr -> STR_CONST .)
    FI              reduce using rule 55 (expr -> STR_CONST .)
    IN              reduce using rule 55 (expr -> STR_CONST .)


state 63

    (56) expr -> BOOL_CONST .
    .               reduce using rule 56 (expr -> BOOL_CONST .)
    @               reduce using rule 56 (expr -> BOOL_CONST .)
    +               reduce using rule 56 (expr -> BOOL_CONST .)
    -               reduce using rule 56 (expr -> BOOL_CONST .)
    *               reduce using rule 56 (expr -> BOOL_CONST .)
    /               reduce using rule 56 (expr -> BOOL_CONST .)
    <               reduce using rule 56 (expr -> BOOL_CONST .)
    LE              reduce using rule 56 (expr -> BOOL_CONST .)
    =               reduce using rule 56 (expr -> BOOL_CONST .)
    ;               reduce using rule 56 (expr -> BOOL_CONST .)
    THEN            reduce using rule 56 (expr -> BOOL_CONST .)
    )               reduce using rule 56 (expr -> BOOL_CONST .)
    LOOP            reduce using rule 56 (expr -> BOOL_CONST .)
    OF              reduce using rule 56 (expr -> BOOL_CONST .)
    }               reduce using rule 56 (expr -> BOOL_CONST .)
    ,               reduce using rule 56 (expr -> BOOL_CONST .)
    ELSE            reduce using rule 56 (expr -> BOOL_CONST .)
    POOL            reduce using rule 56 (expr -> BOOL_CONST .)
    error           reduce using rule 56 (expr -> BOOL_CONST .)
    FI              reduce using rule 56 (expr -> BOOL_CONST .)
    IN              reduce using rule 56 (expr -> BOOL_CONST .)


state 64

    (11) feature -> OBJECTID ( optional_formal ) : TYPEID . { error }
    {               shift and go to state 92


state 65

    (12) feature -> OBJECTID ( ) : TYPEID { . error }
    (13) feature -> OBJECTID ( ) : TYPEID { . expr }
    (21) expr -> . IF expr THEN expr ELSE expr error
    (22) expr -> . IF expr THEN error FI
    (23) expr -> . OBJECTID ASSIGN expr
    (24) expr -> . expr . OBJECTID ( expr optional_expressions )
    (25) expr -> . expr . OBJECTID ( expr )
    (26) expr -> . expr . OBJECTID ( )
    (27) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . OBJECTID ( )
    (31) expr -> . OBJECTID ( expr optional_expressions )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . IF expr THEN expr ELSE expr FI
    (34) expr -> . WHILE expr LOOP expr POOL
    (35) expr -> . { lista_expr }
    (36) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (37) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID IN expr
    (39) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (40) expr -> . CASE expr OF lista_asig ESAC
    (41) expr -> . NEW TYPEID
    (42) expr -> . ISVOID expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . ~ expr
    (48) expr -> . expr < expr
    (49) expr -> . expr LE expr
    (50) expr -> . expr = expr
    (51) expr -> . NOT expr
    (52) expr -> . ( expr )
    (53) expr -> . OBJECTID
    (54) expr -> . INT_CONST
    (55) expr -> . STR_CONST
    (56) expr -> . BOOL_CONST
    (57) expr -> . - expr
    error           shift and go to state 93
    IF              shift and go to state 50
    OBJECTID        shift and go to state 48
    WHILE           shift and go to state 52
    {               shift and go to state 53
    LET             shift and go to state 54
    CASE            shift and go to state 55
    NEW             shift and go to state 56
    ISVOID          shift and go to state 57
    ~               shift and go to state 59
    NOT             shift and go to state 60
    (               shift and go to state 51
    INT_CONST       shift and go to state 61
    STR_CONST       shift and go to state 62
    BOOL_CONST      shift and go to state 63
    -               shift and go to state 58

    expr                           shift and go to state 94

state 66

    (14) feature -> OBJECTID ( formal ) : TYPEID . { expr }
    {               shift and go to state 95


state 67

    (15) feature -> OBJECTID ( formal optional_formal ) : . TYPEID { expr }
    TYPEID          shift and go to state 96


state 68

    (23) expr -> OBJECTID ASSIGN . expr
    (21) expr -> . IF expr THEN expr ELSE expr error
    (22) expr -> . IF expr THEN error FI
    (23) expr -> . OBJECTID ASSIGN expr
    (24) expr -> . expr . OBJECTID ( expr optional_expressions )
    (25) expr -> . expr . OBJECTID ( expr )
    (26) expr -> . expr . OBJECTID ( )
    (27) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . OBJECTID ( )
    (31) expr -> . OBJECTID ( expr optional_expressions )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . IF expr THEN expr ELSE expr FI
    (34) expr -> . WHILE expr LOOP expr POOL
    (35) expr -> . { lista_expr }
    (36) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (37) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID IN expr
    (39) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (40) expr -> . CASE expr OF lista_asig ESAC
    (41) expr -> . NEW TYPEID
    (42) expr -> . ISVOID expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . ~ expr
    (48) expr -> . expr < expr
    (49) expr -> . expr LE expr
    (50) expr -> . expr = expr
    (51) expr -> . NOT expr
    (52) expr -> . ( expr )
    (53) expr -> . OBJECTID
    (54) expr -> . INT_CONST
    (55) expr -> . STR_CONST
    (56) expr -> . BOOL_CONST
    (57) expr -> . - expr
    IF              shift and go to state 50
    OBJECTID        shift and go to state 48
    WHILE           shift and go to state 52
    {               shift and go to state 53
    LET             shift and go to state 54
    CASE            shift and go to state 55
    NEW             shift and go to state 56
    ISVOID          shift and go to state 57
    ~               shift and go to state 59
    NOT             shift and go to state 60
    (               shift and go to state 51
    INT_CONST       shift and go to state 61
    STR_CONST       shift and go to state 62
    BOOL_CONST      shift and go to state 63
    -               shift and go to state 58

    expr                           shift and go to state 97

state 69

    (30) expr -> OBJECTID ( . )
    (31) expr -> OBJECTID ( . expr optional_expressions )
    (32) expr -> OBJECTID ( . expr )
    (21) expr -> . IF expr THEN expr ELSE expr error
    (22) expr -> . IF expr THEN error FI
    (23) expr -> . OBJECTID ASSIGN expr
    (24) expr -> . expr . OBJECTID ( expr optional_expressions )
    (25) expr -> . expr . OBJECTID ( expr )
    (26) expr -> . expr . OBJECTID ( )
    (27) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . OBJECTID ( )
    (31) expr -> . OBJECTID ( expr optional_expressions )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . IF expr THEN expr ELSE expr FI
    (34) expr -> . WHILE expr LOOP expr POOL
    (35) expr -> . { lista_expr }
    (36) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (37) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID IN expr
    (39) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (40) expr -> . CASE expr OF lista_asig ESAC
    (41) expr -> . NEW TYPEID
    (42) expr -> . ISVOID expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . ~ expr
    (48) expr -> . expr < expr
    (49) expr -> . expr LE expr
    (50) expr -> . expr = expr
    (51) expr -> . NOT expr
    (52) expr -> . ( expr )
    (53) expr -> . OBJECTID
    (54) expr -> . INT_CONST
    (55) expr -> . STR_CONST
    (56) expr -> . BOOL_CONST
    (57) expr -> . - expr
    )               shift and go to state 98
    IF              shift and go to state 50
    OBJECTID        shift and go to state 48
    WHILE           shift and go to state 52
    {               shift and go to state 53
    LET             shift and go to state 54
    CASE            shift and go to state 55
    NEW             shift and go to state 56
    ISVOID          shift and go to state 57
    ~               shift and go to state 59
    NOT             shift and go to state 60
    (               shift and go to state 51
    INT_CONST       shift and go to state 61
    STR_CONST       shift and go to state 62
    BOOL_CONST      shift and go to state 63
    -               shift and go to state 58

    expr                           shift and go to state 99

state 70

    (24) expr -> expr . . OBJECTID ( expr optional_expressions )
    (25) expr -> expr . . OBJECTID ( expr )
    (26) expr -> expr . . OBJECTID ( )
    OBJECTID        shift and go to state 100


state 71

    (27) expr -> expr @ . TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> expr @ . TYPEID . OBJECTID ( expr )
    (29) expr -> expr @ . TYPEID . OBJECTID ( )
    TYPEID          shift and go to state 101


state 72

    (43) expr -> expr + . expr
    (21) expr -> . IF expr THEN expr ELSE expr error
    (22) expr -> . IF expr THEN error FI
    (23) expr -> . OBJECTID ASSIGN expr
    (24) expr -> . expr . OBJECTID ( expr optional_expressions )
    (25) expr -> . expr . OBJECTID ( expr )
    (26) expr -> . expr . OBJECTID ( )
    (27) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . OBJECTID ( )
    (31) expr -> . OBJECTID ( expr optional_expressions )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . IF expr THEN expr ELSE expr FI
    (34) expr -> . WHILE expr LOOP expr POOL
    (35) expr -> . { lista_expr }
    (36) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (37) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID IN expr
    (39) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (40) expr -> . CASE expr OF lista_asig ESAC
    (41) expr -> . NEW TYPEID
    (42) expr -> . ISVOID expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . ~ expr
    (48) expr -> . expr < expr
    (49) expr -> . expr LE expr
    (50) expr -> . expr = expr
    (51) expr -> . NOT expr
    (52) expr -> . ( expr )
    (53) expr -> . OBJECTID
    (54) expr -> . INT_CONST
    (55) expr -> . STR_CONST
    (56) expr -> . BOOL_CONST
    (57) expr -> . - expr
    IF              shift and go to state 50
    OBJECTID        shift and go to state 48
    WHILE           shift and go to state 52
    {               shift and go to state 53
    LET             shift and go to state 54
    CASE            shift and go to state 55
    NEW             shift and go to state 56
    ISVOID          shift and go to state 57
    ~               shift and go to state 59
    NOT             shift and go to state 60
    (               shift and go to state 51
    INT_CONST       shift and go to state 61
    STR_CONST       shift and go to state 62
    BOOL_CONST      shift and go to state 63
    -               shift and go to state 58

    expr                           shift and go to state 102

state 73

    (44) expr -> expr - . expr
    (21) expr -> . IF expr THEN expr ELSE expr error
    (22) expr -> . IF expr THEN error FI
    (23) expr -> . OBJECTID ASSIGN expr
    (24) expr -> . expr . OBJECTID ( expr optional_expressions )
    (25) expr -> . expr . OBJECTID ( expr )
    (26) expr -> . expr . OBJECTID ( )
    (27) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . OBJECTID ( )
    (31) expr -> . OBJECTID ( expr optional_expressions )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . IF expr THEN expr ELSE expr FI
    (34) expr -> . WHILE expr LOOP expr POOL
    (35) expr -> . { lista_expr }
    (36) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (37) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID IN expr
    (39) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (40) expr -> . CASE expr OF lista_asig ESAC
    (41) expr -> . NEW TYPEID
    (42) expr -> . ISVOID expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . ~ expr
    (48) expr -> . expr < expr
    (49) expr -> . expr LE expr
    (50) expr -> . expr = expr
    (51) expr -> . NOT expr
    (52) expr -> . ( expr )
    (53) expr -> . OBJECTID
    (54) expr -> . INT_CONST
    (55) expr -> . STR_CONST
    (56) expr -> . BOOL_CONST
    (57) expr -> . - expr
    IF              shift and go to state 50
    OBJECTID        shift and go to state 48
    WHILE           shift and go to state 52
    {               shift and go to state 53
    LET             shift and go to state 54
    CASE            shift and go to state 55
    NEW             shift and go to state 56
    ISVOID          shift and go to state 57
    ~               shift and go to state 59
    NOT             shift and go to state 60
    (               shift and go to state 51
    INT_CONST       shift and go to state 61
    STR_CONST       shift and go to state 62
    BOOL_CONST      shift and go to state 63
    -               shift and go to state 58

    expr                           shift and go to state 103

state 74

    (45) expr -> expr * . expr
    (21) expr -> . IF expr THEN expr ELSE expr error
    (22) expr -> . IF expr THEN error FI
    (23) expr -> . OBJECTID ASSIGN expr
    (24) expr -> . expr . OBJECTID ( expr optional_expressions )
    (25) expr -> . expr . OBJECTID ( expr )
    (26) expr -> . expr . OBJECTID ( )
    (27) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . OBJECTID ( )
    (31) expr -> . OBJECTID ( expr optional_expressions )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . IF expr THEN expr ELSE expr FI
    (34) expr -> . WHILE expr LOOP expr POOL
    (35) expr -> . { lista_expr }
    (36) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (37) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID IN expr
    (39) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (40) expr -> . CASE expr OF lista_asig ESAC
    (41) expr -> . NEW TYPEID
    (42) expr -> . ISVOID expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . ~ expr
    (48) expr -> . expr < expr
    (49) expr -> . expr LE expr
    (50) expr -> . expr = expr
    (51) expr -> . NOT expr
    (52) expr -> . ( expr )
    (53) expr -> . OBJECTID
    (54) expr -> . INT_CONST
    (55) expr -> . STR_CONST
    (56) expr -> . BOOL_CONST
    (57) expr -> . - expr
    IF              shift and go to state 50
    OBJECTID        shift and go to state 48
    WHILE           shift and go to state 52
    {               shift and go to state 53
    LET             shift and go to state 54
    CASE            shift and go to state 55
    NEW             shift and go to state 56
    ISVOID          shift and go to state 57
    ~               shift and go to state 59
    NOT             shift and go to state 60
    (               shift and go to state 51
    INT_CONST       shift and go to state 61
    STR_CONST       shift and go to state 62
    BOOL_CONST      shift and go to state 63
    -               shift and go to state 58

    expr                           shift and go to state 104

state 75

    (46) expr -> expr / . expr
    (21) expr -> . IF expr THEN expr ELSE expr error
    (22) expr -> . IF expr THEN error FI
    (23) expr -> . OBJECTID ASSIGN expr
    (24) expr -> . expr . OBJECTID ( expr optional_expressions )
    (25) expr -> . expr . OBJECTID ( expr )
    (26) expr -> . expr . OBJECTID ( )
    (27) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . OBJECTID ( )
    (31) expr -> . OBJECTID ( expr optional_expressions )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . IF expr THEN expr ELSE expr FI
    (34) expr -> . WHILE expr LOOP expr POOL
    (35) expr -> . { lista_expr }
    (36) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (37) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID IN expr
    (39) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (40) expr -> . CASE expr OF lista_asig ESAC
    (41) expr -> . NEW TYPEID
    (42) expr -> . ISVOID expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . ~ expr
    (48) expr -> . expr < expr
    (49) expr -> . expr LE expr
    (50) expr -> . expr = expr
    (51) expr -> . NOT expr
    (52) expr -> . ( expr )
    (53) expr -> . OBJECTID
    (54) expr -> . INT_CONST
    (55) expr -> . STR_CONST
    (56) expr -> . BOOL_CONST
    (57) expr -> . - expr
    IF              shift and go to state 50
    OBJECTID        shift and go to state 48
    WHILE           shift and go to state 52
    {               shift and go to state 53
    LET             shift and go to state 54
    CASE            shift and go to state 55
    NEW             shift and go to state 56
    ISVOID          shift and go to state 57
    ~               shift and go to state 59
    NOT             shift and go to state 60
    (               shift and go to state 51
    INT_CONST       shift and go to state 61
    STR_CONST       shift and go to state 62
    BOOL_CONST      shift and go to state 63
    -               shift and go to state 58

    expr                           shift and go to state 105

state 76

    (48) expr -> expr < . expr
    (21) expr -> . IF expr THEN expr ELSE expr error
    (22) expr -> . IF expr THEN error FI
    (23) expr -> . OBJECTID ASSIGN expr
    (24) expr -> . expr . OBJECTID ( expr optional_expressions )
    (25) expr -> . expr . OBJECTID ( expr )
    (26) expr -> . expr . OBJECTID ( )
    (27) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . OBJECTID ( )
    (31) expr -> . OBJECTID ( expr optional_expressions )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . IF expr THEN expr ELSE expr FI
    (34) expr -> . WHILE expr LOOP expr POOL
    (35) expr -> . { lista_expr }
    (36) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (37) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID IN expr
    (39) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (40) expr -> . CASE expr OF lista_asig ESAC
    (41) expr -> . NEW TYPEID
    (42) expr -> . ISVOID expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . ~ expr
    (48) expr -> . expr < expr
    (49) expr -> . expr LE expr
    (50) expr -> . expr = expr
    (51) expr -> . NOT expr
    (52) expr -> . ( expr )
    (53) expr -> . OBJECTID
    (54) expr -> . INT_CONST
    (55) expr -> . STR_CONST
    (56) expr -> . BOOL_CONST
    (57) expr -> . - expr
    IF              shift and go to state 50
    OBJECTID        shift and go to state 48
    WHILE           shift and go to state 52
    {               shift and go to state 53
    LET             shift and go to state 54
    CASE            shift and go to state 55
    NEW             shift and go to state 56
    ISVOID          shift and go to state 57
    ~               shift and go to state 59
    NOT             shift and go to state 60
    (               shift and go to state 51
    INT_CONST       shift and go to state 61
    STR_CONST       shift and go to state 62
    BOOL_CONST      shift and go to state 63
    -               shift and go to state 58

    expr                           shift and go to state 106

state 77

    (49) expr -> expr LE . expr
    (21) expr -> . IF expr THEN expr ELSE expr error
    (22) expr -> . IF expr THEN error FI
    (23) expr -> . OBJECTID ASSIGN expr
    (24) expr -> . expr . OBJECTID ( expr optional_expressions )
    (25) expr -> . expr . OBJECTID ( expr )
    (26) expr -> . expr . OBJECTID ( )
    (27) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . OBJECTID ( )
    (31) expr -> . OBJECTID ( expr optional_expressions )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . IF expr THEN expr ELSE expr FI
    (34) expr -> . WHILE expr LOOP expr POOL
    (35) expr -> . { lista_expr }
    (36) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (37) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID IN expr
    (39) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (40) expr -> . CASE expr OF lista_asig ESAC
    (41) expr -> . NEW TYPEID
    (42) expr -> . ISVOID expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . ~ expr
    (48) expr -> . expr < expr
    (49) expr -> . expr LE expr
    (50) expr -> . expr = expr
    (51) expr -> . NOT expr
    (52) expr -> . ( expr )
    (53) expr -> . OBJECTID
    (54) expr -> . INT_CONST
    (55) expr -> . STR_CONST
    (56) expr -> . BOOL_CONST
    (57) expr -> . - expr
    IF              shift and go to state 50
    OBJECTID        shift and go to state 48
    WHILE           shift and go to state 52
    {               shift and go to state 53
    LET             shift and go to state 54
    CASE            shift and go to state 55
    NEW             shift and go to state 56
    ISVOID          shift and go to state 57
    ~               shift and go to state 59
    NOT             shift and go to state 60
    (               shift and go to state 51
    INT_CONST       shift and go to state 61
    STR_CONST       shift and go to state 62
    BOOL_CONST      shift and go to state 63
    -               shift and go to state 58

    expr                           shift and go to state 107

state 78

    (50) expr -> expr = . expr
    (21) expr -> . IF expr THEN expr ELSE expr error
    (22) expr -> . IF expr THEN error FI
    (23) expr -> . OBJECTID ASSIGN expr
    (24) expr -> . expr . OBJECTID ( expr optional_expressions )
    (25) expr -> . expr . OBJECTID ( expr )
    (26) expr -> . expr . OBJECTID ( )
    (27) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . OBJECTID ( )
    (31) expr -> . OBJECTID ( expr optional_expressions )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . IF expr THEN expr ELSE expr FI
    (34) expr -> . WHILE expr LOOP expr POOL
    (35) expr -> . { lista_expr }
    (36) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (37) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID IN expr
    (39) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (40) expr -> . CASE expr OF lista_asig ESAC
    (41) expr -> . NEW TYPEID
    (42) expr -> . ISVOID expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . ~ expr
    (48) expr -> . expr < expr
    (49) expr -> . expr LE expr
    (50) expr -> . expr = expr
    (51) expr -> . NOT expr
    (52) expr -> . ( expr )
    (53) expr -> . OBJECTID
    (54) expr -> . INT_CONST
    (55) expr -> . STR_CONST
    (56) expr -> . BOOL_CONST
    (57) expr -> . - expr
    IF              shift and go to state 50
    OBJECTID        shift and go to state 48
    WHILE           shift and go to state 52
    {               shift and go to state 53
    LET             shift and go to state 54
    CASE            shift and go to state 55
    NEW             shift and go to state 56
    ISVOID          shift and go to state 57
    ~               shift and go to state 59
    NOT             shift and go to state 60
    (               shift and go to state 51
    INT_CONST       shift and go to state 61
    STR_CONST       shift and go to state 62
    BOOL_CONST      shift and go to state 63
    -               shift and go to state 58

    expr                           shift and go to state 108

state 79

    (21) expr -> IF expr . THEN expr ELSE expr error
    (22) expr -> IF expr . THEN error FI
    (33) expr -> IF expr . THEN expr ELSE expr FI
    (24) expr -> expr . . OBJECTID ( expr optional_expressions )
    (25) expr -> expr . . OBJECTID ( expr )
    (26) expr -> expr . . OBJECTID ( )
    (27) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (48) expr -> expr . < expr
    (49) expr -> expr . LE expr
    (50) expr -> expr . = expr
    THEN            shift and go to state 109
    .               shift and go to state 70
    @               shift and go to state 71
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    <               shift and go to state 76
    LE              shift and go to state 77
    =               shift and go to state 78


state 80

    (52) expr -> ( expr . )
    (24) expr -> expr . . OBJECTID ( expr optional_expressions )
    (25) expr -> expr . . OBJECTID ( expr )
    (26) expr -> expr . . OBJECTID ( )
    (27) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (48) expr -> expr . < expr
    (49) expr -> expr . LE expr
    (50) expr -> expr . = expr
    )               shift and go to state 110
    .               shift and go to state 70
    @               shift and go to state 71
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    <               shift and go to state 76
    LE              shift and go to state 77
    =               shift and go to state 78


state 81

    (34) expr -> WHILE expr . LOOP expr POOL
    (24) expr -> expr . . OBJECTID ( expr optional_expressions )
    (25) expr -> expr . . OBJECTID ( expr )
    (26) expr -> expr . . OBJECTID ( )
    (27) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (48) expr -> expr . < expr
    (49) expr -> expr . LE expr
    (50) expr -> expr . = expr
    LOOP            shift and go to state 111
    .               shift and go to state 70
    @               shift and go to state 71
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    <               shift and go to state 76
    LE              shift and go to state 77
    =               shift and go to state 78


state 82

    (35) expr -> { lista_expr . }
    (65) lista_expr -> lista_expr . expr ;
    (21) expr -> . IF expr THEN expr ELSE expr error
    (22) expr -> . IF expr THEN error FI
    (23) expr -> . OBJECTID ASSIGN expr
    (24) expr -> . expr . OBJECTID ( expr optional_expressions )
    (25) expr -> . expr . OBJECTID ( expr )
    (26) expr -> . expr . OBJECTID ( )
    (27) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . OBJECTID ( )
    (31) expr -> . OBJECTID ( expr optional_expressions )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . IF expr THEN expr ELSE expr FI
    (34) expr -> . WHILE expr LOOP expr POOL
    (35) expr -> . { lista_expr }
    (36) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (37) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID IN expr
    (39) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (40) expr -> . CASE expr OF lista_asig ESAC
    (41) expr -> . NEW TYPEID
    (42) expr -> . ISVOID expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . ~ expr
    (48) expr -> . expr < expr
    (49) expr -> . expr LE expr
    (50) expr -> . expr = expr
    (51) expr -> . NOT expr
    (52) expr -> . ( expr )
    (53) expr -> . OBJECTID
    (54) expr -> . INT_CONST
    (55) expr -> . STR_CONST
    (56) expr -> . BOOL_CONST
    (57) expr -> . - expr
    }               shift and go to state 112
    IF              shift and go to state 50
    OBJECTID        shift and go to state 48
    WHILE           shift and go to state 52
    {               shift and go to state 53
    LET             shift and go to state 54
    CASE            shift and go to state 55
    NEW             shift and go to state 56
    ISVOID          shift and go to state 57
    ~               shift and go to state 59
    NOT             shift and go to state 60
    (               shift and go to state 51
    INT_CONST       shift and go to state 61
    STR_CONST       shift and go to state 62
    BOOL_CONST      shift and go to state 63
    -               shift and go to state 58

    expr                           shift and go to state 113

state 83

    (64) lista_expr -> error . ;
    ;               shift and go to state 114


state 84

    (66) lista_expr -> expr . ;
    (24) expr -> expr . . OBJECTID ( expr optional_expressions )
    (25) expr -> expr . . OBJECTID ( expr )
    (26) expr -> expr . . OBJECTID ( )
    (27) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (48) expr -> expr . < expr
    (49) expr -> expr . LE expr
    (50) expr -> expr . = expr
    ;               shift and go to state 115
    .               shift and go to state 70
    @               shift and go to state 71
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    <               shift and go to state 76
    LE              shift and go to state 77
    =               shift and go to state 78


state 85

    (36) expr -> LET OBJECTID . : TYPEID optional_assigns IN expr
    (37) expr -> LET OBJECTID . : TYPEID ASSIGN expr optional_assigns IN expr
    (38) expr -> LET OBJECTID . : TYPEID IN expr
    (39) expr -> LET OBJECTID . : TYPEID ASSIGN expr IN expr
    :               shift and go to state 116


state 86

    (40) expr -> CASE expr . OF lista_asig ESAC
    (24) expr -> expr . . OBJECTID ( expr optional_expressions )
    (25) expr -> expr . . OBJECTID ( expr )
    (26) expr -> expr . . OBJECTID ( )
    (27) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (48) expr -> expr . < expr
    (49) expr -> expr . LE expr
    (50) expr -> expr . = expr
    OF              shift and go to state 117
    .               shift and go to state 70
    @               shift and go to state 71
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    <               shift and go to state 76
    LE              shift and go to state 77
    =               shift and go to state 78


state 87

    (41) expr -> NEW TYPEID .
    .               reduce using rule 41 (expr -> NEW TYPEID .)
    @               reduce using rule 41 (expr -> NEW TYPEID .)
    +               reduce using rule 41 (expr -> NEW TYPEID .)
    -               reduce using rule 41 (expr -> NEW TYPEID .)
    *               reduce using rule 41 (expr -> NEW TYPEID .)
    /               reduce using rule 41 (expr -> NEW TYPEID .)
    <               reduce using rule 41 (expr -> NEW TYPEID .)
    LE              reduce using rule 41 (expr -> NEW TYPEID .)
    =               reduce using rule 41 (expr -> NEW TYPEID .)
    ;               reduce using rule 41 (expr -> NEW TYPEID .)
    THEN            reduce using rule 41 (expr -> NEW TYPEID .)
    )               reduce using rule 41 (expr -> NEW TYPEID .)
    LOOP            reduce using rule 41 (expr -> NEW TYPEID .)
    OF              reduce using rule 41 (expr -> NEW TYPEID .)
    }               reduce using rule 41 (expr -> NEW TYPEID .)
    ,               reduce using rule 41 (expr -> NEW TYPEID .)
    ELSE            reduce using rule 41 (expr -> NEW TYPEID .)
    POOL            reduce using rule 41 (expr -> NEW TYPEID .)
    error           reduce using rule 41 (expr -> NEW TYPEID .)
    FI              reduce using rule 41 (expr -> NEW TYPEID .)
    IN              reduce using rule 41 (expr -> NEW TYPEID .)


state 88

    (42) expr -> ISVOID expr .
    (24) expr -> expr . . OBJECTID ( expr optional_expressions )
    (25) expr -> expr . . OBJECTID ( expr )
    (26) expr -> expr . . OBJECTID ( )
    (27) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (48) expr -> expr . < expr
    (49) expr -> expr . LE expr
    (50) expr -> expr . = expr
    +               reduce using rule 42 (expr -> ISVOID expr .)
    -               reduce using rule 42 (expr -> ISVOID expr .)
    *               reduce using rule 42 (expr -> ISVOID expr .)
    /               reduce using rule 42 (expr -> ISVOID expr .)
    <               reduce using rule 42 (expr -> ISVOID expr .)
    LE              reduce using rule 42 (expr -> ISVOID expr .)
    =               reduce using rule 42 (expr -> ISVOID expr .)
    ;               reduce using rule 42 (expr -> ISVOID expr .)
    THEN            reduce using rule 42 (expr -> ISVOID expr .)
    )               reduce using rule 42 (expr -> ISVOID expr .)
    LOOP            reduce using rule 42 (expr -> ISVOID expr .)
    OF              reduce using rule 42 (expr -> ISVOID expr .)
    }               reduce using rule 42 (expr -> ISVOID expr .)
    ,               reduce using rule 42 (expr -> ISVOID expr .)
    ELSE            reduce using rule 42 (expr -> ISVOID expr .)
    POOL            reduce using rule 42 (expr -> ISVOID expr .)
    error           reduce using rule 42 (expr -> ISVOID expr .)
    FI              reduce using rule 42 (expr -> ISVOID expr .)
    IN              reduce using rule 42 (expr -> ISVOID expr .)
    .               shift and go to state 70
    @               shift and go to state 71


state 89

    (57) expr -> - expr .
    (24) expr -> expr . . OBJECTID ( expr optional_expressions )
    (25) expr -> expr . . OBJECTID ( expr )
    (26) expr -> expr . . OBJECTID ( )
    (27) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (48) expr -> expr . < expr
    (49) expr -> expr . LE expr
    (50) expr -> expr . = expr
    +               reduce using rule 57 (expr -> - expr .)
    -               reduce using rule 57 (expr -> - expr .)
    *               reduce using rule 57 (expr -> - expr .)
    /               reduce using rule 57 (expr -> - expr .)
    <               reduce using rule 57 (expr -> - expr .)
    LE              reduce using rule 57 (expr -> - expr .)
    =               reduce using rule 57 (expr -> - expr .)
    ;               reduce using rule 57 (expr -> - expr .)
    THEN            reduce using rule 57 (expr -> - expr .)
    )               reduce using rule 57 (expr -> - expr .)
    LOOP            reduce using rule 57 (expr -> - expr .)
    OF              reduce using rule 57 (expr -> - expr .)
    }               reduce using rule 57 (expr -> - expr .)
    ,               reduce using rule 57 (expr -> - expr .)
    ELSE            reduce using rule 57 (expr -> - expr .)
    POOL            reduce using rule 57 (expr -> - expr .)
    error           reduce using rule 57 (expr -> - expr .)
    FI              reduce using rule 57 (expr -> - expr .)
    IN              reduce using rule 57 (expr -> - expr .)
    .               shift and go to state 70
    @               shift and go to state 71


state 90

    (47) expr -> ~ expr .
    (24) expr -> expr . . OBJECTID ( expr optional_expressions )
    (25) expr -> expr . . OBJECTID ( expr )
    (26) expr -> expr . . OBJECTID ( )
    (27) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (48) expr -> expr . < expr
    (49) expr -> expr . LE expr
    (50) expr -> expr . = expr
    +               reduce using rule 47 (expr -> ~ expr .)
    -               reduce using rule 47 (expr -> ~ expr .)
    <               reduce using rule 47 (expr -> ~ expr .)
    LE              reduce using rule 47 (expr -> ~ expr .)
    =               reduce using rule 47 (expr -> ~ expr .)
    ;               reduce using rule 47 (expr -> ~ expr .)
    THEN            reduce using rule 47 (expr -> ~ expr .)
    )               reduce using rule 47 (expr -> ~ expr .)
    LOOP            reduce using rule 47 (expr -> ~ expr .)
    OF              reduce using rule 47 (expr -> ~ expr .)
    }               reduce using rule 47 (expr -> ~ expr .)
    ,               reduce using rule 47 (expr -> ~ expr .)
    ELSE            reduce using rule 47 (expr -> ~ expr .)
    POOL            reduce using rule 47 (expr -> ~ expr .)
    error           reduce using rule 47 (expr -> ~ expr .)
    FI              reduce using rule 47 (expr -> ~ expr .)
    IN              reduce using rule 47 (expr -> ~ expr .)
    .               shift and go to state 70
    @               shift and go to state 71
    *               shift and go to state 74
    /               shift and go to state 75


state 91

    (51) expr -> NOT expr .
    (24) expr -> expr . . OBJECTID ( expr optional_expressions )
    (25) expr -> expr . . OBJECTID ( expr )
    (26) expr -> expr . . OBJECTID ( )
    (27) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (48) expr -> expr . < expr
    (49) expr -> expr . LE expr
    (50) expr -> expr . = expr
    ;               reduce using rule 51 (expr -> NOT expr .)
    THEN            reduce using rule 51 (expr -> NOT expr .)
    )               reduce using rule 51 (expr -> NOT expr .)
    LOOP            reduce using rule 51 (expr -> NOT expr .)
    OF              reduce using rule 51 (expr -> NOT expr .)
    }               reduce using rule 51 (expr -> NOT expr .)
    ,               reduce using rule 51 (expr -> NOT expr .)
    ELSE            reduce using rule 51 (expr -> NOT expr .)
    POOL            reduce using rule 51 (expr -> NOT expr .)
    error           reduce using rule 51 (expr -> NOT expr .)
    FI              reduce using rule 51 (expr -> NOT expr .)
    IN              reduce using rule 51 (expr -> NOT expr .)
    .               shift and go to state 70
    @               shift and go to state 71
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    <               shift and go to state 76
    LE              shift and go to state 77
    =               shift and go to state 78


state 92

    (11) feature -> OBJECTID ( optional_formal ) : TYPEID { . error }
    error           shift and go to state 118


state 93

    (12) feature -> OBJECTID ( ) : TYPEID { error . }
    }               shift and go to state 119


state 94

    (13) feature -> OBJECTID ( ) : TYPEID { expr . }
    (24) expr -> expr . . OBJECTID ( expr optional_expressions )
    (25) expr -> expr . . OBJECTID ( expr )
    (26) expr -> expr . . OBJECTID ( )
    (27) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (48) expr -> expr . < expr
    (49) expr -> expr . LE expr
    (50) expr -> expr . = expr
    }               shift and go to state 120
    .               shift and go to state 70
    @               shift and go to state 71
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    <               shift and go to state 76
    LE              shift and go to state 77
    =               shift and go to state 78


state 95

    (14) feature -> OBJECTID ( formal ) : TYPEID { . expr }
    (21) expr -> . IF expr THEN expr ELSE expr error
    (22) expr -> . IF expr THEN error FI
    (23) expr -> . OBJECTID ASSIGN expr
    (24) expr -> . expr . OBJECTID ( expr optional_expressions )
    (25) expr -> . expr . OBJECTID ( expr )
    (26) expr -> . expr . OBJECTID ( )
    (27) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . OBJECTID ( )
    (31) expr -> . OBJECTID ( expr optional_expressions )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . IF expr THEN expr ELSE expr FI
    (34) expr -> . WHILE expr LOOP expr POOL
    (35) expr -> . { lista_expr }
    (36) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (37) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID IN expr
    (39) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (40) expr -> . CASE expr OF lista_asig ESAC
    (41) expr -> . NEW TYPEID
    (42) expr -> . ISVOID expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . ~ expr
    (48) expr -> . expr < expr
    (49) expr -> . expr LE expr
    (50) expr -> . expr = expr
    (51) expr -> . NOT expr
    (52) expr -> . ( expr )
    (53) expr -> . OBJECTID
    (54) expr -> . INT_CONST
    (55) expr -> . STR_CONST
    (56) expr -> . BOOL_CONST
    (57) expr -> . - expr
    IF              shift and go to state 50
    OBJECTID        shift and go to state 48
    WHILE           shift and go to state 52
    {               shift and go to state 53
    LET             shift and go to state 54
    CASE            shift and go to state 55
    NEW             shift and go to state 56
    ISVOID          shift and go to state 57
    ~               shift and go to state 59
    NOT             shift and go to state 60
    (               shift and go to state 51
    INT_CONST       shift and go to state 61
    STR_CONST       shift and go to state 62
    BOOL_CONST      shift and go to state 63
    -               shift and go to state 58

    expr                           shift and go to state 121

state 96

    (15) feature -> OBJECTID ( formal optional_formal ) : TYPEID . { expr }
    {               shift and go to state 122


state 97

    (23) expr -> OBJECTID ASSIGN expr .
    (24) expr -> expr . . OBJECTID ( expr optional_expressions )
    (25) expr -> expr . . OBJECTID ( expr )
    (26) expr -> expr . . OBJECTID ( )
    (27) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (48) expr -> expr . < expr
    (49) expr -> expr . LE expr
    (50) expr -> expr . = expr
    ;               reduce using rule 23 (expr -> OBJECTID ASSIGN expr .)
    THEN            reduce using rule 23 (expr -> OBJECTID ASSIGN expr .)
    )               reduce using rule 23 (expr -> OBJECTID ASSIGN expr .)
    LOOP            reduce using rule 23 (expr -> OBJECTID ASSIGN expr .)
    OF              reduce using rule 23 (expr -> OBJECTID ASSIGN expr .)
    }               reduce using rule 23 (expr -> OBJECTID ASSIGN expr .)
    ,               reduce using rule 23 (expr -> OBJECTID ASSIGN expr .)
    ELSE            reduce using rule 23 (expr -> OBJECTID ASSIGN expr .)
    POOL            reduce using rule 23 (expr -> OBJECTID ASSIGN expr .)
    error           reduce using rule 23 (expr -> OBJECTID ASSIGN expr .)
    FI              reduce using rule 23 (expr -> OBJECTID ASSIGN expr .)
    IN              reduce using rule 23 (expr -> OBJECTID ASSIGN expr .)
    .               shift and go to state 70
    @               shift and go to state 71
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    <               shift and go to state 76
    LE              shift and go to state 77
    =               shift and go to state 78


state 98

    (30) expr -> OBJECTID ( ) .
    .               reduce using rule 30 (expr -> OBJECTID ( ) .)
    @               reduce using rule 30 (expr -> OBJECTID ( ) .)
    +               reduce using rule 30 (expr -> OBJECTID ( ) .)
    -               reduce using rule 30 (expr -> OBJECTID ( ) .)
    *               reduce using rule 30 (expr -> OBJECTID ( ) .)
    /               reduce using rule 30 (expr -> OBJECTID ( ) .)
    <               reduce using rule 30 (expr -> OBJECTID ( ) .)
    LE              reduce using rule 30 (expr -> OBJECTID ( ) .)
    =               reduce using rule 30 (expr -> OBJECTID ( ) .)
    ;               reduce using rule 30 (expr -> OBJECTID ( ) .)
    THEN            reduce using rule 30 (expr -> OBJECTID ( ) .)
    )               reduce using rule 30 (expr -> OBJECTID ( ) .)
    LOOP            reduce using rule 30 (expr -> OBJECTID ( ) .)
    OF              reduce using rule 30 (expr -> OBJECTID ( ) .)
    }               reduce using rule 30 (expr -> OBJECTID ( ) .)
    ,               reduce using rule 30 (expr -> OBJECTID ( ) .)
    ELSE            reduce using rule 30 (expr -> OBJECTID ( ) .)
    POOL            reduce using rule 30 (expr -> OBJECTID ( ) .)
    error           reduce using rule 30 (expr -> OBJECTID ( ) .)
    FI              reduce using rule 30 (expr -> OBJECTID ( ) .)
    IN              reduce using rule 30 (expr -> OBJECTID ( ) .)


state 99

    (31) expr -> OBJECTID ( expr . optional_expressions )
    (32) expr -> OBJECTID ( expr . )
    (24) expr -> expr . . OBJECTID ( expr optional_expressions )
    (25) expr -> expr . . OBJECTID ( expr )
    (26) expr -> expr . . OBJECTID ( )
    (27) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (48) expr -> expr . < expr
    (49) expr -> expr . LE expr
    (50) expr -> expr . = expr
    (67) optional_expressions -> . , expr optional_expressions
    (68) optional_expressions -> . , expr
    )               shift and go to state 124
    .               shift and go to state 70
    @               shift and go to state 71
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    <               shift and go to state 76
    LE              shift and go to state 77
    =               shift and go to state 78
    ,               shift and go to state 125

    optional_expressions           shift and go to state 123

state 100

    (24) expr -> expr . OBJECTID . ( expr optional_expressions )
    (25) expr -> expr . OBJECTID . ( expr )
    (26) expr -> expr . OBJECTID . ( )
    (               shift and go to state 126


state 101

    (27) expr -> expr @ TYPEID . . OBJECTID ( expr optional_expressions )
    (28) expr -> expr @ TYPEID . . OBJECTID ( expr )
    (29) expr -> expr @ TYPEID . . OBJECTID ( )
    .               shift and go to state 127


state 102

    (43) expr -> expr + expr .
    (24) expr -> expr . . OBJECTID ( expr optional_expressions )
    (25) expr -> expr . . OBJECTID ( expr )
    (26) expr -> expr . . OBJECTID ( )
    (27) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (48) expr -> expr . < expr
    (49) expr -> expr . LE expr
    (50) expr -> expr . = expr
    +               reduce using rule 43 (expr -> expr + expr .)
    -               reduce using rule 43 (expr -> expr + expr .)
    <               reduce using rule 43 (expr -> expr + expr .)
    LE              reduce using rule 43 (expr -> expr + expr .)
    =               reduce using rule 43 (expr -> expr + expr .)
    ;               reduce using rule 43 (expr -> expr + expr .)
    THEN            reduce using rule 43 (expr -> expr + expr .)
    )               reduce using rule 43 (expr -> expr + expr .)
    LOOP            reduce using rule 43 (expr -> expr + expr .)
    OF              reduce using rule 43 (expr -> expr + expr .)
    }               reduce using rule 43 (expr -> expr + expr .)
    ,               reduce using rule 43 (expr -> expr + expr .)
    ELSE            reduce using rule 43 (expr -> expr + expr .)
    POOL            reduce using rule 43 (expr -> expr + expr .)
    error           reduce using rule 43 (expr -> expr + expr .)
    FI              reduce using rule 43 (expr -> expr + expr .)
    IN              reduce using rule 43 (expr -> expr + expr .)
    .               shift and go to state 70
    @               shift and go to state 71
    *               shift and go to state 74
    /               shift and go to state 75


state 103

    (44) expr -> expr - expr .
    (24) expr -> expr . . OBJECTID ( expr optional_expressions )
    (25) expr -> expr . . OBJECTID ( expr )
    (26) expr -> expr . . OBJECTID ( )
    (27) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (48) expr -> expr . < expr
    (49) expr -> expr . LE expr
    (50) expr -> expr . = expr
    +               reduce using rule 44 (expr -> expr - expr .)
    -               reduce using rule 44 (expr -> expr - expr .)
    <               reduce using rule 44 (expr -> expr - expr .)
    LE              reduce using rule 44 (expr -> expr - expr .)
    =               reduce using rule 44 (expr -> expr - expr .)
    ;               reduce using rule 44 (expr -> expr - expr .)
    THEN            reduce using rule 44 (expr -> expr - expr .)
    )               reduce using rule 44 (expr -> expr - expr .)
    LOOP            reduce using rule 44 (expr -> expr - expr .)
    OF              reduce using rule 44 (expr -> expr - expr .)
    }               reduce using rule 44 (expr -> expr - expr .)
    ,               reduce using rule 44 (expr -> expr - expr .)
    ELSE            reduce using rule 44 (expr -> expr - expr .)
    POOL            reduce using rule 44 (expr -> expr - expr .)
    error           reduce using rule 44 (expr -> expr - expr .)
    FI              reduce using rule 44 (expr -> expr - expr .)
    IN              reduce using rule 44 (expr -> expr - expr .)
    .               shift and go to state 70
    @               shift and go to state 71
    *               shift and go to state 74
    /               shift and go to state 75


state 104

    (45) expr -> expr * expr .
    (24) expr -> expr . . OBJECTID ( expr optional_expressions )
    (25) expr -> expr . . OBJECTID ( expr )
    (26) expr -> expr . . OBJECTID ( )
    (27) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (48) expr -> expr . < expr
    (49) expr -> expr . LE expr
    (50) expr -> expr . = expr
    +               reduce using rule 45 (expr -> expr * expr .)
    -               reduce using rule 45 (expr -> expr * expr .)
    *               reduce using rule 45 (expr -> expr * expr .)
    /               reduce using rule 45 (expr -> expr * expr .)
    <               reduce using rule 45 (expr -> expr * expr .)
    LE              reduce using rule 45 (expr -> expr * expr .)
    =               reduce using rule 45 (expr -> expr * expr .)
    ;               reduce using rule 45 (expr -> expr * expr .)
    THEN            reduce using rule 45 (expr -> expr * expr .)
    )               reduce using rule 45 (expr -> expr * expr .)
    LOOP            reduce using rule 45 (expr -> expr * expr .)
    OF              reduce using rule 45 (expr -> expr * expr .)
    }               reduce using rule 45 (expr -> expr * expr .)
    ,               reduce using rule 45 (expr -> expr * expr .)
    ELSE            reduce using rule 45 (expr -> expr * expr .)
    POOL            reduce using rule 45 (expr -> expr * expr .)
    error           reduce using rule 45 (expr -> expr * expr .)
    FI              reduce using rule 45 (expr -> expr * expr .)
    IN              reduce using rule 45 (expr -> expr * expr .)
    .               shift and go to state 70
    @               shift and go to state 71


state 105

    (46) expr -> expr / expr .
    (24) expr -> expr . . OBJECTID ( expr optional_expressions )
    (25) expr -> expr . . OBJECTID ( expr )
    (26) expr -> expr . . OBJECTID ( )
    (27) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (48) expr -> expr . < expr
    (49) expr -> expr . LE expr
    (50) expr -> expr . = expr
    +               reduce using rule 46 (expr -> expr / expr .)
    -               reduce using rule 46 (expr -> expr / expr .)
    *               reduce using rule 46 (expr -> expr / expr .)
    /               reduce using rule 46 (expr -> expr / expr .)
    <               reduce using rule 46 (expr -> expr / expr .)
    LE              reduce using rule 46 (expr -> expr / expr .)
    =               reduce using rule 46 (expr -> expr / expr .)
    ;               reduce using rule 46 (expr -> expr / expr .)
    THEN            reduce using rule 46 (expr -> expr / expr .)
    )               reduce using rule 46 (expr -> expr / expr .)
    LOOP            reduce using rule 46 (expr -> expr / expr .)
    OF              reduce using rule 46 (expr -> expr / expr .)
    }               reduce using rule 46 (expr -> expr / expr .)
    ,               reduce using rule 46 (expr -> expr / expr .)
    ELSE            reduce using rule 46 (expr -> expr / expr .)
    POOL            reduce using rule 46 (expr -> expr / expr .)
    error           reduce using rule 46 (expr -> expr / expr .)
    FI              reduce using rule 46 (expr -> expr / expr .)
    IN              reduce using rule 46 (expr -> expr / expr .)
    .               shift and go to state 70
    @               shift and go to state 71


state 106

    (48) expr -> expr < expr .
    (24) expr -> expr . . OBJECTID ( expr optional_expressions )
    (25) expr -> expr . . OBJECTID ( expr )
    (26) expr -> expr . . OBJECTID ( )
    (27) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (48) expr -> expr . < expr
    (49) expr -> expr . LE expr
    (50) expr -> expr . = expr
    <               reduce using rule 48 (expr -> expr < expr .)
    LE              reduce using rule 48 (expr -> expr < expr .)
    =               reduce using rule 48 (expr -> expr < expr .)
    ;               reduce using rule 48 (expr -> expr < expr .)
    THEN            reduce using rule 48 (expr -> expr < expr .)
    )               reduce using rule 48 (expr -> expr < expr .)
    LOOP            reduce using rule 48 (expr -> expr < expr .)
    OF              reduce using rule 48 (expr -> expr < expr .)
    }               reduce using rule 48 (expr -> expr < expr .)
    ,               reduce using rule 48 (expr -> expr < expr .)
    ELSE            reduce using rule 48 (expr -> expr < expr .)
    POOL            reduce using rule 48 (expr -> expr < expr .)
    error           reduce using rule 48 (expr -> expr < expr .)
    FI              reduce using rule 48 (expr -> expr < expr .)
    IN              reduce using rule 48 (expr -> expr < expr .)
    .               shift and go to state 70
    @               shift and go to state 71
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75


state 107

    (49) expr -> expr LE expr .
    (24) expr -> expr . . OBJECTID ( expr optional_expressions )
    (25) expr -> expr . . OBJECTID ( expr )
    (26) expr -> expr . . OBJECTID ( )
    (27) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (48) expr -> expr . < expr
    (49) expr -> expr . LE expr
    (50) expr -> expr . = expr
    <               reduce using rule 49 (expr -> expr LE expr .)
    LE              reduce using rule 49 (expr -> expr LE expr .)
    =               reduce using rule 49 (expr -> expr LE expr .)
    ;               reduce using rule 49 (expr -> expr LE expr .)
    THEN            reduce using rule 49 (expr -> expr LE expr .)
    )               reduce using rule 49 (expr -> expr LE expr .)
    LOOP            reduce using rule 49 (expr -> expr LE expr .)
    OF              reduce using rule 49 (expr -> expr LE expr .)
    }               reduce using rule 49 (expr -> expr LE expr .)
    ,               reduce using rule 49 (expr -> expr LE expr .)
    ELSE            reduce using rule 49 (expr -> expr LE expr .)
    POOL            reduce using rule 49 (expr -> expr LE expr .)
    error           reduce using rule 49 (expr -> expr LE expr .)
    FI              reduce using rule 49 (expr -> expr LE expr .)
    IN              reduce using rule 49 (expr -> expr LE expr .)
    .               shift and go to state 70
    @               shift and go to state 71
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75


state 108

    (50) expr -> expr = expr .
    (24) expr -> expr . . OBJECTID ( expr optional_expressions )
    (25) expr -> expr . . OBJECTID ( expr )
    (26) expr -> expr . . OBJECTID ( )
    (27) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (48) expr -> expr . < expr
    (49) expr -> expr . LE expr
    (50) expr -> expr . = expr
    <               reduce using rule 50 (expr -> expr = expr .)
    LE              reduce using rule 50 (expr -> expr = expr .)
    =               reduce using rule 50 (expr -> expr = expr .)
    ;               reduce using rule 50 (expr -> expr = expr .)
    THEN            reduce using rule 50 (expr -> expr = expr .)
    )               reduce using rule 50 (expr -> expr = expr .)
    LOOP            reduce using rule 50 (expr -> expr = expr .)
    OF              reduce using rule 50 (expr -> expr = expr .)
    }               reduce using rule 50 (expr -> expr = expr .)
    ,               reduce using rule 50 (expr -> expr = expr .)
    ELSE            reduce using rule 50 (expr -> expr = expr .)
    POOL            reduce using rule 50 (expr -> expr = expr .)
    error           reduce using rule 50 (expr -> expr = expr .)
    FI              reduce using rule 50 (expr -> expr = expr .)
    IN              reduce using rule 50 (expr -> expr = expr .)
    .               shift and go to state 70
    @               shift and go to state 71
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75


state 109

    (21) expr -> IF expr THEN . expr ELSE expr error
    (22) expr -> IF expr THEN . error FI
    (33) expr -> IF expr THEN . expr ELSE expr FI
    (21) expr -> . IF expr THEN expr ELSE expr error
    (22) expr -> . IF expr THEN error FI
    (23) expr -> . OBJECTID ASSIGN expr
    (24) expr -> . expr . OBJECTID ( expr optional_expressions )
    (25) expr -> . expr . OBJECTID ( expr )
    (26) expr -> . expr . OBJECTID ( )
    (27) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . OBJECTID ( )
    (31) expr -> . OBJECTID ( expr optional_expressions )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . IF expr THEN expr ELSE expr FI
    (34) expr -> . WHILE expr LOOP expr POOL
    (35) expr -> . { lista_expr }
    (36) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (37) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID IN expr
    (39) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (40) expr -> . CASE expr OF lista_asig ESAC
    (41) expr -> . NEW TYPEID
    (42) expr -> . ISVOID expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . ~ expr
    (48) expr -> . expr < expr
    (49) expr -> . expr LE expr
    (50) expr -> . expr = expr
    (51) expr -> . NOT expr
    (52) expr -> . ( expr )
    (53) expr -> . OBJECTID
    (54) expr -> . INT_CONST
    (55) expr -> . STR_CONST
    (56) expr -> . BOOL_CONST
    (57) expr -> . - expr
    error           shift and go to state 129
    IF              shift and go to state 50
    OBJECTID        shift and go to state 48
    WHILE           shift and go to state 52
    {               shift and go to state 53
    LET             shift and go to state 54
    CASE            shift and go to state 55
    NEW             shift and go to state 56
    ISVOID          shift and go to state 57
    ~               shift and go to state 59
    NOT             shift and go to state 60
    (               shift and go to state 51
    INT_CONST       shift and go to state 61
    STR_CONST       shift and go to state 62
    BOOL_CONST      shift and go to state 63
    -               shift and go to state 58

    expr                           shift and go to state 128

state 110

    (52) expr -> ( expr ) .
    .               reduce using rule 52 (expr -> ( expr ) .)
    @               reduce using rule 52 (expr -> ( expr ) .)
    +               reduce using rule 52 (expr -> ( expr ) .)
    -               reduce using rule 52 (expr -> ( expr ) .)
    *               reduce using rule 52 (expr -> ( expr ) .)
    /               reduce using rule 52 (expr -> ( expr ) .)
    <               reduce using rule 52 (expr -> ( expr ) .)
    LE              reduce using rule 52 (expr -> ( expr ) .)
    =               reduce using rule 52 (expr -> ( expr ) .)
    ;               reduce using rule 52 (expr -> ( expr ) .)
    THEN            reduce using rule 52 (expr -> ( expr ) .)
    )               reduce using rule 52 (expr -> ( expr ) .)
    LOOP            reduce using rule 52 (expr -> ( expr ) .)
    OF              reduce using rule 52 (expr -> ( expr ) .)
    }               reduce using rule 52 (expr -> ( expr ) .)
    ,               reduce using rule 52 (expr -> ( expr ) .)
    ELSE            reduce using rule 52 (expr -> ( expr ) .)
    POOL            reduce using rule 52 (expr -> ( expr ) .)
    error           reduce using rule 52 (expr -> ( expr ) .)
    FI              reduce using rule 52 (expr -> ( expr ) .)
    IN              reduce using rule 52 (expr -> ( expr ) .)


state 111

    (34) expr -> WHILE expr LOOP . expr POOL
    (21) expr -> . IF expr THEN expr ELSE expr error
    (22) expr -> . IF expr THEN error FI
    (23) expr -> . OBJECTID ASSIGN expr
    (24) expr -> . expr . OBJECTID ( expr optional_expressions )
    (25) expr -> . expr . OBJECTID ( expr )
    (26) expr -> . expr . OBJECTID ( )
    (27) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . OBJECTID ( )
    (31) expr -> . OBJECTID ( expr optional_expressions )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . IF expr THEN expr ELSE expr FI
    (34) expr -> . WHILE expr LOOP expr POOL
    (35) expr -> . { lista_expr }
    (36) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (37) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID IN expr
    (39) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (40) expr -> . CASE expr OF lista_asig ESAC
    (41) expr -> . NEW TYPEID
    (42) expr -> . ISVOID expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . ~ expr
    (48) expr -> . expr < expr
    (49) expr -> . expr LE expr
    (50) expr -> . expr = expr
    (51) expr -> . NOT expr
    (52) expr -> . ( expr )
    (53) expr -> . OBJECTID
    (54) expr -> . INT_CONST
    (55) expr -> . STR_CONST
    (56) expr -> . BOOL_CONST
    (57) expr -> . - expr
    IF              shift and go to state 50
    OBJECTID        shift and go to state 48
    WHILE           shift and go to state 52
    {               shift and go to state 53
    LET             shift and go to state 54
    CASE            shift and go to state 55
    NEW             shift and go to state 56
    ISVOID          shift and go to state 57
    ~               shift and go to state 59
    NOT             shift and go to state 60
    (               shift and go to state 51
    INT_CONST       shift and go to state 61
    STR_CONST       shift and go to state 62
    BOOL_CONST      shift and go to state 63
    -               shift and go to state 58

    expr                           shift and go to state 130

state 112

    (35) expr -> { lista_expr } .
    .               reduce using rule 35 (expr -> { lista_expr } .)
    @               reduce using rule 35 (expr -> { lista_expr } .)
    +               reduce using rule 35 (expr -> { lista_expr } .)
    -               reduce using rule 35 (expr -> { lista_expr } .)
    *               reduce using rule 35 (expr -> { lista_expr } .)
    /               reduce using rule 35 (expr -> { lista_expr } .)
    <               reduce using rule 35 (expr -> { lista_expr } .)
    LE              reduce using rule 35 (expr -> { lista_expr } .)
    =               reduce using rule 35 (expr -> { lista_expr } .)
    ;               reduce using rule 35 (expr -> { lista_expr } .)
    THEN            reduce using rule 35 (expr -> { lista_expr } .)
    )               reduce using rule 35 (expr -> { lista_expr } .)
    LOOP            reduce using rule 35 (expr -> { lista_expr } .)
    OF              reduce using rule 35 (expr -> { lista_expr } .)
    }               reduce using rule 35 (expr -> { lista_expr } .)
    ,               reduce using rule 35 (expr -> { lista_expr } .)
    ELSE            reduce using rule 35 (expr -> { lista_expr } .)
    POOL            reduce using rule 35 (expr -> { lista_expr } .)
    error           reduce using rule 35 (expr -> { lista_expr } .)
    FI              reduce using rule 35 (expr -> { lista_expr } .)
    IN              reduce using rule 35 (expr -> { lista_expr } .)


state 113

    (65) lista_expr -> lista_expr expr . ;
    (24) expr -> expr . . OBJECTID ( expr optional_expressions )
    (25) expr -> expr . . OBJECTID ( expr )
    (26) expr -> expr . . OBJECTID ( )
    (27) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (48) expr -> expr . < expr
    (49) expr -> expr . LE expr
    (50) expr -> expr . = expr
    ;               shift and go to state 131
    .               shift and go to state 70
    @               shift and go to state 71
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    <               shift and go to state 76
    LE              shift and go to state 77
    =               shift and go to state 78


state 114

    (64) lista_expr -> error ; .
    }               reduce using rule 64 (lista_expr -> error ; .)
    IF              reduce using rule 64 (lista_expr -> error ; .)
    OBJECTID        reduce using rule 64 (lista_expr -> error ; .)
    WHILE           reduce using rule 64 (lista_expr -> error ; .)
    {               reduce using rule 64 (lista_expr -> error ; .)
    LET             reduce using rule 64 (lista_expr -> error ; .)
    CASE            reduce using rule 64 (lista_expr -> error ; .)
    NEW             reduce using rule 64 (lista_expr -> error ; .)
    ISVOID          reduce using rule 64 (lista_expr -> error ; .)
    ~               reduce using rule 64 (lista_expr -> error ; .)
    NOT             reduce using rule 64 (lista_expr -> error ; .)
    (               reduce using rule 64 (lista_expr -> error ; .)
    INT_CONST       reduce using rule 64 (lista_expr -> error ; .)
    STR_CONST       reduce using rule 64 (lista_expr -> error ; .)
    BOOL_CONST      reduce using rule 64 (lista_expr -> error ; .)
    -               reduce using rule 64 (lista_expr -> error ; .)


state 115

    (66) lista_expr -> expr ; .
    }               reduce using rule 66 (lista_expr -> expr ; .)
    IF              reduce using rule 66 (lista_expr -> expr ; .)
    OBJECTID        reduce using rule 66 (lista_expr -> expr ; .)
    WHILE           reduce using rule 66 (lista_expr -> expr ; .)
    {               reduce using rule 66 (lista_expr -> expr ; .)
    LET             reduce using rule 66 (lista_expr -> expr ; .)
    CASE            reduce using rule 66 (lista_expr -> expr ; .)
    NEW             reduce using rule 66 (lista_expr -> expr ; .)
    ISVOID          reduce using rule 66 (lista_expr -> expr ; .)
    ~               reduce using rule 66 (lista_expr -> expr ; .)
    NOT             reduce using rule 66 (lista_expr -> expr ; .)
    (               reduce using rule 66 (lista_expr -> expr ; .)
    INT_CONST       reduce using rule 66 (lista_expr -> expr ; .)
    STR_CONST       reduce using rule 66 (lista_expr -> expr ; .)
    BOOL_CONST      reduce using rule 66 (lista_expr -> expr ; .)
    -               reduce using rule 66 (lista_expr -> expr ; .)


state 116

    (36) expr -> LET OBJECTID : . TYPEID optional_assigns IN expr
    (37) expr -> LET OBJECTID : . TYPEID ASSIGN expr optional_assigns IN expr
    (38) expr -> LET OBJECTID : . TYPEID IN expr
    (39) expr -> LET OBJECTID : . TYPEID ASSIGN expr IN expr
    TYPEID          shift and go to state 132


state 117

    (40) expr -> CASE expr OF . lista_asig ESAC
    (58) lista_asig -> . OBJECTID : TYPEID DARROW expr ; lista_asig
    (59) lista_asig -> . OBJECTID : TYPEID DARROW expr ;
    OBJECTID        shift and go to state 134

    lista_asig                     shift and go to state 133

state 118

    (11) feature -> OBJECTID ( optional_formal ) : TYPEID { error . }
    }               shift and go to state 135


state 119

    (12) feature -> OBJECTID ( ) : TYPEID { error } .
    ;               reduce using rule 12 (feature -> OBJECTID ( ) : TYPEID { error } .)


state 120

    (13) feature -> OBJECTID ( ) : TYPEID { expr } .
    ;               reduce using rule 13 (feature -> OBJECTID ( ) : TYPEID { expr } .)


state 121

    (14) feature -> OBJECTID ( formal ) : TYPEID { expr . }
    (24) expr -> expr . . OBJECTID ( expr optional_expressions )
    (25) expr -> expr . . OBJECTID ( expr )
    (26) expr -> expr . . OBJECTID ( )
    (27) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (48) expr -> expr . < expr
    (49) expr -> expr . LE expr
    (50) expr -> expr . = expr
    }               shift and go to state 136
    .               shift and go to state 70
    @               shift and go to state 71
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    <               shift and go to state 76
    LE              shift and go to state 77
    =               shift and go to state 78


state 122

    (15) feature -> OBJECTID ( formal optional_formal ) : TYPEID { . expr }
    (21) expr -> . IF expr THEN expr ELSE expr error
    (22) expr -> . IF expr THEN error FI
    (23) expr -> . OBJECTID ASSIGN expr
    (24) expr -> . expr . OBJECTID ( expr optional_expressions )
    (25) expr -> . expr . OBJECTID ( expr )
    (26) expr -> . expr . OBJECTID ( )
    (27) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . OBJECTID ( )
    (31) expr -> . OBJECTID ( expr optional_expressions )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . IF expr THEN expr ELSE expr FI
    (34) expr -> . WHILE expr LOOP expr POOL
    (35) expr -> . { lista_expr }
    (36) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (37) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID IN expr
    (39) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (40) expr -> . CASE expr OF lista_asig ESAC
    (41) expr -> . NEW TYPEID
    (42) expr -> . ISVOID expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . ~ expr
    (48) expr -> . expr < expr
    (49) expr -> . expr LE expr
    (50) expr -> . expr = expr
    (51) expr -> . NOT expr
    (52) expr -> . ( expr )
    (53) expr -> . OBJECTID
    (54) expr -> . INT_CONST
    (55) expr -> . STR_CONST
    (56) expr -> . BOOL_CONST
    (57) expr -> . - expr
    IF              shift and go to state 50
    OBJECTID        shift and go to state 48
    WHILE           shift and go to state 52
    {               shift and go to state 53
    LET             shift and go to state 54
    CASE            shift and go to state 55
    NEW             shift and go to state 56
    ISVOID          shift and go to state 57
    ~               shift and go to state 59
    NOT             shift and go to state 60
    (               shift and go to state 51
    INT_CONST       shift and go to state 61
    STR_CONST       shift and go to state 62
    BOOL_CONST      shift and go to state 63
    -               shift and go to state 58

    expr                           shift and go to state 137

state 123

    (31) expr -> OBJECTID ( expr optional_expressions . )
    )               shift and go to state 138


state 124

    (32) expr -> OBJECTID ( expr ) .
    .               reduce using rule 32 (expr -> OBJECTID ( expr ) .)
    @               reduce using rule 32 (expr -> OBJECTID ( expr ) .)
    +               reduce using rule 32 (expr -> OBJECTID ( expr ) .)
    -               reduce using rule 32 (expr -> OBJECTID ( expr ) .)
    *               reduce using rule 32 (expr -> OBJECTID ( expr ) .)
    /               reduce using rule 32 (expr -> OBJECTID ( expr ) .)
    <               reduce using rule 32 (expr -> OBJECTID ( expr ) .)
    LE              reduce using rule 32 (expr -> OBJECTID ( expr ) .)
    =               reduce using rule 32 (expr -> OBJECTID ( expr ) .)
    ;               reduce using rule 32 (expr -> OBJECTID ( expr ) .)
    THEN            reduce using rule 32 (expr -> OBJECTID ( expr ) .)
    )               reduce using rule 32 (expr -> OBJECTID ( expr ) .)
    LOOP            reduce using rule 32 (expr -> OBJECTID ( expr ) .)
    OF              reduce using rule 32 (expr -> OBJECTID ( expr ) .)
    }               reduce using rule 32 (expr -> OBJECTID ( expr ) .)
    ,               reduce using rule 32 (expr -> OBJECTID ( expr ) .)
    ELSE            reduce using rule 32 (expr -> OBJECTID ( expr ) .)
    POOL            reduce using rule 32 (expr -> OBJECTID ( expr ) .)
    error           reduce using rule 32 (expr -> OBJECTID ( expr ) .)
    FI              reduce using rule 32 (expr -> OBJECTID ( expr ) .)
    IN              reduce using rule 32 (expr -> OBJECTID ( expr ) .)


state 125

    (67) optional_expressions -> , . expr optional_expressions
    (68) optional_expressions -> , . expr
    (21) expr -> . IF expr THEN expr ELSE expr error
    (22) expr -> . IF expr THEN error FI
    (23) expr -> . OBJECTID ASSIGN expr
    (24) expr -> . expr . OBJECTID ( expr optional_expressions )
    (25) expr -> . expr . OBJECTID ( expr )
    (26) expr -> . expr . OBJECTID ( )
    (27) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . OBJECTID ( )
    (31) expr -> . OBJECTID ( expr optional_expressions )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . IF expr THEN expr ELSE expr FI
    (34) expr -> . WHILE expr LOOP expr POOL
    (35) expr -> . { lista_expr }
    (36) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (37) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID IN expr
    (39) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (40) expr -> . CASE expr OF lista_asig ESAC
    (41) expr -> . NEW TYPEID
    (42) expr -> . ISVOID expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . ~ expr
    (48) expr -> . expr < expr
    (49) expr -> . expr LE expr
    (50) expr -> . expr = expr
    (51) expr -> . NOT expr
    (52) expr -> . ( expr )
    (53) expr -> . OBJECTID
    (54) expr -> . INT_CONST
    (55) expr -> . STR_CONST
    (56) expr -> . BOOL_CONST
    (57) expr -> . - expr
    IF              shift and go to state 50
    OBJECTID        shift and go to state 48
    WHILE           shift and go to state 52
    {               shift and go to state 53
    LET             shift and go to state 54
    CASE            shift and go to state 55
    NEW             shift and go to state 56
    ISVOID          shift and go to state 57
    ~               shift and go to state 59
    NOT             shift and go to state 60
    (               shift and go to state 51
    INT_CONST       shift and go to state 61
    STR_CONST       shift and go to state 62
    BOOL_CONST      shift and go to state 63
    -               shift and go to state 58

    expr                           shift and go to state 139

state 126

    (24) expr -> expr . OBJECTID ( . expr optional_expressions )
    (25) expr -> expr . OBJECTID ( . expr )
    (26) expr -> expr . OBJECTID ( . )
    (21) expr -> . IF expr THEN expr ELSE expr error
    (22) expr -> . IF expr THEN error FI
    (23) expr -> . OBJECTID ASSIGN expr
    (24) expr -> . expr . OBJECTID ( expr optional_expressions )
    (25) expr -> . expr . OBJECTID ( expr )
    (26) expr -> . expr . OBJECTID ( )
    (27) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . OBJECTID ( )
    (31) expr -> . OBJECTID ( expr optional_expressions )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . IF expr THEN expr ELSE expr FI
    (34) expr -> . WHILE expr LOOP expr POOL
    (35) expr -> . { lista_expr }
    (36) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (37) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID IN expr
    (39) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (40) expr -> . CASE expr OF lista_asig ESAC
    (41) expr -> . NEW TYPEID
    (42) expr -> . ISVOID expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . ~ expr
    (48) expr -> . expr < expr
    (49) expr -> . expr LE expr
    (50) expr -> . expr = expr
    (51) expr -> . NOT expr
    (52) expr -> . ( expr )
    (53) expr -> . OBJECTID
    (54) expr -> . INT_CONST
    (55) expr -> . STR_CONST
    (56) expr -> . BOOL_CONST
    (57) expr -> . - expr
    )               shift and go to state 141
    IF              shift and go to state 50
    OBJECTID        shift and go to state 48
    WHILE           shift and go to state 52
    {               shift and go to state 53
    LET             shift and go to state 54
    CASE            shift and go to state 55
    NEW             shift and go to state 56
    ISVOID          shift and go to state 57
    ~               shift and go to state 59
    NOT             shift and go to state 60
    (               shift and go to state 51
    INT_CONST       shift and go to state 61
    STR_CONST       shift and go to state 62
    BOOL_CONST      shift and go to state 63
    -               shift and go to state 58

    expr                           shift and go to state 140

state 127

    (27) expr -> expr @ TYPEID . . OBJECTID ( expr optional_expressions )
    (28) expr -> expr @ TYPEID . . OBJECTID ( expr )
    (29) expr -> expr @ TYPEID . . OBJECTID ( )
    OBJECTID        shift and go to state 142


state 128

    (21) expr -> IF expr THEN expr . ELSE expr error
    (33) expr -> IF expr THEN expr . ELSE expr FI
    (24) expr -> expr . . OBJECTID ( expr optional_expressions )
    (25) expr -> expr . . OBJECTID ( expr )
    (26) expr -> expr . . OBJECTID ( )
    (27) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (48) expr -> expr . < expr
    (49) expr -> expr . LE expr
    (50) expr -> expr . = expr
    ELSE            shift and go to state 143
    .               shift and go to state 70
    @               shift and go to state 71
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    <               shift and go to state 76
    LE              shift and go to state 77
    =               shift and go to state 78


state 129

    (22) expr -> IF expr THEN error . FI
    FI              shift and go to state 144


state 130

    (34) expr -> WHILE expr LOOP expr . POOL
    (24) expr -> expr . . OBJECTID ( expr optional_expressions )
    (25) expr -> expr . . OBJECTID ( expr )
    (26) expr -> expr . . OBJECTID ( )
    (27) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (48) expr -> expr . < expr
    (49) expr -> expr . LE expr
    (50) expr -> expr . = expr
    POOL            shift and go to state 145
    .               shift and go to state 70
    @               shift and go to state 71
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    <               shift and go to state 76
    LE              shift and go to state 77
    =               shift and go to state 78


state 131

    (65) lista_expr -> lista_expr expr ; .
    }               reduce using rule 65 (lista_expr -> lista_expr expr ; .)
    IF              reduce using rule 65 (lista_expr -> lista_expr expr ; .)
    OBJECTID        reduce using rule 65 (lista_expr -> lista_expr expr ; .)
    WHILE           reduce using rule 65 (lista_expr -> lista_expr expr ; .)
    {               reduce using rule 65 (lista_expr -> lista_expr expr ; .)
    LET             reduce using rule 65 (lista_expr -> lista_expr expr ; .)
    CASE            reduce using rule 65 (lista_expr -> lista_expr expr ; .)
    NEW             reduce using rule 65 (lista_expr -> lista_expr expr ; .)
    ISVOID          reduce using rule 65 (lista_expr -> lista_expr expr ; .)
    ~               reduce using rule 65 (lista_expr -> lista_expr expr ; .)
    NOT             reduce using rule 65 (lista_expr -> lista_expr expr ; .)
    (               reduce using rule 65 (lista_expr -> lista_expr expr ; .)
    INT_CONST       reduce using rule 65 (lista_expr -> lista_expr expr ; .)
    STR_CONST       reduce using rule 65 (lista_expr -> lista_expr expr ; .)
    BOOL_CONST      reduce using rule 65 (lista_expr -> lista_expr expr ; .)
    -               reduce using rule 65 (lista_expr -> lista_expr expr ; .)


state 132

    (36) expr -> LET OBJECTID : TYPEID . optional_assigns IN expr
    (37) expr -> LET OBJECTID : TYPEID . ASSIGN expr optional_assigns IN expr
    (38) expr -> LET OBJECTID : TYPEID . IN expr
    (39) expr -> LET OBJECTID : TYPEID . ASSIGN expr IN expr
    (60) optional_assigns -> . , OBJECTID : TYPEID
    (61) optional_assigns -> . , OBJECTID : TYPEID ASSIGN expr
    (62) optional_assigns -> . , OBJECTID : TYPEID optional_assigns
    (63) optional_assigns -> . , OBJECTID : TYPEID ASSIGN expr optional_assigns
    ASSIGN          shift and go to state 148
    IN              shift and go to state 147
    ,               shift and go to state 149

    optional_assigns               shift and go to state 146

state 133

    (40) expr -> CASE expr OF lista_asig . ESAC
    ESAC            shift and go to state 150


state 134

    (58) lista_asig -> OBJECTID . : TYPEID DARROW expr ; lista_asig
    (59) lista_asig -> OBJECTID . : TYPEID DARROW expr ;
    :               shift and go to state 151


state 135

    (11) feature -> OBJECTID ( optional_formal ) : TYPEID { error } .
    ;               reduce using rule 11 (feature -> OBJECTID ( optional_formal ) : TYPEID { error } .)


state 136

    (14) feature -> OBJECTID ( formal ) : TYPEID { expr } .
    ;               reduce using rule 14 (feature -> OBJECTID ( formal ) : TYPEID { expr } .)


state 137

    (15) feature -> OBJECTID ( formal optional_formal ) : TYPEID { expr . }
    (24) expr -> expr . . OBJECTID ( expr optional_expressions )
    (25) expr -> expr . . OBJECTID ( expr )
    (26) expr -> expr . . OBJECTID ( )
    (27) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (48) expr -> expr . < expr
    (49) expr -> expr . LE expr
    (50) expr -> expr . = expr
    }               shift and go to state 152
    .               shift and go to state 70
    @               shift and go to state 71
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    <               shift and go to state 76
    LE              shift and go to state 77
    =               shift and go to state 78


state 138

    (31) expr -> OBJECTID ( expr optional_expressions ) .
    .               reduce using rule 31 (expr -> OBJECTID ( expr optional_expressions ) .)
    @               reduce using rule 31 (expr -> OBJECTID ( expr optional_expressions ) .)
    +               reduce using rule 31 (expr -> OBJECTID ( expr optional_expressions ) .)
    -               reduce using rule 31 (expr -> OBJECTID ( expr optional_expressions ) .)
    *               reduce using rule 31 (expr -> OBJECTID ( expr optional_expressions ) .)
    /               reduce using rule 31 (expr -> OBJECTID ( expr optional_expressions ) .)
    <               reduce using rule 31 (expr -> OBJECTID ( expr optional_expressions ) .)
    LE              reduce using rule 31 (expr -> OBJECTID ( expr optional_expressions ) .)
    =               reduce using rule 31 (expr -> OBJECTID ( expr optional_expressions ) .)
    ;               reduce using rule 31 (expr -> OBJECTID ( expr optional_expressions ) .)
    THEN            reduce using rule 31 (expr -> OBJECTID ( expr optional_expressions ) .)
    )               reduce using rule 31 (expr -> OBJECTID ( expr optional_expressions ) .)
    LOOP            reduce using rule 31 (expr -> OBJECTID ( expr optional_expressions ) .)
    OF              reduce using rule 31 (expr -> OBJECTID ( expr optional_expressions ) .)
    }               reduce using rule 31 (expr -> OBJECTID ( expr optional_expressions ) .)
    ,               reduce using rule 31 (expr -> OBJECTID ( expr optional_expressions ) .)
    ELSE            reduce using rule 31 (expr -> OBJECTID ( expr optional_expressions ) .)
    POOL            reduce using rule 31 (expr -> OBJECTID ( expr optional_expressions ) .)
    error           reduce using rule 31 (expr -> OBJECTID ( expr optional_expressions ) .)
    FI              reduce using rule 31 (expr -> OBJECTID ( expr optional_expressions ) .)
    IN              reduce using rule 31 (expr -> OBJECTID ( expr optional_expressions ) .)


state 139

    (67) optional_expressions -> , expr . optional_expressions
    (68) optional_expressions -> , expr .
    (24) expr -> expr . . OBJECTID ( expr optional_expressions )
    (25) expr -> expr . . OBJECTID ( expr )
    (26) expr -> expr . . OBJECTID ( )
    (27) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (48) expr -> expr . < expr
    (49) expr -> expr . LE expr
    (50) expr -> expr . = expr
    (67) optional_expressions -> . , expr optional_expressions
    (68) optional_expressions -> . , expr
    )               reduce using rule 68 (optional_expressions -> , expr .)
    .               shift and go to state 70
    @               shift and go to state 71
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    <               shift and go to state 76
    LE              shift and go to state 77
    =               shift and go to state 78
    ,               shift and go to state 125

    optional_expressions           shift and go to state 153

state 140

    (24) expr -> expr . OBJECTID ( expr . optional_expressions )
    (25) expr -> expr . OBJECTID ( expr . )
    (24) expr -> expr . . OBJECTID ( expr optional_expressions )
    (25) expr -> expr . . OBJECTID ( expr )
    (26) expr -> expr . . OBJECTID ( )
    (27) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (48) expr -> expr . < expr
    (49) expr -> expr . LE expr
    (50) expr -> expr . = expr
    (67) optional_expressions -> . , expr optional_expressions
    (68) optional_expressions -> . , expr
    )               shift and go to state 155
    .               shift and go to state 70
    @               shift and go to state 71
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    <               shift and go to state 76
    LE              shift and go to state 77
    =               shift and go to state 78
    ,               shift and go to state 125

    optional_expressions           shift and go to state 154

state 141

    (26) expr -> expr . OBJECTID ( ) .
    .               reduce using rule 26 (expr -> expr . OBJECTID ( ) .)
    @               reduce using rule 26 (expr -> expr . OBJECTID ( ) .)
    +               reduce using rule 26 (expr -> expr . OBJECTID ( ) .)
    -               reduce using rule 26 (expr -> expr . OBJECTID ( ) .)
    *               reduce using rule 26 (expr -> expr . OBJECTID ( ) .)
    /               reduce using rule 26 (expr -> expr . OBJECTID ( ) .)
    <               reduce using rule 26 (expr -> expr . OBJECTID ( ) .)
    LE              reduce using rule 26 (expr -> expr . OBJECTID ( ) .)
    =               reduce using rule 26 (expr -> expr . OBJECTID ( ) .)
    ;               reduce using rule 26 (expr -> expr . OBJECTID ( ) .)
    THEN            reduce using rule 26 (expr -> expr . OBJECTID ( ) .)
    )               reduce using rule 26 (expr -> expr . OBJECTID ( ) .)
    LOOP            reduce using rule 26 (expr -> expr . OBJECTID ( ) .)
    OF              reduce using rule 26 (expr -> expr . OBJECTID ( ) .)
    }               reduce using rule 26 (expr -> expr . OBJECTID ( ) .)
    ,               reduce using rule 26 (expr -> expr . OBJECTID ( ) .)
    ELSE            reduce using rule 26 (expr -> expr . OBJECTID ( ) .)
    POOL            reduce using rule 26 (expr -> expr . OBJECTID ( ) .)
    error           reduce using rule 26 (expr -> expr . OBJECTID ( ) .)
    FI              reduce using rule 26 (expr -> expr . OBJECTID ( ) .)
    IN              reduce using rule 26 (expr -> expr . OBJECTID ( ) .)


state 142

    (27) expr -> expr @ TYPEID . OBJECTID . ( expr optional_expressions )
    (28) expr -> expr @ TYPEID . OBJECTID . ( expr )
    (29) expr -> expr @ TYPEID . OBJECTID . ( )
    (               shift and go to state 156


state 143

    (21) expr -> IF expr THEN expr ELSE . expr error
    (33) expr -> IF expr THEN expr ELSE . expr FI
    (21) expr -> . IF expr THEN expr ELSE expr error
    (22) expr -> . IF expr THEN error FI
    (23) expr -> . OBJECTID ASSIGN expr
    (24) expr -> . expr . OBJECTID ( expr optional_expressions )
    (25) expr -> . expr . OBJECTID ( expr )
    (26) expr -> . expr . OBJECTID ( )
    (27) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . OBJECTID ( )
    (31) expr -> . OBJECTID ( expr optional_expressions )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . IF expr THEN expr ELSE expr FI
    (34) expr -> . WHILE expr LOOP expr POOL
    (35) expr -> . { lista_expr }
    (36) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (37) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID IN expr
    (39) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (40) expr -> . CASE expr OF lista_asig ESAC
    (41) expr -> . NEW TYPEID
    (42) expr -> . ISVOID expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . ~ expr
    (48) expr -> . expr < expr
    (49) expr -> . expr LE expr
    (50) expr -> . expr = expr
    (51) expr -> . NOT expr
    (52) expr -> . ( expr )
    (53) expr -> . OBJECTID
    (54) expr -> . INT_CONST
    (55) expr -> . STR_CONST
    (56) expr -> . BOOL_CONST
    (57) expr -> . - expr
    IF              shift and go to state 50
    OBJECTID        shift and go to state 48
    WHILE           shift and go to state 52
    {               shift and go to state 53
    LET             shift and go to state 54
    CASE            shift and go to state 55
    NEW             shift and go to state 56
    ISVOID          shift and go to state 57
    ~               shift and go to state 59
    NOT             shift and go to state 60
    (               shift and go to state 51
    INT_CONST       shift and go to state 61
    STR_CONST       shift and go to state 62
    BOOL_CONST      shift and go to state 63
    -               shift and go to state 58

    expr                           shift and go to state 157

state 144

    (22) expr -> IF expr THEN error FI .
    .               reduce using rule 22 (expr -> IF expr THEN error FI .)
    @               reduce using rule 22 (expr -> IF expr THEN error FI .)
    +               reduce using rule 22 (expr -> IF expr THEN error FI .)
    -               reduce using rule 22 (expr -> IF expr THEN error FI .)
    *               reduce using rule 22 (expr -> IF expr THEN error FI .)
    /               reduce using rule 22 (expr -> IF expr THEN error FI .)
    <               reduce using rule 22 (expr -> IF expr THEN error FI .)
    LE              reduce using rule 22 (expr -> IF expr THEN error FI .)
    =               reduce using rule 22 (expr -> IF expr THEN error FI .)
    ;               reduce using rule 22 (expr -> IF expr THEN error FI .)
    THEN            reduce using rule 22 (expr -> IF expr THEN error FI .)
    )               reduce using rule 22 (expr -> IF expr THEN error FI .)
    LOOP            reduce using rule 22 (expr -> IF expr THEN error FI .)
    OF              reduce using rule 22 (expr -> IF expr THEN error FI .)
    }               reduce using rule 22 (expr -> IF expr THEN error FI .)
    ,               reduce using rule 22 (expr -> IF expr THEN error FI .)
    ELSE            reduce using rule 22 (expr -> IF expr THEN error FI .)
    POOL            reduce using rule 22 (expr -> IF expr THEN error FI .)
    error           reduce using rule 22 (expr -> IF expr THEN error FI .)
    FI              reduce using rule 22 (expr -> IF expr THEN error FI .)
    IN              reduce using rule 22 (expr -> IF expr THEN error FI .)


state 145

    (34) expr -> WHILE expr LOOP expr POOL .
    .               reduce using rule 34 (expr -> WHILE expr LOOP expr POOL .)
    @               reduce using rule 34 (expr -> WHILE expr LOOP expr POOL .)
    +               reduce using rule 34 (expr -> WHILE expr LOOP expr POOL .)
    -               reduce using rule 34 (expr -> WHILE expr LOOP expr POOL .)
    *               reduce using rule 34 (expr -> WHILE expr LOOP expr POOL .)
    /               reduce using rule 34 (expr -> WHILE expr LOOP expr POOL .)
    <               reduce using rule 34 (expr -> WHILE expr LOOP expr POOL .)
    LE              reduce using rule 34 (expr -> WHILE expr LOOP expr POOL .)
    =               reduce using rule 34 (expr -> WHILE expr LOOP expr POOL .)
    ;               reduce using rule 34 (expr -> WHILE expr LOOP expr POOL .)
    THEN            reduce using rule 34 (expr -> WHILE expr LOOP expr POOL .)
    )               reduce using rule 34 (expr -> WHILE expr LOOP expr POOL .)
    LOOP            reduce using rule 34 (expr -> WHILE expr LOOP expr POOL .)
    OF              reduce using rule 34 (expr -> WHILE expr LOOP expr POOL .)
    }               reduce using rule 34 (expr -> WHILE expr LOOP expr POOL .)
    ,               reduce using rule 34 (expr -> WHILE expr LOOP expr POOL .)
    ELSE            reduce using rule 34 (expr -> WHILE expr LOOP expr POOL .)
    POOL            reduce using rule 34 (expr -> WHILE expr LOOP expr POOL .)
    error           reduce using rule 34 (expr -> WHILE expr LOOP expr POOL .)
    FI              reduce using rule 34 (expr -> WHILE expr LOOP expr POOL .)
    IN              reduce using rule 34 (expr -> WHILE expr LOOP expr POOL .)


state 146

    (36) expr -> LET OBJECTID : TYPEID optional_assigns . IN expr
    IN              shift and go to state 158


state 147

    (38) expr -> LET OBJECTID : TYPEID IN . expr
    (21) expr -> . IF expr THEN expr ELSE expr error
    (22) expr -> . IF expr THEN error FI
    (23) expr -> . OBJECTID ASSIGN expr
    (24) expr -> . expr . OBJECTID ( expr optional_expressions )
    (25) expr -> . expr . OBJECTID ( expr )
    (26) expr -> . expr . OBJECTID ( )
    (27) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . OBJECTID ( )
    (31) expr -> . OBJECTID ( expr optional_expressions )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . IF expr THEN expr ELSE expr FI
    (34) expr -> . WHILE expr LOOP expr POOL
    (35) expr -> . { lista_expr }
    (36) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (37) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID IN expr
    (39) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (40) expr -> . CASE expr OF lista_asig ESAC
    (41) expr -> . NEW TYPEID
    (42) expr -> . ISVOID expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . ~ expr
    (48) expr -> . expr < expr
    (49) expr -> . expr LE expr
    (50) expr -> . expr = expr
    (51) expr -> . NOT expr
    (52) expr -> . ( expr )
    (53) expr -> . OBJECTID
    (54) expr -> . INT_CONST
    (55) expr -> . STR_CONST
    (56) expr -> . BOOL_CONST
    (57) expr -> . - expr
    IF              shift and go to state 50
    OBJECTID        shift and go to state 48
    WHILE           shift and go to state 52
    {               shift and go to state 53
    LET             shift and go to state 54
    CASE            shift and go to state 55
    NEW             shift and go to state 56
    ISVOID          shift and go to state 57
    ~               shift and go to state 59
    NOT             shift and go to state 60
    (               shift and go to state 51
    INT_CONST       shift and go to state 61
    STR_CONST       shift and go to state 62
    BOOL_CONST      shift and go to state 63
    -               shift and go to state 58

    expr                           shift and go to state 159

state 148

    (37) expr -> LET OBJECTID : TYPEID ASSIGN . expr optional_assigns IN expr
    (39) expr -> LET OBJECTID : TYPEID ASSIGN . expr IN expr
    (21) expr -> . IF expr THEN expr ELSE expr error
    (22) expr -> . IF expr THEN error FI
    (23) expr -> . OBJECTID ASSIGN expr
    (24) expr -> . expr . OBJECTID ( expr optional_expressions )
    (25) expr -> . expr . OBJECTID ( expr )
    (26) expr -> . expr . OBJECTID ( )
    (27) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . OBJECTID ( )
    (31) expr -> . OBJECTID ( expr optional_expressions )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . IF expr THEN expr ELSE expr FI
    (34) expr -> . WHILE expr LOOP expr POOL
    (35) expr -> . { lista_expr }
    (36) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (37) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID IN expr
    (39) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (40) expr -> . CASE expr OF lista_asig ESAC
    (41) expr -> . NEW TYPEID
    (42) expr -> . ISVOID expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . ~ expr
    (48) expr -> . expr < expr
    (49) expr -> . expr LE expr
    (50) expr -> . expr = expr
    (51) expr -> . NOT expr
    (52) expr -> . ( expr )
    (53) expr -> . OBJECTID
    (54) expr -> . INT_CONST
    (55) expr -> . STR_CONST
    (56) expr -> . BOOL_CONST
    (57) expr -> . - expr
    IF              shift and go to state 50
    OBJECTID        shift and go to state 48
    WHILE           shift and go to state 52
    {               shift and go to state 53
    LET             shift and go to state 54
    CASE            shift and go to state 55
    NEW             shift and go to state 56
    ISVOID          shift and go to state 57
    ~               shift and go to state 59
    NOT             shift and go to state 60
    (               shift and go to state 51
    INT_CONST       shift and go to state 61
    STR_CONST       shift and go to state 62
    BOOL_CONST      shift and go to state 63
    -               shift and go to state 58

    expr                           shift and go to state 160

state 149

    (60) optional_assigns -> , . OBJECTID : TYPEID
    (61) optional_assigns -> , . OBJECTID : TYPEID ASSIGN expr
    (62) optional_assigns -> , . OBJECTID : TYPEID optional_assigns
    (63) optional_assigns -> , . OBJECTID : TYPEID ASSIGN expr optional_assigns
    OBJECTID        shift and go to state 161


state 150

    (40) expr -> CASE expr OF lista_asig ESAC .
    .               reduce using rule 40 (expr -> CASE expr OF lista_asig ESAC .)
    @               reduce using rule 40 (expr -> CASE expr OF lista_asig ESAC .)
    +               reduce using rule 40 (expr -> CASE expr OF lista_asig ESAC .)
    -               reduce using rule 40 (expr -> CASE expr OF lista_asig ESAC .)
    *               reduce using rule 40 (expr -> CASE expr OF lista_asig ESAC .)
    /               reduce using rule 40 (expr -> CASE expr OF lista_asig ESAC .)
    <               reduce using rule 40 (expr -> CASE expr OF lista_asig ESAC .)
    LE              reduce using rule 40 (expr -> CASE expr OF lista_asig ESAC .)
    =               reduce using rule 40 (expr -> CASE expr OF lista_asig ESAC .)
    ;               reduce using rule 40 (expr -> CASE expr OF lista_asig ESAC .)
    THEN            reduce using rule 40 (expr -> CASE expr OF lista_asig ESAC .)
    )               reduce using rule 40 (expr -> CASE expr OF lista_asig ESAC .)
    LOOP            reduce using rule 40 (expr -> CASE expr OF lista_asig ESAC .)
    OF              reduce using rule 40 (expr -> CASE expr OF lista_asig ESAC .)
    }               reduce using rule 40 (expr -> CASE expr OF lista_asig ESAC .)
    ,               reduce using rule 40 (expr -> CASE expr OF lista_asig ESAC .)
    ELSE            reduce using rule 40 (expr -> CASE expr OF lista_asig ESAC .)
    POOL            reduce using rule 40 (expr -> CASE expr OF lista_asig ESAC .)
    error           reduce using rule 40 (expr -> CASE expr OF lista_asig ESAC .)
    FI              reduce using rule 40 (expr -> CASE expr OF lista_asig ESAC .)
    IN              reduce using rule 40 (expr -> CASE expr OF lista_asig ESAC .)


state 151

    (58) lista_asig -> OBJECTID : . TYPEID DARROW expr ; lista_asig
    (59) lista_asig -> OBJECTID : . TYPEID DARROW expr ;
    TYPEID          shift and go to state 162


state 152

    (15) feature -> OBJECTID ( formal optional_formal ) : TYPEID { expr } .
    ;               reduce using rule 15 (feature -> OBJECTID ( formal optional_formal ) : TYPEID { expr } .)


state 153

    (67) optional_expressions -> , expr optional_expressions .
    )               reduce using rule 67 (optional_expressions -> , expr optional_expressions .)


state 154

    (24) expr -> expr . OBJECTID ( expr optional_expressions . )
    )               shift and go to state 163


state 155

    (25) expr -> expr . OBJECTID ( expr ) .
    .               reduce using rule 25 (expr -> expr . OBJECTID ( expr ) .)
    @               reduce using rule 25 (expr -> expr . OBJECTID ( expr ) .)
    +               reduce using rule 25 (expr -> expr . OBJECTID ( expr ) .)
    -               reduce using rule 25 (expr -> expr . OBJECTID ( expr ) .)
    *               reduce using rule 25 (expr -> expr . OBJECTID ( expr ) .)
    /               reduce using rule 25 (expr -> expr . OBJECTID ( expr ) .)
    <               reduce using rule 25 (expr -> expr . OBJECTID ( expr ) .)
    LE              reduce using rule 25 (expr -> expr . OBJECTID ( expr ) .)
    =               reduce using rule 25 (expr -> expr . OBJECTID ( expr ) .)
    ;               reduce using rule 25 (expr -> expr . OBJECTID ( expr ) .)
    THEN            reduce using rule 25 (expr -> expr . OBJECTID ( expr ) .)
    )               reduce using rule 25 (expr -> expr . OBJECTID ( expr ) .)
    LOOP            reduce using rule 25 (expr -> expr . OBJECTID ( expr ) .)
    OF              reduce using rule 25 (expr -> expr . OBJECTID ( expr ) .)
    }               reduce using rule 25 (expr -> expr . OBJECTID ( expr ) .)
    ,               reduce using rule 25 (expr -> expr . OBJECTID ( expr ) .)
    ELSE            reduce using rule 25 (expr -> expr . OBJECTID ( expr ) .)
    POOL            reduce using rule 25 (expr -> expr . OBJECTID ( expr ) .)
    error           reduce using rule 25 (expr -> expr . OBJECTID ( expr ) .)
    FI              reduce using rule 25 (expr -> expr . OBJECTID ( expr ) .)
    IN              reduce using rule 25 (expr -> expr . OBJECTID ( expr ) .)


state 156

    (27) expr -> expr @ TYPEID . OBJECTID ( . expr optional_expressions )
    (28) expr -> expr @ TYPEID . OBJECTID ( . expr )
    (29) expr -> expr @ TYPEID . OBJECTID ( . )
    (21) expr -> . IF expr THEN expr ELSE expr error
    (22) expr -> . IF expr THEN error FI
    (23) expr -> . OBJECTID ASSIGN expr
    (24) expr -> . expr . OBJECTID ( expr optional_expressions )
    (25) expr -> . expr . OBJECTID ( expr )
    (26) expr -> . expr . OBJECTID ( )
    (27) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . OBJECTID ( )
    (31) expr -> . OBJECTID ( expr optional_expressions )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . IF expr THEN expr ELSE expr FI
    (34) expr -> . WHILE expr LOOP expr POOL
    (35) expr -> . { lista_expr }
    (36) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (37) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID IN expr
    (39) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (40) expr -> . CASE expr OF lista_asig ESAC
    (41) expr -> . NEW TYPEID
    (42) expr -> . ISVOID expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . ~ expr
    (48) expr -> . expr < expr
    (49) expr -> . expr LE expr
    (50) expr -> . expr = expr
    (51) expr -> . NOT expr
    (52) expr -> . ( expr )
    (53) expr -> . OBJECTID
    (54) expr -> . INT_CONST
    (55) expr -> . STR_CONST
    (56) expr -> . BOOL_CONST
    (57) expr -> . - expr
    )               shift and go to state 165
    IF              shift and go to state 50
    OBJECTID        shift and go to state 48
    WHILE           shift and go to state 52
    {               shift and go to state 53
    LET             shift and go to state 54
    CASE            shift and go to state 55
    NEW             shift and go to state 56
    ISVOID          shift and go to state 57
    ~               shift and go to state 59
    NOT             shift and go to state 60
    (               shift and go to state 51
    INT_CONST       shift and go to state 61
    STR_CONST       shift and go to state 62
    BOOL_CONST      shift and go to state 63
    -               shift and go to state 58

    expr                           shift and go to state 164

state 157

    (21) expr -> IF expr THEN expr ELSE expr . error
    (33) expr -> IF expr THEN expr ELSE expr . FI
    (24) expr -> expr . . OBJECTID ( expr optional_expressions )
    (25) expr -> expr . . OBJECTID ( expr )
    (26) expr -> expr . . OBJECTID ( )
    (27) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (48) expr -> expr . < expr
    (49) expr -> expr . LE expr
    (50) expr -> expr . = expr
    error           shift and go to state 166
    FI              shift and go to state 167
    .               shift and go to state 70
    @               shift and go to state 71
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    <               shift and go to state 76
    LE              shift and go to state 77
    =               shift and go to state 78


state 158

    (36) expr -> LET OBJECTID : TYPEID optional_assigns IN . expr
    (21) expr -> . IF expr THEN expr ELSE expr error
    (22) expr -> . IF expr THEN error FI
    (23) expr -> . OBJECTID ASSIGN expr
    (24) expr -> . expr . OBJECTID ( expr optional_expressions )
    (25) expr -> . expr . OBJECTID ( expr )
    (26) expr -> . expr . OBJECTID ( )
    (27) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . OBJECTID ( )
    (31) expr -> . OBJECTID ( expr optional_expressions )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . IF expr THEN expr ELSE expr FI
    (34) expr -> . WHILE expr LOOP expr POOL
    (35) expr -> . { lista_expr }
    (36) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (37) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID IN expr
    (39) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (40) expr -> . CASE expr OF lista_asig ESAC
    (41) expr -> . NEW TYPEID
    (42) expr -> . ISVOID expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . ~ expr
    (48) expr -> . expr < expr
    (49) expr -> . expr LE expr
    (50) expr -> . expr = expr
    (51) expr -> . NOT expr
    (52) expr -> . ( expr )
    (53) expr -> . OBJECTID
    (54) expr -> . INT_CONST
    (55) expr -> . STR_CONST
    (56) expr -> . BOOL_CONST
    (57) expr -> . - expr
    IF              shift and go to state 50
    OBJECTID        shift and go to state 48
    WHILE           shift and go to state 52
    {               shift and go to state 53
    LET             shift and go to state 54
    CASE            shift and go to state 55
    NEW             shift and go to state 56
    ISVOID          shift and go to state 57
    ~               shift and go to state 59
    NOT             shift and go to state 60
    (               shift and go to state 51
    INT_CONST       shift and go to state 61
    STR_CONST       shift and go to state 62
    BOOL_CONST      shift and go to state 63
    -               shift and go to state 58

    expr                           shift and go to state 168

state 159

    (38) expr -> LET OBJECTID : TYPEID IN expr .
    (24) expr -> expr . . OBJECTID ( expr optional_expressions )
    (25) expr -> expr . . OBJECTID ( expr )
    (26) expr -> expr . . OBJECTID ( )
    (27) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (48) expr -> expr . < expr
    (49) expr -> expr . LE expr
    (50) expr -> expr . = expr
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for @ resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for = resolved as shift
    ;               reduce using rule 38 (expr -> LET OBJECTID : TYPEID IN expr .)
    THEN            reduce using rule 38 (expr -> LET OBJECTID : TYPEID IN expr .)
    )               reduce using rule 38 (expr -> LET OBJECTID : TYPEID IN expr .)
    LOOP            reduce using rule 38 (expr -> LET OBJECTID : TYPEID IN expr .)
    OF              reduce using rule 38 (expr -> LET OBJECTID : TYPEID IN expr .)
    }               reduce using rule 38 (expr -> LET OBJECTID : TYPEID IN expr .)
    ,               reduce using rule 38 (expr -> LET OBJECTID : TYPEID IN expr .)
    ELSE            reduce using rule 38 (expr -> LET OBJECTID : TYPEID IN expr .)
    POOL            reduce using rule 38 (expr -> LET OBJECTID : TYPEID IN expr .)
    error           reduce using rule 38 (expr -> LET OBJECTID : TYPEID IN expr .)
    FI              reduce using rule 38 (expr -> LET OBJECTID : TYPEID IN expr .)
    IN              reduce using rule 38 (expr -> LET OBJECTID : TYPEID IN expr .)
    .               shift and go to state 70
    @               shift and go to state 71
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    <               shift and go to state 76
    LE              shift and go to state 77
    =               shift and go to state 78


state 160

    (37) expr -> LET OBJECTID : TYPEID ASSIGN expr . optional_assigns IN expr
    (39) expr -> LET OBJECTID : TYPEID ASSIGN expr . IN expr
    (24) expr -> expr . . OBJECTID ( expr optional_expressions )
    (25) expr -> expr . . OBJECTID ( expr )
    (26) expr -> expr . . OBJECTID ( )
    (27) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (48) expr -> expr . < expr
    (49) expr -> expr . LE expr
    (50) expr -> expr . = expr
    (60) optional_assigns -> . , OBJECTID : TYPEID
    (61) optional_assigns -> . , OBJECTID : TYPEID ASSIGN expr
    (62) optional_assigns -> . , OBJECTID : TYPEID optional_assigns
    (63) optional_assigns -> . , OBJECTID : TYPEID ASSIGN expr optional_assigns
    IN              shift and go to state 170
    .               shift and go to state 70
    @               shift and go to state 71
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    <               shift and go to state 76
    LE              shift and go to state 77
    =               shift and go to state 78
    ,               shift and go to state 149

    optional_assigns               shift and go to state 169

state 161

    (60) optional_assigns -> , OBJECTID . : TYPEID
    (61) optional_assigns -> , OBJECTID . : TYPEID ASSIGN expr
    (62) optional_assigns -> , OBJECTID . : TYPEID optional_assigns
    (63) optional_assigns -> , OBJECTID . : TYPEID ASSIGN expr optional_assigns
    :               shift and go to state 171


state 162

    (58) lista_asig -> OBJECTID : TYPEID . DARROW expr ; lista_asig
    (59) lista_asig -> OBJECTID : TYPEID . DARROW expr ;
    DARROW          shift and go to state 172


state 163

    (24) expr -> expr . OBJECTID ( expr optional_expressions ) .
    .               reduce using rule 24 (expr -> expr . OBJECTID ( expr optional_expressions ) .)
    @               reduce using rule 24 (expr -> expr . OBJECTID ( expr optional_expressions ) .)
    +               reduce using rule 24 (expr -> expr . OBJECTID ( expr optional_expressions ) .)
    -               reduce using rule 24 (expr -> expr . OBJECTID ( expr optional_expressions ) .)
    *               reduce using rule 24 (expr -> expr . OBJECTID ( expr optional_expressions ) .)
    /               reduce using rule 24 (expr -> expr . OBJECTID ( expr optional_expressions ) .)
    <               reduce using rule 24 (expr -> expr . OBJECTID ( expr optional_expressions ) .)
    LE              reduce using rule 24 (expr -> expr . OBJECTID ( expr optional_expressions ) .)
    =               reduce using rule 24 (expr -> expr . OBJECTID ( expr optional_expressions ) .)
    ;               reduce using rule 24 (expr -> expr . OBJECTID ( expr optional_expressions ) .)
    THEN            reduce using rule 24 (expr -> expr . OBJECTID ( expr optional_expressions ) .)
    )               reduce using rule 24 (expr -> expr . OBJECTID ( expr optional_expressions ) .)
    LOOP            reduce using rule 24 (expr -> expr . OBJECTID ( expr optional_expressions ) .)
    OF              reduce using rule 24 (expr -> expr . OBJECTID ( expr optional_expressions ) .)
    }               reduce using rule 24 (expr -> expr . OBJECTID ( expr optional_expressions ) .)
    ,               reduce using rule 24 (expr -> expr . OBJECTID ( expr optional_expressions ) .)
    ELSE            reduce using rule 24 (expr -> expr . OBJECTID ( expr optional_expressions ) .)
    POOL            reduce using rule 24 (expr -> expr . OBJECTID ( expr optional_expressions ) .)
    error           reduce using rule 24 (expr -> expr . OBJECTID ( expr optional_expressions ) .)
    FI              reduce using rule 24 (expr -> expr . OBJECTID ( expr optional_expressions ) .)
    IN              reduce using rule 24 (expr -> expr . OBJECTID ( expr optional_expressions ) .)


state 164

    (27) expr -> expr @ TYPEID . OBJECTID ( expr . optional_expressions )
    (28) expr -> expr @ TYPEID . OBJECTID ( expr . )
    (24) expr -> expr . . OBJECTID ( expr optional_expressions )
    (25) expr -> expr . . OBJECTID ( expr )
    (26) expr -> expr . . OBJECTID ( )
    (27) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (48) expr -> expr . < expr
    (49) expr -> expr . LE expr
    (50) expr -> expr . = expr
    (67) optional_expressions -> . , expr optional_expressions
    (68) optional_expressions -> . , expr
    )               shift and go to state 174
    .               shift and go to state 70
    @               shift and go to state 71
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    <               shift and go to state 76
    LE              shift and go to state 77
    =               shift and go to state 78
    ,               shift and go to state 125

    optional_expressions           shift and go to state 173

state 165

    (29) expr -> expr @ TYPEID . OBJECTID ( ) .
    .               reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    @               reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    +               reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    -               reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    *               reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    /               reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    <               reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    LE              reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    =               reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    ;               reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    THEN            reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    )               reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    LOOP            reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    OF              reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    }               reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    ,               reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    ELSE            reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    POOL            reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    error           reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    FI              reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( ) .)
    IN              reduce using rule 29 (expr -> expr @ TYPEID . OBJECTID ( ) .)


state 166

    (21) expr -> IF expr THEN expr ELSE expr error .
    .               reduce using rule 21 (expr -> IF expr THEN expr ELSE expr error .)
    @               reduce using rule 21 (expr -> IF expr THEN expr ELSE expr error .)
    +               reduce using rule 21 (expr -> IF expr THEN expr ELSE expr error .)
    -               reduce using rule 21 (expr -> IF expr THEN expr ELSE expr error .)
    *               reduce using rule 21 (expr -> IF expr THEN expr ELSE expr error .)
    /               reduce using rule 21 (expr -> IF expr THEN expr ELSE expr error .)
    <               reduce using rule 21 (expr -> IF expr THEN expr ELSE expr error .)
    LE              reduce using rule 21 (expr -> IF expr THEN expr ELSE expr error .)
    =               reduce using rule 21 (expr -> IF expr THEN expr ELSE expr error .)
    ;               reduce using rule 21 (expr -> IF expr THEN expr ELSE expr error .)
    THEN            reduce using rule 21 (expr -> IF expr THEN expr ELSE expr error .)
    )               reduce using rule 21 (expr -> IF expr THEN expr ELSE expr error .)
    LOOP            reduce using rule 21 (expr -> IF expr THEN expr ELSE expr error .)
    OF              reduce using rule 21 (expr -> IF expr THEN expr ELSE expr error .)
    }               reduce using rule 21 (expr -> IF expr THEN expr ELSE expr error .)
    ,               reduce using rule 21 (expr -> IF expr THEN expr ELSE expr error .)
    ELSE            reduce using rule 21 (expr -> IF expr THEN expr ELSE expr error .)
    POOL            reduce using rule 21 (expr -> IF expr THEN expr ELSE expr error .)
    error           reduce using rule 21 (expr -> IF expr THEN expr ELSE expr error .)
    FI              reduce using rule 21 (expr -> IF expr THEN expr ELSE expr error .)
    IN              reduce using rule 21 (expr -> IF expr THEN expr ELSE expr error .)


state 167

    (33) expr -> IF expr THEN expr ELSE expr FI .
    .               reduce using rule 33 (expr -> IF expr THEN expr ELSE expr FI .)
    @               reduce using rule 33 (expr -> IF expr THEN expr ELSE expr FI .)
    +               reduce using rule 33 (expr -> IF expr THEN expr ELSE expr FI .)
    -               reduce using rule 33 (expr -> IF expr THEN expr ELSE expr FI .)
    *               reduce using rule 33 (expr -> IF expr THEN expr ELSE expr FI .)
    /               reduce using rule 33 (expr -> IF expr THEN expr ELSE expr FI .)
    <               reduce using rule 33 (expr -> IF expr THEN expr ELSE expr FI .)
    LE              reduce using rule 33 (expr -> IF expr THEN expr ELSE expr FI .)
    =               reduce using rule 33 (expr -> IF expr THEN expr ELSE expr FI .)
    ;               reduce using rule 33 (expr -> IF expr THEN expr ELSE expr FI .)
    THEN            reduce using rule 33 (expr -> IF expr THEN expr ELSE expr FI .)
    )               reduce using rule 33 (expr -> IF expr THEN expr ELSE expr FI .)
    LOOP            reduce using rule 33 (expr -> IF expr THEN expr ELSE expr FI .)
    OF              reduce using rule 33 (expr -> IF expr THEN expr ELSE expr FI .)
    }               reduce using rule 33 (expr -> IF expr THEN expr ELSE expr FI .)
    ,               reduce using rule 33 (expr -> IF expr THEN expr ELSE expr FI .)
    ELSE            reduce using rule 33 (expr -> IF expr THEN expr ELSE expr FI .)
    POOL            reduce using rule 33 (expr -> IF expr THEN expr ELSE expr FI .)
    error           reduce using rule 33 (expr -> IF expr THEN expr ELSE expr FI .)
    FI              reduce using rule 33 (expr -> IF expr THEN expr ELSE expr FI .)
    IN              reduce using rule 33 (expr -> IF expr THEN expr ELSE expr FI .)


state 168

    (36) expr -> LET OBJECTID : TYPEID optional_assigns IN expr .
    (24) expr -> expr . . OBJECTID ( expr optional_expressions )
    (25) expr -> expr . . OBJECTID ( expr )
    (26) expr -> expr . . OBJECTID ( )
    (27) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (48) expr -> expr . < expr
    (49) expr -> expr . LE expr
    (50) expr -> expr . = expr
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for @ resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for = resolved as shift
    ;               reduce using rule 36 (expr -> LET OBJECTID : TYPEID optional_assigns IN expr .)
    THEN            reduce using rule 36 (expr -> LET OBJECTID : TYPEID optional_assigns IN expr .)
    )               reduce using rule 36 (expr -> LET OBJECTID : TYPEID optional_assigns IN expr .)
    LOOP            reduce using rule 36 (expr -> LET OBJECTID : TYPEID optional_assigns IN expr .)
    OF              reduce using rule 36 (expr -> LET OBJECTID : TYPEID optional_assigns IN expr .)
    }               reduce using rule 36 (expr -> LET OBJECTID : TYPEID optional_assigns IN expr .)
    ,               reduce using rule 36 (expr -> LET OBJECTID : TYPEID optional_assigns IN expr .)
    ELSE            reduce using rule 36 (expr -> LET OBJECTID : TYPEID optional_assigns IN expr .)
    POOL            reduce using rule 36 (expr -> LET OBJECTID : TYPEID optional_assigns IN expr .)
    error           reduce using rule 36 (expr -> LET OBJECTID : TYPEID optional_assigns IN expr .)
    FI              reduce using rule 36 (expr -> LET OBJECTID : TYPEID optional_assigns IN expr .)
    IN              reduce using rule 36 (expr -> LET OBJECTID : TYPEID optional_assigns IN expr .)
    .               shift and go to state 70
    @               shift and go to state 71
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    <               shift and go to state 76
    LE              shift and go to state 77
    =               shift and go to state 78


state 169

    (37) expr -> LET OBJECTID : TYPEID ASSIGN expr optional_assigns . IN expr
    IN              shift and go to state 175


state 170

    (39) expr -> LET OBJECTID : TYPEID ASSIGN expr IN . expr
    (21) expr -> . IF expr THEN expr ELSE expr error
    (22) expr -> . IF expr THEN error FI
    (23) expr -> . OBJECTID ASSIGN expr
    (24) expr -> . expr . OBJECTID ( expr optional_expressions )
    (25) expr -> . expr . OBJECTID ( expr )
    (26) expr -> . expr . OBJECTID ( )
    (27) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . OBJECTID ( )
    (31) expr -> . OBJECTID ( expr optional_expressions )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . IF expr THEN expr ELSE expr FI
    (34) expr -> . WHILE expr LOOP expr POOL
    (35) expr -> . { lista_expr }
    (36) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (37) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID IN expr
    (39) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (40) expr -> . CASE expr OF lista_asig ESAC
    (41) expr -> . NEW TYPEID
    (42) expr -> . ISVOID expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . ~ expr
    (48) expr -> . expr < expr
    (49) expr -> . expr LE expr
    (50) expr -> . expr = expr
    (51) expr -> . NOT expr
    (52) expr -> . ( expr )
    (53) expr -> . OBJECTID
    (54) expr -> . INT_CONST
    (55) expr -> . STR_CONST
    (56) expr -> . BOOL_CONST
    (57) expr -> . - expr
    IF              shift and go to state 50
    OBJECTID        shift and go to state 48
    WHILE           shift and go to state 52
    {               shift and go to state 53
    LET             shift and go to state 54
    CASE            shift and go to state 55
    NEW             shift and go to state 56
    ISVOID          shift and go to state 57
    ~               shift and go to state 59
    NOT             shift and go to state 60
    (               shift and go to state 51
    INT_CONST       shift and go to state 61
    STR_CONST       shift and go to state 62
    BOOL_CONST      shift and go to state 63
    -               shift and go to state 58

    expr                           shift and go to state 176

state 171

    (60) optional_assigns -> , OBJECTID : . TYPEID
    (61) optional_assigns -> , OBJECTID : . TYPEID ASSIGN expr
    (62) optional_assigns -> , OBJECTID : . TYPEID optional_assigns
    (63) optional_assigns -> , OBJECTID : . TYPEID ASSIGN expr optional_assigns
    TYPEID          shift and go to state 177


state 172

    (58) lista_asig -> OBJECTID : TYPEID DARROW . expr ; lista_asig
    (59) lista_asig -> OBJECTID : TYPEID DARROW . expr ;
    (21) expr -> . IF expr THEN expr ELSE expr error
    (22) expr -> . IF expr THEN error FI
    (23) expr -> . OBJECTID ASSIGN expr
    (24) expr -> . expr . OBJECTID ( expr optional_expressions )
    (25) expr -> . expr . OBJECTID ( expr )
    (26) expr -> . expr . OBJECTID ( )
    (27) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . OBJECTID ( )
    (31) expr -> . OBJECTID ( expr optional_expressions )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . IF expr THEN expr ELSE expr FI
    (34) expr -> . WHILE expr LOOP expr POOL
    (35) expr -> . { lista_expr }
    (36) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (37) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID IN expr
    (39) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (40) expr -> . CASE expr OF lista_asig ESAC
    (41) expr -> . NEW TYPEID
    (42) expr -> . ISVOID expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . ~ expr
    (48) expr -> . expr < expr
    (49) expr -> . expr LE expr
    (50) expr -> . expr = expr
    (51) expr -> . NOT expr
    (52) expr -> . ( expr )
    (53) expr -> . OBJECTID
    (54) expr -> . INT_CONST
    (55) expr -> . STR_CONST
    (56) expr -> . BOOL_CONST
    (57) expr -> . - expr
    IF              shift and go to state 50
    OBJECTID        shift and go to state 48
    WHILE           shift and go to state 52
    {               shift and go to state 53
    LET             shift and go to state 54
    CASE            shift and go to state 55
    NEW             shift and go to state 56
    ISVOID          shift and go to state 57
    ~               shift and go to state 59
    NOT             shift and go to state 60
    (               shift and go to state 51
    INT_CONST       shift and go to state 61
    STR_CONST       shift and go to state 62
    BOOL_CONST      shift and go to state 63
    -               shift and go to state 58

    expr                           shift and go to state 178

state 173

    (27) expr -> expr @ TYPEID . OBJECTID ( expr optional_expressions . )
    )               shift and go to state 179


state 174

    (28) expr -> expr @ TYPEID . OBJECTID ( expr ) .
    .               reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    @               reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    +               reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    -               reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    *               reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    /               reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    <               reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    LE              reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    =               reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    ;               reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    THEN            reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    )               reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    LOOP            reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    OF              reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    }               reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    ,               reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    ELSE            reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    POOL            reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    error           reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    FI              reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)
    IN              reduce using rule 28 (expr -> expr @ TYPEID . OBJECTID ( expr ) .)


state 175

    (37) expr -> LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN . expr
    (21) expr -> . IF expr THEN expr ELSE expr error
    (22) expr -> . IF expr THEN error FI
    (23) expr -> . OBJECTID ASSIGN expr
    (24) expr -> . expr . OBJECTID ( expr optional_expressions )
    (25) expr -> . expr . OBJECTID ( expr )
    (26) expr -> . expr . OBJECTID ( )
    (27) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . OBJECTID ( )
    (31) expr -> . OBJECTID ( expr optional_expressions )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . IF expr THEN expr ELSE expr FI
    (34) expr -> . WHILE expr LOOP expr POOL
    (35) expr -> . { lista_expr }
    (36) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (37) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID IN expr
    (39) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (40) expr -> . CASE expr OF lista_asig ESAC
    (41) expr -> . NEW TYPEID
    (42) expr -> . ISVOID expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . ~ expr
    (48) expr -> . expr < expr
    (49) expr -> . expr LE expr
    (50) expr -> . expr = expr
    (51) expr -> . NOT expr
    (52) expr -> . ( expr )
    (53) expr -> . OBJECTID
    (54) expr -> . INT_CONST
    (55) expr -> . STR_CONST
    (56) expr -> . BOOL_CONST
    (57) expr -> . - expr
    IF              shift and go to state 50
    OBJECTID        shift and go to state 48
    WHILE           shift and go to state 52
    {               shift and go to state 53
    LET             shift and go to state 54
    CASE            shift and go to state 55
    NEW             shift and go to state 56
    ISVOID          shift and go to state 57
    ~               shift and go to state 59
    NOT             shift and go to state 60
    (               shift and go to state 51
    INT_CONST       shift and go to state 61
    STR_CONST       shift and go to state 62
    BOOL_CONST      shift and go to state 63
    -               shift and go to state 58

    expr                           shift and go to state 180

state 176

    (39) expr -> LET OBJECTID : TYPEID ASSIGN expr IN expr .
    (24) expr -> expr . . OBJECTID ( expr optional_expressions )
    (25) expr -> expr . . OBJECTID ( expr )
    (26) expr -> expr . . OBJECTID ( )
    (27) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (48) expr -> expr . < expr
    (49) expr -> expr . LE expr
    (50) expr -> expr . = expr
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for @ resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for = resolved as shift
    ;               reduce using rule 39 (expr -> LET OBJECTID : TYPEID ASSIGN expr IN expr .)
    THEN            reduce using rule 39 (expr -> LET OBJECTID : TYPEID ASSIGN expr IN expr .)
    )               reduce using rule 39 (expr -> LET OBJECTID : TYPEID ASSIGN expr IN expr .)
    LOOP            reduce using rule 39 (expr -> LET OBJECTID : TYPEID ASSIGN expr IN expr .)
    OF              reduce using rule 39 (expr -> LET OBJECTID : TYPEID ASSIGN expr IN expr .)
    }               reduce using rule 39 (expr -> LET OBJECTID : TYPEID ASSIGN expr IN expr .)
    ,               reduce using rule 39 (expr -> LET OBJECTID : TYPEID ASSIGN expr IN expr .)
    ELSE            reduce using rule 39 (expr -> LET OBJECTID : TYPEID ASSIGN expr IN expr .)
    POOL            reduce using rule 39 (expr -> LET OBJECTID : TYPEID ASSIGN expr IN expr .)
    error           reduce using rule 39 (expr -> LET OBJECTID : TYPEID ASSIGN expr IN expr .)
    FI              reduce using rule 39 (expr -> LET OBJECTID : TYPEID ASSIGN expr IN expr .)
    IN              reduce using rule 39 (expr -> LET OBJECTID : TYPEID ASSIGN expr IN expr .)
    .               shift and go to state 70
    @               shift and go to state 71
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    <               shift and go to state 76
    LE              shift and go to state 77
    =               shift and go to state 78


state 177

    (60) optional_assigns -> , OBJECTID : TYPEID .
    (61) optional_assigns -> , OBJECTID : TYPEID . ASSIGN expr
    (62) optional_assigns -> , OBJECTID : TYPEID . optional_assigns
    (63) optional_assigns -> , OBJECTID : TYPEID . ASSIGN expr optional_assigns
    (60) optional_assigns -> . , OBJECTID : TYPEID
    (61) optional_assigns -> . , OBJECTID : TYPEID ASSIGN expr
    (62) optional_assigns -> . , OBJECTID : TYPEID optional_assigns
    (63) optional_assigns -> . , OBJECTID : TYPEID ASSIGN expr optional_assigns
    IN              reduce using rule 60 (optional_assigns -> , OBJECTID : TYPEID .)
    ASSIGN          shift and go to state 181
    ,               shift and go to state 149

    optional_assigns               shift and go to state 182

state 178

    (58) lista_asig -> OBJECTID : TYPEID DARROW expr . ; lista_asig
    (59) lista_asig -> OBJECTID : TYPEID DARROW expr . ;
    (24) expr -> expr . . OBJECTID ( expr optional_expressions )
    (25) expr -> expr . . OBJECTID ( expr )
    (26) expr -> expr . . OBJECTID ( )
    (27) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (48) expr -> expr . < expr
    (49) expr -> expr . LE expr
    (50) expr -> expr . = expr
    ;               shift and go to state 183
    .               shift and go to state 70
    @               shift and go to state 71
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    <               shift and go to state 76
    LE              shift and go to state 77
    =               shift and go to state 78


state 179

    (27) expr -> expr @ TYPEID . OBJECTID ( expr optional_expressions ) .
    .               reduce using rule 27 (expr -> expr @ TYPEID . OBJECTID ( expr optional_expressions ) .)
    @               reduce using rule 27 (expr -> expr @ TYPEID . OBJECTID ( expr optional_expressions ) .)
    +               reduce using rule 27 (expr -> expr @ TYPEID . OBJECTID ( expr optional_expressions ) .)
    -               reduce using rule 27 (expr -> expr @ TYPEID . OBJECTID ( expr optional_expressions ) .)
    *               reduce using rule 27 (expr -> expr @ TYPEID . OBJECTID ( expr optional_expressions ) .)
    /               reduce using rule 27 (expr -> expr @ TYPEID . OBJECTID ( expr optional_expressions ) .)
    <               reduce using rule 27 (expr -> expr @ TYPEID . OBJECTID ( expr optional_expressions ) .)
    LE              reduce using rule 27 (expr -> expr @ TYPEID . OBJECTID ( expr optional_expressions ) .)
    =               reduce using rule 27 (expr -> expr @ TYPEID . OBJECTID ( expr optional_expressions ) .)
    ;               reduce using rule 27 (expr -> expr @ TYPEID . OBJECTID ( expr optional_expressions ) .)
    THEN            reduce using rule 27 (expr -> expr @ TYPEID . OBJECTID ( expr optional_expressions ) .)
    )               reduce using rule 27 (expr -> expr @ TYPEID . OBJECTID ( expr optional_expressions ) .)
    LOOP            reduce using rule 27 (expr -> expr @ TYPEID . OBJECTID ( expr optional_expressions ) .)
    OF              reduce using rule 27 (expr -> expr @ TYPEID . OBJECTID ( expr optional_expressions ) .)
    }               reduce using rule 27 (expr -> expr @ TYPEID . OBJECTID ( expr optional_expressions ) .)
    ,               reduce using rule 27 (expr -> expr @ TYPEID . OBJECTID ( expr optional_expressions ) .)
    ELSE            reduce using rule 27 (expr -> expr @ TYPEID . OBJECTID ( expr optional_expressions ) .)
    POOL            reduce using rule 27 (expr -> expr @ TYPEID . OBJECTID ( expr optional_expressions ) .)
    error           reduce using rule 27 (expr -> expr @ TYPEID . OBJECTID ( expr optional_expressions ) .)
    FI              reduce using rule 27 (expr -> expr @ TYPEID . OBJECTID ( expr optional_expressions ) .)
    IN              reduce using rule 27 (expr -> expr @ TYPEID . OBJECTID ( expr optional_expressions ) .)


state 180

    (37) expr -> LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr .
    (24) expr -> expr . . OBJECTID ( expr optional_expressions )
    (25) expr -> expr . . OBJECTID ( expr )
    (26) expr -> expr . . OBJECTID ( )
    (27) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (48) expr -> expr . < expr
    (49) expr -> expr . LE expr
    (50) expr -> expr . = expr
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for @ resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for = resolved as shift
    ;               reduce using rule 37 (expr -> LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr .)
    THEN            reduce using rule 37 (expr -> LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr .)
    )               reduce using rule 37 (expr -> LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr .)
    LOOP            reduce using rule 37 (expr -> LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr .)
    OF              reduce using rule 37 (expr -> LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr .)
    }               reduce using rule 37 (expr -> LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr .)
    ,               reduce using rule 37 (expr -> LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr .)
    ELSE            reduce using rule 37 (expr -> LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr .)
    POOL            reduce using rule 37 (expr -> LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr .)
    error           reduce using rule 37 (expr -> LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr .)
    FI              reduce using rule 37 (expr -> LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr .)
    IN              reduce using rule 37 (expr -> LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr .)
    .               shift and go to state 70
    @               shift and go to state 71
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    <               shift and go to state 76
    LE              shift and go to state 77
    =               shift and go to state 78


state 181

    (61) optional_assigns -> , OBJECTID : TYPEID ASSIGN . expr
    (63) optional_assigns -> , OBJECTID : TYPEID ASSIGN . expr optional_assigns
    (21) expr -> . IF expr THEN expr ELSE expr error
    (22) expr -> . IF expr THEN error FI
    (23) expr -> . OBJECTID ASSIGN expr
    (24) expr -> . expr . OBJECTID ( expr optional_expressions )
    (25) expr -> . expr . OBJECTID ( expr )
    (26) expr -> . expr . OBJECTID ( )
    (27) expr -> . expr @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> . expr @ TYPEID . OBJECTID ( expr )
    (29) expr -> . expr @ TYPEID . OBJECTID ( )
    (30) expr -> . OBJECTID ( )
    (31) expr -> . OBJECTID ( expr optional_expressions )
    (32) expr -> . OBJECTID ( expr )
    (33) expr -> . IF expr THEN expr ELSE expr FI
    (34) expr -> . WHILE expr LOOP expr POOL
    (35) expr -> . { lista_expr }
    (36) expr -> . LET OBJECTID : TYPEID optional_assigns IN expr
    (37) expr -> . LET OBJECTID : TYPEID ASSIGN expr optional_assigns IN expr
    (38) expr -> . LET OBJECTID : TYPEID IN expr
    (39) expr -> . LET OBJECTID : TYPEID ASSIGN expr IN expr
    (40) expr -> . CASE expr OF lista_asig ESAC
    (41) expr -> . NEW TYPEID
    (42) expr -> . ISVOID expr
    (43) expr -> . expr + expr
    (44) expr -> . expr - expr
    (45) expr -> . expr * expr
    (46) expr -> . expr / expr
    (47) expr -> . ~ expr
    (48) expr -> . expr < expr
    (49) expr -> . expr LE expr
    (50) expr -> . expr = expr
    (51) expr -> . NOT expr
    (52) expr -> . ( expr )
    (53) expr -> . OBJECTID
    (54) expr -> . INT_CONST
    (55) expr -> . STR_CONST
    (56) expr -> . BOOL_CONST
    (57) expr -> . - expr
    IF              shift and go to state 50
    OBJECTID        shift and go to state 48
    WHILE           shift and go to state 52
    {               shift and go to state 53
    LET             shift and go to state 54
    CASE            shift and go to state 55
    NEW             shift and go to state 56
    ISVOID          shift and go to state 57
    ~               shift and go to state 59
    NOT             shift and go to state 60
    (               shift and go to state 51
    INT_CONST       shift and go to state 61
    STR_CONST       shift and go to state 62
    BOOL_CONST      shift and go to state 63
    -               shift and go to state 58

    expr                           shift and go to state 184

state 182

    (62) optional_assigns -> , OBJECTID : TYPEID optional_assigns .
    IN              reduce using rule 62 (optional_assigns -> , OBJECTID : TYPEID optional_assigns .)


state 183

    (58) lista_asig -> OBJECTID : TYPEID DARROW expr ; . lista_asig
    (59) lista_asig -> OBJECTID : TYPEID DARROW expr ; .
    (58) lista_asig -> . OBJECTID : TYPEID DARROW expr ; lista_asig
    (59) lista_asig -> . OBJECTID : TYPEID DARROW expr ;
    ESAC            reduce using rule 59 (lista_asig -> OBJECTID : TYPEID DARROW expr ; .)
    OBJECTID        shift and go to state 134

    lista_asig                     shift and go to state 185

state 184

    (61) optional_assigns -> , OBJECTID : TYPEID ASSIGN expr .
    (63) optional_assigns -> , OBJECTID : TYPEID ASSIGN expr . optional_assigns
    (24) expr -> expr . . OBJECTID ( expr optional_expressions )
    (25) expr -> expr . . OBJECTID ( expr )
    (26) expr -> expr . . OBJECTID ( )
    (27) expr -> expr . @ TYPEID . OBJECTID ( expr optional_expressions )
    (28) expr -> expr . @ TYPEID . OBJECTID ( expr )
    (29) expr -> expr . @ TYPEID . OBJECTID ( )
    (43) expr -> expr . + expr
    (44) expr -> expr . - expr
    (45) expr -> expr . * expr
    (46) expr -> expr . / expr
    (48) expr -> expr . < expr
    (49) expr -> expr . LE expr
    (50) expr -> expr . = expr
    (60) optional_assigns -> . , OBJECTID : TYPEID
    (61) optional_assigns -> . , OBJECTID : TYPEID ASSIGN expr
    (62) optional_assigns -> . , OBJECTID : TYPEID optional_assigns
    (63) optional_assigns -> . , OBJECTID : TYPEID ASSIGN expr optional_assigns
    IN              reduce using rule 61 (optional_assigns -> , OBJECTID : TYPEID ASSIGN expr .)
    .               shift and go to state 70
    @               shift and go to state 71
    +               shift and go to state 72
    -               shift and go to state 73
    *               shift and go to state 74
    /               shift and go to state 75
    <               shift and go to state 76
    LE              shift and go to state 77
    =               shift and go to state 78
    ,               shift and go to state 149

    optional_assigns               shift and go to state 186

state 185

    (58) lista_asig -> OBJECTID : TYPEID DARROW expr ; lista_asig .
    ESAC            reduce using rule 58 (lista_asig -> OBJECTID : TYPEID DARROW expr ; lista_asig .)


state 186

    (63) optional_assigns -> , OBJECTID : TYPEID ASSIGN expr optional_assigns .
    IN              reduce using rule 63 (optional_assigns -> , OBJECTID : TYPEID ASSIGN expr optional_assigns .)


Conflicts:

shift/reduce conflict for . in state 159 resolved as shift
shift/reduce conflict for @ in state 159 resolved as shift
shift/reduce conflict for + in state 159 resolved as shift
shift/reduce conflict for - in state 159 resolved as shift
shift/reduce conflict for * in state 159 resolved as shift
shift/reduce conflict for / in state 159 resolved as shift
shift/reduce conflict for < in state 159 resolved as shift
shift/reduce conflict for LE in state 159 resolved as shift
shift/reduce conflict for = in state 159 resolved as shift
shift/reduce conflict for . in state 168 resolved as shift
shift/reduce conflict for @ in state 168 resolved as shift
shift/reduce conflict for + in state 168 resolved as shift
shift/reduce conflict for - in state 168 resolved as shift
shift/reduce conflict for * in state 168 resolved as shift
shift/reduce conflict for / in state 168 resolved as shift
shift/reduce conflict for < in state 168 resolved as shift
shift/reduce conflict for LE in state 168 resolved as shift
shift/reduce conflict for = in state 168 resolved as shift
shift/reduce conflict for . in state 176 resolved as shift
shift/reduce conflict for @ in state 176 resolved as shift
shift/reduce conflict for + in state 176 resolved as shift
shift/reduce conflict for - in state 176 resolved as shift
shift/reduce conflict for * in state 176 resolved as shift
shift/reduce conflict for / in state 176 resolved as shift
shift/reduce conflict for < in state 176 resolved as shift
shift/reduce conflict for LE in state 176 resolved as shift
shift/reduce conflict for = in state 176 resolved as shift
shift/reduce conflict for . in state 180 resolved as shift
shift/reduce conflict for @ in state 180 resolved as shift
shift/reduce conflict for + in state 180 resolved as shift
shift/reduce conflict for - in state 180 resolved as shift
shift/reduce conflict for * in state 180 resolved as shift
shift/reduce conflict for / in state 180 resolved as shift
shift/reduce conflict for < in state 180 resolved as shift
shift/reduce conflict for LE in state 180 resolved as shift
shift/reduce conflict for = in state 180 resolved as shift